{"instances": {"application":{},"n-0-0-0-0":{},"n-0-0-0-1":{},"n-0-0-0-2":{},"n-0-0-11/promise-javascript-guia-completo":{"slug":"promise-javascript-guia-completo","content":"<p>Embora o código síncrono seja mais fácil de seguir e depurar, o assíncrono geralmente é melhor para desempenho e flexibilidade. Por que &quot;interromper o programa&quot; quando você pode acionar vários pedidos de uma só vez e depois lidar com eles quando cada um está pronto? As promessas estão se tornando uma grande parte do mundo do JavaScript, com muitas novas APIs sendo implementadas com a filosofia da promessa. Vamos dar uma olhada nas promessas, a API, como é usada!<\/p>\n<h3>API XMLHttpRequest<\/h3>\n<p>promise javascript<\/p>\n<p>A API <strong>XMLHttpRequest<\/strong> é assíncrona, mas não usa a <strong><em>API Promises<\/em><\/strong>. Existem algumas APIs nativas que agora usam promises javascript. As promises se tornarão mais predominantes, por isso é importante que todos os desenvolvedores JavaScript se acostumem a esse recurso. Também é importante notar que o Node.js é outra plataforma para o Promises (obviamente, como o Promise é um recurso da linguagem)<\/p>\n<p>Testar <strong><em>promises<\/em><\/strong> é provavelmente mais fácil do que você pensa, porque podemos utilizar o <strong><em>setTimeout()<\/em><\/strong> para simular uma &quot;<em>tarefa<\/em>&quot; assíncrona!<\/p>\n<h3>O básico<\/h3>\n<p>promise javascript<\/p>\n<p><img src=\"/uploads/2020/06/promise-javascript-1024x538.jpeg\" alt=\"promise javascript\"><\/p>\n<p><strong><em>Figura 01: promise javascript<\/em><\/strong><\/p>\n<p>O construtor <strong><em>new Promise()<\/em><\/strong> deve ser usado apenas para tarefas assíncronas herdadas, como o uso de <strong><em>setTimeout()<\/em><\/strong> ou <strong><em>XMLHttpRequest()<\/em><\/strong>. Uma nova promise é criada com a palavra reservada <strong><em>new<\/em><\/strong> e fornece o <strong><em>resolve<\/em><\/strong> e <strong><em>reject<\/em><\/strong> essas funções funciona para o retorno de chamada fornecido, veja o exemplo:<\/p>\n<pre><code><span class=\"token keyword\">const<\/span> promesa <span class=\"token operator\">=<\/span> <span class=\"token keyword\">new<\/span> <span class=\"token class-name\">Promise<\/span><span class=\"token punctuation\">(<\/span><span class=\"token keyword\">function<\/span><span class=\"token punctuation\">(<\/span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,<\/span> reject<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">{<\/span>\n\n    <span class=\"token keyword\">if<\/span><span class=\"token punctuation\">(<\/span><span class=\"token comment\">/*uma condição */<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">{<\/span>\n        <span class=\"token function\">resolve<\/span><span class=\"token punctuation\">(<\/span><span class=\"token string\">'Sucesso!'<\/span><span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">;<\/span>\n    <span class=\"token punctuation\">}<\/span>\n    <span class=\"token keyword\">else<\/span> <span class=\"token punctuation\">{<\/span>\n        <span class=\"token function\">reject<\/span><span class=\"token punctuation\">(<\/span><span class=\"token string\">'falha!'<\/span><span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">;<\/span>\n    <span class=\"token punctuation\">}<\/span>\n<span class=\"token punctuation\">}<\/span><span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">;<\/span>\n\npromesa<span class=\"token punctuation\">.<\/span><span class=\"token function\">then<\/span><span class=\"token punctuation\">(<\/span><span class=\"token keyword\">function<\/span><span class=\"token punctuation\">(<\/span><span class=\"token parameter\">result<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">{<\/span> \n    <span class=\"token comment\">/* fazer algo com esse resultado */<\/span>\n<span class=\"token punctuation\">}<\/span><span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">.<\/span><span class=\"token function\">catch<\/span><span class=\"token punctuation\">(<\/span><span class=\"token keyword\">function<\/span><span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">{<\/span>\n    <span class=\"token comment\">/* se der algum erro:( */<\/span>\n<span class=\"token punctuation\">}<\/span><span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">.<\/span><span class=\"token function\">finally<\/span><span class=\"token punctuation\">(<\/span><span class=\"token keyword\">function<\/span><span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">{<\/span>\n   <span class=\"token comment\">/* executa independentemente ou sucesso por falha */<\/span> \n<span class=\"token punctuation\">}<\/span><span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">;<\/span>\n<\/code><\/pre>\n<p>Cabe ao desenvolvedor fazer manualmente o <code>**_resolve()_** ou **_reject_**() no<\/code> corpo do retorno da chamada com base no resultado de sua tarefa. Um exemplo disso seria converter um evento criado com <strong><em>XMLHttpRequest()<\/em><\/strong> em uma tarefa <strong>promise javascript<\/strong>:<\/p>\n<pre><code><span class=\"token keyword\">function<\/span> <span class=\"token function\">get<\/span><span class=\"token punctuation\">(<\/span><span class=\"token parameter\">url<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">{<\/span>\n  <span class=\"token comment\">// Retorna uma nova promise.<\/span>\n  <span class=\"token keyword\">return<\/span> <span class=\"token keyword\">new<\/span> <span class=\"token class-name\">Promise<\/span><span class=\"token punctuation\">(<\/span><span class=\"token keyword\">function<\/span><span class=\"token punctuation\">(<\/span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,<\/span> reject<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">{<\/span>\n\n    <span class=\"token keyword\">let<\/span> req <span class=\"token operator\">=<\/span> <span class=\"token keyword\">new<\/span> <span class=\"token class-name\">XMLHttpRequest<\/span><span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">;<\/span>\n    req<span class=\"token punctuation\">.<\/span><span class=\"token function\">open<\/span><span class=\"token punctuation\">(<\/span><span class=\"token string\">'GET'<\/span><span class=\"token punctuation\">,<\/span> url<span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">;<\/span>\n\n    req<span class=\"token punctuation\">.<\/span><span class=\"token function-variable function\">onload<\/span> <span class=\"token operator\">=<\/span> <span class=\"token keyword\">function<\/span><span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">{<\/span>\n      <span class=\"token comment\">// Essa função é chamada mesmo que de 404<\/span>\n      <span class=\"token comment\">// Então faz a verificação do status<\/span>\n      <span class=\"token keyword\">if<\/span> <span class=\"token punctuation\">(<\/span>req<span class=\"token punctuation\">.<\/span>status <span class=\"token operator\">==<\/span> <span class=\"token number\">200<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">{<\/span>\n        <span class=\"token comment\">// Resolve a promise com algum texto de sucesso!<\/span>\n        <span class=\"token function\">resolve<\/span><span class=\"token punctuation\">(<\/span>req<span class=\"token punctuation\">.<\/span>response<span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">;<\/span>\n      <span class=\"token punctuation\">}<\/span>\n      <span class=\"token keyword\">else<\/span> <span class=\"token punctuation\">{<\/span>\n        <span class=\"token comment\">// Caso contrário a promise é rejeitada com a mensagem do status<\/span>\n        <span class=\"token function\">reject<\/span><span class=\"token punctuation\">(<\/span><span class=\"token function\">Error<\/span><span class=\"token punctuation\">(<\/span>req<span class=\"token punctuation\">.<\/span>statusText<span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">;<\/span>\n      <span class=\"token punctuation\">}<\/span>\n    <span class=\"token punctuation\">}<\/span><span class=\"token punctuation\">;<\/span>\n\n    <span class=\"token comment\">// Lidar com algum erro da rede<\/span>\n    req<span class=\"token punctuation\">.<\/span><span class=\"token function-variable function\">onerror<\/span> <span class=\"token operator\">=<\/span> <span class=\"token keyword\">function<\/span><span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">{<\/span>\n      <span class=\"token function\">reject<\/span><span class=\"token punctuation\">(<\/span><span class=\"token function\">Error<\/span><span class=\"token punctuation\">(<\/span><span class=\"token string\">\"A rede deu erro!\"<\/span><span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">;<\/span>\n    <span class=\"token punctuation\">}<\/span><span class=\"token punctuation\">;<\/span>\n\n    <span class=\"token comment\">// Aqui estamos enviado a requisição<\/span>\n    req<span class=\"token punctuation\">.<\/span><span class=\"token function\">send<\/span><span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">;<\/span>\n  <span class=\"token punctuation\">}<\/span><span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">;<\/span>\n<span class=\"token punctuation\">}<\/span>\n\n<span class=\"token function\">get<\/span><span class=\"token punctuation\">(<\/span><span class=\"token string\">'story.json'<\/span><span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">.<\/span><span class=\"token function\">then<\/span><span class=\"token punctuation\">(<\/span><span class=\"token keyword\">function<\/span><span class=\"token punctuation\">(<\/span><span class=\"token parameter\">response<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">{<\/span>\n  console<span class=\"token punctuation\">.<\/span><span class=\"token function\">log<\/span><span class=\"token punctuation\">(<\/span><span class=\"token string\">\"Success!\"<\/span><span class=\"token punctuation\">,<\/span> response<span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">;<\/span>\n<span class=\"token punctuation\">}<\/span><span class=\"token punctuation\">,<\/span> <span class=\"token keyword\">function<\/span><span class=\"token punctuation\">(<\/span><span class=\"token parameter\">error<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">{<\/span>\n  console<span class=\"token punctuation\">.<\/span><span class=\"token function\">error<\/span><span class=\"token punctuation\">(<\/span><span class=\"token string\">\"Failed!\"<\/span><span class=\"token punctuation\">,<\/span> error<span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">;<\/span>\n<span class=\"token punctuation\">}<\/span><span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">;<\/span>\n<\/code><\/pre>\n<p>Às vezes, você não precisa concluir tarefas assíncronas dentro da promise javascript, é possível que uma ação assíncrona seja executada, no entanto, retornar uma promessa será melhor para que você possa sempre contar com uma promessa que sai de uma determinada função . Nesse caso, você pode simplesmente fazer uma <strong>Promise.resolve()<\/strong> ou <strong><em>Promise.reject()<\/em><\/strong> sem usar a palavra reservada <strong><em>new<\/em><\/strong>. Por exemplo:<\/p>\n<h3>Descubra como Criar um jogo passo a passo usando apenas JavaScript<\/h3>\n<p>Conteúdo 100% GRATUITO, basta você clicar no BOTÃO saiba mais e se inscrever no Curso que vou lhe enviar todas as aulas para o seu e-mail<\/p>\n<p><a href=\"https://bit.ly/mini-curso-criando-game-js\" target=\"_blank\" rel=\"noopener\">Saiba Mais!<\/a><\/p>\n<pre><code><span class=\"token keyword\">let<\/span> userCache <span class=\"token operator\">=<\/span> <span class=\"token punctuation\">{<\/span><span class=\"token punctuation\">}<\/span><span class=\"token punctuation\">;<\/span>\n\n<span class=\"token keyword\">function<\/span> <span class=\"token function\">getUserDetail<\/span><span class=\"token punctuation\">(<\/span><span class=\"token parameter\">username<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">{<\/span>\n  <span class=\"token comment\">// Nos dois casos, em cache ou não, uma promessa será retornada<\/span>\n\n  <span class=\"token keyword\">if<\/span> <span class=\"token punctuation\">(<\/span>userCache<span class=\"token punctuation\">[<\/span>username<span class=\"token punctuation\">]<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">{<\/span>\n    <span class=\"token comment\">// Devolver uma promessa sem a palavra-chave \"new\"<\/span>\n    <span class=\"token keyword\">return<\/span> Promise<span class=\"token punctuation\">.<\/span><span class=\"token function\">resolve<\/span><span class=\"token punctuation\">(<\/span>userCache<span class=\"token punctuation\">[<\/span>username<span class=\"token punctuation\">]<\/span><span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">;<\/span>\n  <span class=\"token punctuation\">}<\/span>\n\n  <span class=\"token comment\">// Usa uma API de busca para obter as informações<\/span>\n  <span class=\"token comment\">// Onde essa buscar retorna uma promessa<\/span>\n  <span class=\"token keyword\">return<\/span> <span class=\"token function\">fetch<\/span><span class=\"token punctuation\">(<\/span><span class=\"token string\">'users/'<\/span> <span class=\"token operator\">+<\/span> username <span class=\"token operator\">+<\/span> <span class=\"token string\">'.json'<\/span><span class=\"token punctuation\">)<\/span>\n    <span class=\"token punctuation\">.<\/span><span class=\"token function\">then<\/span><span class=\"token punctuation\">(<\/span><span class=\"token keyword\">function<\/span><span class=\"token punctuation\">(<\/span><span class=\"token parameter\">result<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">{<\/span>\n      userCache<span class=\"token punctuation\">[<\/span>username<span class=\"token punctuation\">]<\/span> <span class=\"token operator\">=<\/span> result<span class=\"token punctuation\">;<\/span>\n      <span class=\"token keyword\">return<\/span> result<span class=\"token punctuation\">;<\/span>\n    <span class=\"token punctuation\">}<\/span><span class=\"token punctuation\">)<\/span>\n    <span class=\"token punctuation\">.<\/span><span class=\"token function\">catch<\/span><span class=\"token punctuation\">(<\/span><span class=\"token keyword\">function<\/span><span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">{<\/span>\n      <span class=\"token keyword\">throw<\/span> <span class=\"token keyword\">new<\/span> <span class=\"token class-name\">Error<\/span><span class=\"token punctuation\">(<\/span><span class=\"token string\">'Não foi possível encontrar o usuário: '<\/span> <span class=\"token operator\">+<\/span> username<span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">;<\/span>\n    <span class=\"token punctuation\">}<\/span><span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">;<\/span>\n<span class=\"token punctuation\">}<\/span>\n<\/code><\/pre>\n<p>Como uma <strong>promise javascript<\/strong> sempre é retornada, você sempre pode usar os métodos <code>**_then()_**<\/code> e <code>**_catch()_**<\/code> em seu valor de retorno!<\/p>\n<h3>Função then()<\/h3>\n<p>promise javascript<\/p>\n<p>Todas as instâncias de promessa obtêm um método <strong><em>then()<\/em><\/strong> que permite que você reaja à promessa. O primeiro método de retorno de chamada recebe o resultado fornecido pela <strong><em>resolve()<\/em><\/strong>:<\/p>\n<pre><code><span class=\"token keyword\">new<\/span> <span class=\"token class-name\">Promise<\/span><span class=\"token punctuation\">(<\/span><span class=\"token keyword\">function<\/span><span class=\"token punctuation\">(<\/span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,<\/span> reject<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">{<\/span>\n    <span class=\"token comment\">// Estou usando o setTimeout apenas para simular um evento assíncrono<\/span>\n    <span class=\"token function\">setTimeout<\/span><span class=\"token punctuation\">(<\/span><span class=\"token keyword\">function<\/span><span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">{<\/span> <span class=\"token function\">resolve<\/span><span class=\"token punctuation\">(<\/span><span class=\"token number\">10<\/span><span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">;<\/span> <span class=\"token punctuation\">}<\/span><span class=\"token punctuation\">,<\/span> <span class=\"token number\">3000<\/span><span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">;<\/span>\n<span class=\"token punctuation\">}<\/span><span class=\"token punctuation\">)<\/span>\n<span class=\"token punctuation\">.<\/span><span class=\"token function\">then<\/span><span class=\"token punctuation\">(<\/span><span class=\"token keyword\">function<\/span><span class=\"token punctuation\">(<\/span><span class=\"token parameter\">result<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">{<\/span>\n    console<span class=\"token punctuation\">.<\/span><span class=\"token function\">log<\/span><span class=\"token punctuation\">(<\/span>result<span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">;<\/span>\n<span class=\"token punctuation\">}<\/span><span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">;<\/span>\n\n<span class=\"token comment\">// Resultado será 10<\/span>\n<\/code><\/pre>\n<p>O retorno do método <strong><em>then()<\/em><\/strong> é acionado quando a <strong>promise javascript<\/strong> é resolvida. Você também pode encadear vários <strong><em>then()<\/em><\/strong> como retorno<\/p>\n<pre><code><span class=\"token keyword\">new<\/span> <span class=\"token class-name\">Promise<\/span><span class=\"token punctuation\">(<\/span><span class=\"token keyword\">function<\/span><span class=\"token punctuation\">(<\/span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,<\/span> reject<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">{<\/span> \n    <span class=\"token comment\">// Estou usando o setTimeout apenas para simular um evento assíncrono<\/span>\n    <span class=\"token function\">setTimeout<\/span><span class=\"token punctuation\">(<\/span><span class=\"token keyword\">function<\/span><span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">{<\/span> <span class=\"token function\">resolve<\/span><span class=\"token punctuation\">(<\/span><span class=\"token number\">10<\/span><span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">;<\/span> <span class=\"token punctuation\">}<\/span><span class=\"token punctuation\">,<\/span> <span class=\"token number\">3000<\/span><span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">;<\/span>\n<span class=\"token punctuation\">}<\/span><span class=\"token punctuation\">)<\/span>\n<span class=\"token punctuation\">.<\/span><span class=\"token function\">then<\/span><span class=\"token punctuation\">(<\/span><span class=\"token keyword\">function<\/span><span class=\"token punctuation\">(<\/span><span class=\"token parameter\">num<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">{<\/span> console<span class=\"token punctuation\">.<\/span><span class=\"token function\">log<\/span><span class=\"token punctuation\">(<\/span><span class=\"token string\">'primeiro then: '<\/span><span class=\"token punctuation\">,<\/span> num<span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">;<\/span> <span class=\"token keyword\">return<\/span> num <span class=\"token operator\">*<\/span> <span class=\"token number\">2<\/span><span class=\"token punctuation\">;<\/span> <span class=\"token punctuation\">}<\/span><span class=\"token punctuation\">)<\/span>\n<span class=\"token punctuation\">.<\/span><span class=\"token function\">then<\/span><span class=\"token punctuation\">(<\/span><span class=\"token keyword\">function<\/span><span class=\"token punctuation\">(<\/span><span class=\"token parameter\">num<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">{<\/span> console<span class=\"token punctuation\">.<\/span><span class=\"token function\">log<\/span><span class=\"token punctuation\">(<\/span><span class=\"token string\">'segundo then: '<\/span><span class=\"token punctuation\">,<\/span> num<span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">;<\/span> <span class=\"token keyword\">return<\/span> num <span class=\"token operator\">*<\/span> <span class=\"token number\">2<\/span><span class=\"token punctuation\">;<\/span> <span class=\"token punctuation\">}<\/span><span class=\"token punctuation\">)<\/span>\n<span class=\"token punctuation\">.<\/span><span class=\"token function\">then<\/span><span class=\"token punctuation\">(<\/span><span class=\"token keyword\">function<\/span><span class=\"token punctuation\">(<\/span><span class=\"token parameter\">num<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">{<\/span> console<span class=\"token punctuation\">.<\/span><span class=\"token function\">log<\/span><span class=\"token punctuation\">(<\/span><span class=\"token string\">'último then: '<\/span><span class=\"token punctuation\">,<\/span> num<span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">;<\/span><span class=\"token punctuation\">}<\/span><span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">;<\/span>\n\n<span class=\"token comment\">// No console:<\/span>\n<span class=\"token comment\">// primeiro then:  10<\/span>\n<span class=\"token comment\">// segundo then:  20<\/span>\n<span class=\"token comment\">// último then:  40<\/span>\n<\/code><\/pre>\n<p>Cada um <strong><em>then()<\/em><\/strong> recebe o resultado do <strong><em>then()<\/em><\/strong> anterior fazendo assim uma transformação no seu dado.<\/p>\n<p>Se uma <strong>promise javascript<\/strong> já foi resolvida, mas o método <strong><em>then()<\/em><\/strong> é chamada novamente, o retorno dessa chamada é acionado imediatamente. Se a promessa for rejeitada e se esse then() foi invocado após a rejeição, o retorno de chamada nunca será chamado.<\/p>\n<h3>Função catch()<\/h3>\n<p>promise javascript<\/p>\n<p>A função (método) <strong><em>catch()<\/em><\/strong> é o resultado do retorno caso a promise javascript for rejeitada, veja o exemplo em código:<\/p>\n<pre><code><span class=\"token keyword\">new<\/span> <span class=\"token class-name\">Promise<\/span><span class=\"token punctuation\">(<\/span><span class=\"token keyword\">function<\/span><span class=\"token punctuation\">(<\/span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,<\/span> reject<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">{<\/span>\n    <span class=\"token comment\">// Estou usando o setTimeout apenas para simular um evento assíncrono<\/span>\n    <span class=\"token function\">setTimeout<\/span><span class=\"token punctuation\">(<\/span><span class=\"token keyword\">function<\/span><span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">{<\/span> <span class=\"token function\">reject<\/span><span class=\"token punctuation\">(<\/span><span class=\"token string\">'Feito!'<\/span><span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">;<\/span> <span class=\"token punctuation\">}<\/span><span class=\"token punctuation\">,<\/span> <span class=\"token number\">3000<\/span><span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">;<\/span>\n<span class=\"token punctuation\">}<\/span><span class=\"token punctuation\">)<\/span>\n<span class=\"token punctuation\">.<\/span><span class=\"token function\">then<\/span><span class=\"token punctuation\">(<\/span><span class=\"token keyword\">function<\/span><span class=\"token punctuation\">(<\/span><span class=\"token parameter\">e<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">{<\/span> console<span class=\"token punctuation\">.<\/span><span class=\"token function\">log<\/span><span class=\"token punctuation\">(<\/span><span class=\"token string\">'Feito'<\/span><span class=\"token punctuation\">,<\/span> e<span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">;<\/span> <span class=\"token punctuation\">}<\/span><span class=\"token punctuation\">)<\/span>\n<span class=\"token punctuation\">.<\/span><span class=\"token function\">catch<\/span><span class=\"token punctuation\">(<\/span><span class=\"token keyword\">function<\/span><span class=\"token punctuation\">(<\/span><span class=\"token parameter\">e<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">{<\/span> console<span class=\"token punctuation\">.<\/span><span class=\"token function\">log<\/span><span class=\"token punctuation\">(<\/span><span class=\"token string\">'catch: '<\/span><span class=\"token punctuation\">,<\/span> e<span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">;<\/span> <span class=\"token punctuation\">}<\/span><span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">;<\/span>\n\n<span class=\"token comment\">// No console:<\/span>\n<span class=\"token comment\">// 'catch: Feito!'<\/span>\n<\/code><\/pre>\n<p>O que você fornece ao método reject() é com você. Um padrão frequente está enviando um Error para o método catch(), algo parecido com esse exemplo:<\/p>\n<pre><code><span class=\"token function\">reject<\/span><span class=\"token punctuation\">(<\/span><span class=\"token function\">Error<\/span><span class=\"token punctuation\">(<\/span><span class=\"token string\">'Não foi possível encontrar os dados'<\/span><span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">;<\/span>\n<\/code><\/pre>\n<h3>Função finally()<\/h3>\n<p>promise javascript<\/p>\n<p>O método <strong><em>finally()<\/em><\/strong> retorna uma promise javascript recém-introduzido e ela é chamado independentemente do sucesso ou falha a promise em questão:<\/p>\n<pre><code><span class=\"token punctuation\">(<\/span><span class=\"token keyword\">new<\/span> <span class=\"token class-name\">Promise<\/span><span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">(<\/span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,<\/span> reject<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token operator\">=><\/span> <span class=\"token punctuation\">{<\/span> <span class=\"token function\">reject<\/span><span class=\"token punctuation\">(<\/span><span class=\"token string\">\"Nope\"<\/span><span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">;<\/span> <span class=\"token punctuation\">}<\/span><span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">)<\/span>\n    <span class=\"token punctuation\">.<\/span><span class=\"token function\">then<\/span><span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token operator\">=><\/span> <span class=\"token punctuation\">{<\/span> console<span class=\"token punctuation\">.<\/span><span class=\"token function\">log<\/span><span class=\"token punctuation\">(<\/span><span class=\"token string\">\"sucesso\"<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">}<\/span><span class=\"token punctuation\">)<\/span>\n    <span class=\"token punctuation\">.<\/span><span class=\"token function\">catch<\/span><span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token operator\">=><\/span> <span class=\"token punctuation\">{<\/span> console<span class=\"token punctuation\">.<\/span><span class=\"token function\">log<\/span><span class=\"token punctuation\">(<\/span><span class=\"token string\">\"falha\"<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">}<\/span><span class=\"token punctuation\">)<\/span>\n    <span class=\"token punctuation\">.<\/span><span class=\"token function\">finally<\/span><span class=\"token punctuation\">(<\/span><span class=\"token parameter\">res<\/span> <span class=\"token operator\">=><\/span> <span class=\"token punctuation\">{<\/span> console<span class=\"token punctuation\">.<\/span><span class=\"token function\">log<\/span><span class=\"token punctuation\">(<\/span><span class=\"token string\">\"sucesso ou falha (final)\"<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">}<\/span><span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">;<\/span>\n<\/code><\/pre>\n<h3>Função Promise.all()<\/h3>\n<p>promise javascript<\/p>\n<p>O método <strong><em>promise.all()<\/em><\/strong> executa várias promises de uma só vez e gerenciar tudo em formato de pilha. Existe alguns cenários que é interessante executa várias promise javascript, mas só quer responder quando todas elas forem concluídas, é aí que o recurso <strong><em>Promise.all<\/em><\/strong> entra, lá em nosso canal do youtube estamos desenvolvendo um projeto do zero usando apenas JavaScript e tem uma parte lá que uso esse recurso, caso queira ver <a href=\"https://youtu.be/rNaK6oCrXWM\" target=\"_blank\" rel=\"noopener\">clique aqui<\/a>.<\/p>\n<pre><code>Promise<span class=\"token punctuation\">.<\/span><span class=\"token function\">all<\/span><span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">[<\/span>promise1<span class=\"token punctuation\">,<\/span> promise2<span class=\"token punctuation\">]<\/span><span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">.<\/span><span class=\"token function\">then<\/span><span class=\"token punctuation\">(<\/span><span class=\"token keyword\">function<\/span><span class=\"token punctuation\">(<\/span><span class=\"token parameter\">results<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">{<\/span>\n    <span class=\"token comment\">// Ambas as promessas resolvidas<\/span>\n<span class=\"token punctuation\">}<\/span><span class=\"token punctuation\">)<\/span>\n<span class=\"token punctuation\">.<\/span><span class=\"token function\">catch<\/span><span class=\"token punctuation\">(<\/span><span class=\"token keyword\">function<\/span><span class=\"token punctuation\">(<\/span><span class=\"token parameter\">error<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">{<\/span>\n    <span class=\"token comment\">// Uma ou mais promessas foram rejeitadas<\/span>\n<span class=\"token punctuation\">}<\/span><span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">;<\/span>\n<\/code><\/pre>\n<p>Uma maneira perfeita de se usar a função Promise.all é disparar várias fetch solicitações AJAX (via ) ao mesmo tempo:<\/p>\n<pre><code><span class=\"token keyword\">let<\/span> request1 <span class=\"token operator\">=<\/span> <span class=\"token function\">fetch<\/span><span class=\"token punctuation\">(<\/span><span class=\"token string\">'/users.json'<\/span><span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">;<\/span>\n<span class=\"token keyword\">let<\/span> request2 <span class=\"token operator\">=<\/span> <span class=\"token function\">fetch<\/span><span class=\"token punctuation\">(<\/span><span class=\"token string\">'/articles.json'<\/span><span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">;<\/span>\n\nPromise<span class=\"token punctuation\">.<\/span><span class=\"token function\">all<\/span><span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">[<\/span>request1<span class=\"token punctuation\">,<\/span> request2<span class=\"token punctuation\">]<\/span><span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">.<\/span><span class=\"token function\">then<\/span><span class=\"token punctuation\">(<\/span><span class=\"token keyword\">function<\/span><span class=\"token punctuation\">(<\/span><span class=\"token parameter\">results<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">{<\/span>\n    <span class=\"token comment\">// Ambas as promessas resolvidas<\/span>\n<span class=\"token punctuation\">}<\/span><span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">;<\/span>\n<\/code><\/pre>\n<p>Você pode combinar APIs como fetch e a API battery, pois ambas retornam promise javascript:<\/p>\n<pre><code>Promise<span class=\"token punctuation\">.<\/span><span class=\"token function\">all<\/span><span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">[<\/span><span class=\"token function\">fetch<\/span><span class=\"token punctuation\">(<\/span><span class=\"token string\">'/users.json'<\/span><span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">,<\/span> navigator<span class=\"token punctuation\">.<\/span><span class=\"token function\">getBattery<\/span><span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">]<\/span><span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">.<\/span><span class=\"token function\">then<\/span><span class=\"token punctuation\">(<\/span><span class=\"token keyword\">function<\/span><span class=\"token punctuation\">(<\/span><span class=\"token parameter\">results<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">{<\/span>\n    <span class=\"token comment\">// Ambas as promessas feitas!<\/span>\n<span class=\"token punctuation\">}<\/span><span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">;<\/span>\n<\/code><\/pre>\n<p>Lidar com a rejeição é, obviamente, difícil. Se qualquer promessa for rejeitada, os <strong><em>catch<\/em><\/strong> serve para essa situação:<\/p>\n<pre><code>\n<span class=\"token keyword\">var<\/span> req1 <span class=\"token operator\">=<\/span> <span class=\"token keyword\">new<\/span> <span class=\"token class-name\">Promise<\/span><span class=\"token punctuation\">(<\/span><span class=\"token keyword\">function<\/span><span class=\"token punctuation\">(<\/span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,<\/span> reject<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">{<\/span> \n    <span class=\"token comment\">// Estou usando o setTimeout apenas para simular um evento assíncrono<\/span>\n    <span class=\"token function\">setTimeout<\/span><span class=\"token punctuation\">(<\/span><span class=\"token keyword\">function<\/span><span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">{<\/span> <span class=\"token function\">resolve<\/span><span class=\"token punctuation\">(<\/span><span class=\"token string\">'First!'<\/span><span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">;<\/span> <span class=\"token punctuation\">}<\/span><span class=\"token punctuation\">,<\/span> <span class=\"token number\">4000<\/span><span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">;<\/span>\n<span class=\"token punctuation\">}<\/span><span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">;<\/span>\n<span class=\"token keyword\">var<\/span> req2 <span class=\"token operator\">=<\/span> <span class=\"token keyword\">new<\/span> <span class=\"token class-name\">Promise<\/span><span class=\"token punctuation\">(<\/span><span class=\"token keyword\">function<\/span><span class=\"token punctuation\">(<\/span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,<\/span> reject<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">{<\/span> \n    <span class=\"token comment\">// Uma ação assíncrona simulada usando setTimeout <\/span>\n    <span class=\"token function\">setTimeout<\/span><span class=\"token punctuation\">(<\/span><span class=\"token keyword\">function<\/span><span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">{<\/span> <span class=\"token function\">reject<\/span><span class=\"token punctuation\">(<\/span><span class=\"token string\">'Second!'<\/span><span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">;<\/span> <span class=\"token punctuation\">}<\/span><span class=\"token punctuation\">,<\/span> <span class=\"token number\">3000<\/span><span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">;<\/span>\n<span class=\"token punctuation\">}<\/span><span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">;<\/span>\nPromise<span class=\"token punctuation\">.<\/span><span class=\"token function\">all<\/span><span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">[<\/span>req1<span class=\"token punctuation\">,<\/span> req2<span class=\"token punctuation\">]<\/span><span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">.<\/span><span class=\"token function\">then<\/span><span class=\"token punctuation\">(<\/span><span class=\"token keyword\">function<\/span><span class=\"token punctuation\">(<\/span><span class=\"token parameter\">results<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">{<\/span>\n    console<span class=\"token punctuation\">.<\/span><span class=\"token function\">log<\/span><span class=\"token punctuation\">(<\/span><span class=\"token string\">'Then: '<\/span><span class=\"token punctuation\">,<\/span> results<span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">;<\/span>\n<span class=\"token punctuation\">}<\/span><span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">.<\/span><span class=\"token function\">catch<\/span><span class=\"token punctuation\">(<\/span><span class=\"token keyword\">function<\/span><span class=\"token punctuation\">(<\/span><span class=\"token parameter\">err<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">{<\/span>\n    console<span class=\"token punctuation\">.<\/span><span class=\"token function\">log<\/span><span class=\"token punctuation\">(<\/span><span class=\"token string\">'Catch: '<\/span><span class=\"token punctuation\">,<\/span> err<span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">;<\/span>\n<span class=\"token punctuation\">}<\/span><span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">;<\/span>\n\n<span class=\"token comment\">// No console:<\/span>\n<span class=\"token comment\">// Catch: Segunda!<\/span>\n<\/code><\/pre>\n<p>Promise.all será super útil à medida que mais APIs avançarem para <strong>promise javascript<\/strong>.<\/p>\n<h3>Função Promise.race()<\/h3>\n<p>promise javascript<\/p>\n<p>A função/Método <strong><em>Promise.race()<\/em><\/strong> é uma função interessante e pouco conhecida, não sei o porque, em vez de esperar que todas as <strong><em>promise javascript<\/em><\/strong> forem resolvidas ou rejeitadas, <strong><em>Promise.race()<\/em><\/strong> dispara assim que qualquer promessa em um array for resolvida ou rejeitada, veja no código de exemplo que interessante:<\/p>\n<pre><code><span class=\"token keyword\">let<\/span> req1 <span class=\"token operator\">=<\/span> <span class=\"token keyword\">new<\/span> <span class=\"token class-name\">Promise<\/span><span class=\"token punctuation\">(<\/span><span class=\"token keyword\">function<\/span><span class=\"token punctuation\">(<\/span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,<\/span> reject<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">{<\/span> \n    <span class=\"token comment\">// Estou usando o setTimeout apenas para simular um evento assíncrono<\/span>\n    <span class=\"token function\">setTimeout<\/span><span class=\"token punctuation\">(<\/span><span class=\"token keyword\">function<\/span><span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">{<\/span> <span class=\"token function\">resolve<\/span><span class=\"token punctuation\">(<\/span><span class=\"token string\">'First!'<\/span><span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">;<\/span> <span class=\"token punctuation\">}<\/span><span class=\"token punctuation\">,<\/span> <span class=\"token number\">8000<\/span><span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">;<\/span>\n<span class=\"token punctuation\">}<\/span><span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">;<\/span>\n<span class=\"token keyword\">var<\/span> req2 <span class=\"token operator\">=<\/span> <span class=\"token keyword\">new<\/span> <span class=\"token class-name\">Promise<\/span><span class=\"token punctuation\">(<\/span><span class=\"token keyword\">function<\/span><span class=\"token punctuation\">(<\/span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,<\/span> reject<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">{<\/span> \n    <span class=\"token comment\">//Estou usando o setTimeout apenas para simular um evento assíncrono<\/span>\n    <span class=\"token function\">setTimeout<\/span><span class=\"token punctuation\">(<\/span><span class=\"token keyword\">function<\/span><span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">{<\/span> <span class=\"token function\">resolve<\/span><span class=\"token punctuation\">(<\/span><span class=\"token string\">'Second!'<\/span><span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">;<\/span> <span class=\"token punctuation\">}<\/span><span class=\"token punctuation\">,<\/span> <span class=\"token number\">3000<\/span><span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">;<\/span>\n<span class=\"token punctuation\">}<\/span><span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">;<\/span>\nPromise<span class=\"token punctuation\">.<\/span><span class=\"token function\">race<\/span><span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">[<\/span>req1<span class=\"token punctuation\">,<\/span> req2<span class=\"token punctuation\">]<\/span><span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">.<\/span><span class=\"token function\">then<\/span><span class=\"token punctuation\">(<\/span><span class=\"token keyword\">function<\/span><span class=\"token punctuation\">(<\/span><span class=\"token parameter\">one<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">{<\/span>\n    console<span class=\"token punctuation\">.<\/span><span class=\"token function\">log<\/span><span class=\"token punctuation\">(<\/span><span class=\"token string\">'3: '<\/span><span class=\"token punctuation\">,<\/span> one<span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">;<\/span>\n<span class=\"token punctuation\">}<\/span><span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">.<\/span><span class=\"token function\">catch<\/span><span class=\"token punctuation\">(<\/span><span class=\"token keyword\">function<\/span><span class=\"token punctuation\">(<\/span><span class=\"token parameter\">one<span class=\"token punctuation\">,<\/span> two<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">{<\/span>\n    console<span class=\"token punctuation\">.<\/span><span class=\"token function\">log<\/span><span class=\"token punctuation\">(<\/span><span class=\"token string\">'Catch: '<\/span><span class=\"token punctuation\">,<\/span> one<span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">;<\/span>\n<span class=\"token punctuation\">}<\/span><span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">;<\/span>\n\n<span class=\"token comment\">// From the console:<\/span>\n<span class=\"token comment\">// 3: segundos!<\/span>\n<\/code><\/pre>\n<p>Um caso de uso: Podemos está acionando uma solicitação para uma fonte primária e uma fonte secundária (caso o primário ou o secundário não estejam disponíveis).<\/p>\n<h3>Descubra como Criar um jogo passo a passo usando apenas JavaScript<\/h3>\n<p>Conteúdo 100% GRATUITO, basta você clicar no BOTÃO saiba mais e se inscrever no Curso que vou lhe enviar todas as aulas para o seu e-mail<\/p>\n<p><a href=\"https://bit.ly/mini-curso-criando-game-js\" target=\"_blank\" rel=\"noopener\">Saiba Mais!<\/a><\/p>\n<h3>Conclusões<\/h3>\n<p>promise javascript<\/p>\n<p>A <strong><em>promise javascript<\/em><\/strong> têm sido um tópico importante nos últimos anos (ou nos últimos 10 anos) e os frameworks modernos passaram cada vez mais a usar promise javascript como um padrão. Provavelmente, é sensato supor que você verá a maioria das novas APIs JavaScript sendo implementadas com um padrão baseado em promise javascript…<\/p>\n<p>Isso é uma coisa muito boa, pois os desenvolvedores vão evitar o uso da de callback confusas e as interações assíncronas podem ser transmitidas como qualquer outra variável. As promessas levam algum tempo para se acostumar, pois as ferramentas estão (nativamente) lá e agora é a hora de aprendê-las!<\/p>\n<h4>Recomendação extra<\/h4>\n<ul>\n<li><a href=\"/6-recursos-do-ecmascript6/\">6 Recursos do ECMAScript6 Extraordinários<\/a><\/li>\n<li><a href=\"/guia-para-envio-de-e-mail-marketing-completo/\">Guia completo de envio de e-mail<\/a><\/li>\n<li><a href=\"/react-hooks-guia-completo-passo-a-passo/\">Guia completo de React Hooks<\/a><\/li>\n<\/ul>\n<h4>Vídeo complementar ao tema do artigo<\/h4>\n<p>&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/fRa33RSJpSo&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;/iframe&gt;<\/p>\n<h4>Vídeo recém publicado em nosso canal do Youtube<\/h4>\n<p>&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/GUx-EElkUWw&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;/iframe&gt;<\/p>\n<h4>Treinamento recomendado<\/h4>\n<p><a href=\"/programador-fullstack-8-semanas\"><img src=\"/uploads/2020/04/banner-de-divulgação-dos-artigos-1024x1024.png\" alt=\"\"><\/a><\/p>\n","date":"2020-06-03T00:00:00.000Z","readingTime":16,"title":"Promise JavaScript (Guia Completo) Passo a Passo","tags":["alisson-suassuna","frontend","javascript","javascript-promises","javascript-promises-tutorial","javascript-tutorial","promise-javascript","promise-javascript-es6","promise-javascript-example","promises-in-javascript","tipscode"],"description":"Embora o código síncrono seja mais fácil de seguir e depurar, o assíncrono geralmente é melhor para desempenho e flexibilidade. Por que \"interromper o programa\" quando você pode acionar vários pedidos de uma só vez e depois lidar com eles quando cada um está pronto? As promessas estão se tornando uma grande parte do mundo do JavaScript, com muitas novas APIs sendo implementadas com a filosofia da promessa. Vamos dar uma olhada nas promessas, a API, como é usada!","imgArticle":"/thumbnail-article/promise.png","imgHome":"/thumbnail-home/promise.png"},"n-0-0-11-0-0":{"expanded":false},"n-0-0-11-0-0-0-0-0-0-1-0":{}}, "page": {"image":"/thumbnail-article/promise.png","status":200,"locale":"pt-BR","title":"Promise JavaScript (Guia Completo) Passo a Passo - TipsCode","description":"Embora o código síncrono seja mais fácil de seguir e depurar, o assíncrono geralmente é melhor para desempenho e flexibilidade. Por que \"interromper o programa\" quando você pode acionar vários pedidos de uma só vez e depois lidar com eles quando cada um está pronto? As promessas estão se tornando uma grande parte do mundo do JavaScript, com muitas novas APIs sendo implementadas com a filosofia da promessa. Vamos dar uma olhada nas promessas, a API, como é usada!"}}