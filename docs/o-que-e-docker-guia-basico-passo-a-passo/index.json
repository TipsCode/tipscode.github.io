{"instances":{"application":{"persistent":false},"FacebookPixel/0-0-0-0-0":{"persistent":false},"GoogleAnalytics/0-0-0-0-1":{"persistent":false},"Article_Articles/0-0-12/o-que-e-docker-guia-basico-passo-a-passo":{"persistent":false,"slug":"o-que-e-docker-guia-basico-passo-a-passo","content":"<p>Para aquelas situações em que os contêineres brilham, você pode estar se perguntando como essa tecnologia é implementada na prática. Então, vamos ver como o Docker cumpre todas essas promessas.</p>\n<p><img src=\"/uploads/2020/08/o-que-e-docker-1024x683.png\" alt=\"o que é docker\"></p>\n<p>O que é Docker</p>\n<p>Docker é um projeto de código aberto - bem como uma empresa, com sede em San Francisco, que apoia esse projeto. O docker foi lançado em 2013 e, mesmo assim, em tão pouco tempo e ainda parcialmente em versão beta, <a href=\"https://www.datadoghq.com/docker-adoption/\" target=\"_blank\" rel=\"noopener\">está sendo amplamente adotado em vários setores.</a></p>\n<p>Mas o que é? Docker é um software executado na linha de comando e que permite automatizar a implantação de aplicações dentro de contêineres de software. <a href=\"https://www.docker.com/why-docker\" target=\"_blank\" rel=\"noopener\">No site do Docker</a>:</p>\n<blockquote>\n<p>Os contêineres do Docker envolvem um pedaço de software em um sistema de arquivos completo que contém tudo o que é necessário para executar: código, tempo de execução, ferramentas do sistema, bibliotecas do sistema - qualquer coisa que possa ser instalada em um servidor. Isso garante que o software sempre funcionará da mesma forma, independentemente de seu ambiente.</p>\n</blockquote>\n<p>Como isso ainda pode ser um pouco abstrato, vamos ver como é executar um contêiner com docker.</p>\n<h2>Criando Contêiner Docker</h2>\n<p>É assim que você executa um contêiner “hello-world”:</p>\n<pre><code>$ docker run hello<span class=\"token operator\">-</span>world\n</code></pre>\n<p>E aqui está a saída, gerada de dentro do contêiner, com uma pequena descrição dos componentes internos do Docker:</p>\n<pre><code>Hello from Docker<span class=\"token punctuation\">.</span>\nThis message shows that your installation appears to be working correctly<span class=\"token punctuation\">.</span>\n\nTo generate <span class=\"token keyword\">this</span> message<span class=\"token punctuation\">,</span> Docker took the following steps<span class=\"token operator\">:</span>\n<span class=\"token number\">1.</span> The Docker Engine <span class=\"token constant\">CLI</span> client contacted the Docker Engine daemon<span class=\"token punctuation\">.</span>\n<span class=\"token number\">2.</span> The Docker Engine daemon pulled the <span class=\"token string\">\"hello-world\"</span> image from the Docker Hub<span class=\"token punctuation\">.</span>\n<span class=\"token number\">3.</span> The Docker Engine daemon created a <span class=\"token keyword\">new</span> <span class=\"token class-name\">container</span> from that image which runs the\n   executable that produces the output you are currently reading<span class=\"token punctuation\">.</span>\n<span class=\"token number\">4.</span> The Docker Engine daemon streamed that output to the Docker Engine <span class=\"token constant\">CLI</span> client<span class=\"token punctuation\">,</span> which sent it\n   to your terminal<span class=\"token punctuation\">.</span>\n\nCaso queira algo mais avançado<span class=\"token punctuation\">,</span> você pode executar com o o Ubuntu ou qualquer outra distro<span class=\"token operator\">:</span>\n$ docker run <span class=\"token operator\">-</span>it ubuntu bash\n\nCompartilhe imagens<span class=\"token punctuation\">,</span> automatize fluxos de trabalho e muito mais com uma conta Docker Hub gratuita<span class=\"token operator\">:</span>\n<span class=\"token literal-property property\">https</span><span class=\"token operator\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span>hub<span class=\"token punctuation\">.</span>docker<span class=\"token punctuation\">.</span>com\n\nPara mais exemplos veja o site<span class=\"token operator\">:</span>\n<span class=\"token literal-property property\">https</span><span class=\"token operator\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span>docs<span class=\"token punctuation\">.</span>docker<span class=\"token punctuation\">.</span>com<span class=\"token operator\">/</span>userguide<span class=\"token operator\">/</span>\n</code></pre>\n<p>Esperançosamente, isso foi simples o suficiente, mas não há muito mais que possamos fazer com o contêiner “hello-world”, então vamos além e executamos um shell interativo em um Ubuntu Linux:</p>\n<pre><code>$ docker run <span class=\"token operator\">-</span>i <span class=\"token operator\">-</span>t ubuntu bash\n\n# cat <span class=\"token operator\">/</span>etc<span class=\"token operator\">/</span>issue\nUbuntu <span class=\"token number\">16.04</span> <span class=\"token constant\">LTS</span> \\n \\l\n</code></pre>\n<p>O primeiro comando inicia o -i TTY interativo ( ) ou o console ( -t) no ubuntu contêiner com o bash shell. O segundo comando ( cat /etc/issue) já está dentro do contêiner (e poderíamos ter continuado a executar os comandos, é claro). Para ser claro: não importa se você está no Windows, Mac ou Debian, para esse contêiner você está em uma máquina Ubuntu. E para que conste, o console estava pronto e funcionando em um segundo !</p>\n<p>Além disso, como os contêineres são ambientes completamente isolados e descartáveis, você pode fazer coisas malucas neles, como:</p>\n<pre><code># rm <span class=\"token operator\">-</span>rf <span class=\"token operator\">/</span>etc\n# cat <span class=\"token operator\">/</span>etc<span class=\"token operator\">/</span>issue\n<span class=\"token literal-property property\">cat</span><span class=\"token operator\">:</span> <span class=\"token operator\">/</span>etc<span class=\"token operator\">/</span>issue<span class=\"token operator\">:</span> No such file or directory\n</code></pre>\n<p>E quando você sai ou finaliza esse contêiner, tudo que você precisa fazer é reiniciá-lo, e você obterá um novo exatamente no mesmo estado inicial:</p>\n<pre><code># exit\n$ docker run <span class=\"token operator\">-</span>i <span class=\"token operator\">-</span>t ubuntu bash\n# cat <span class=\"token operator\">/</span>etc<span class=\"token operator\">/</span>issue\nUbuntu <span class=\"token number\">16.04</span> <span class=\"token constant\">LTS</span> \\n \\l\n</code></pre>\n<p>E é simples assim, espero que tenha consigo compreender melhor o que é docker.</p>\n<h2>Como Funciona o Doker</h2>\n<h3>A arquitetura</h3>\n<p>Se você está familiarizado com máquinas virtuais (VM), como um hipervisor, pode já ter começado a notar algumas diferenças. Embora permitam que você execute diferentes sistemas operacionais (SO), as VMs ocupam muito espaço na memória da máquina host, já que cada novo SO é carregado do zero na memória principal. E uma vez que cada SO requer todos os seus próprios binários e bibliotecas para todo o sistema, isso geralmente é responsável por vários GBs extras de espaço em disco. Por último, mas não menos importante, assim como ao iniciar um SO real, o sistema leva vários minutos para carregar antes de estar operacional.</p>\n<p><img src=\"/uploads/2020/08/arquitetura-docker.png\" alt=\"\"></p>\n<p>Fonte: <a href=\"https://www.docker.com/sites/default/files/WhatIsDocker_2_VMs_0.png\" target=\"_blank\" rel=\"noopener\">https://www.docker.com/sites/default/files/WhatIsDocker_2_VMs_0.png</a></p>\n<h3>Imagens e Containers</h3>\n<p>Você ouvirá muito sobre “imagens” e “contêineres” ao trabalhar com o Docker, então vamos esclarecer o que são.</p>\n<p>Uma imagem (às vezes chamada de “construção”) é um arquivo, um recurso somente de leitura que você baixa ou cria, embalado com tudo o que é necessário para um ambiente operacional. Construir imagens é muito fácil, porque você pode usar imagens já disponíveis como base (por exemplo, uma distribuição Debian) e dizer ao Docker o que você quer em cima dela, como certas ferramentas de desenvolvimento, bibliotecas e até mesmo colocar seu próprio aplicativo dentro.</p>\n<p>Um contêiner, por outro lado, é o ambiente isolado que você obtém quando executa uma imagem e é lido e gravado, para que você possa fazer o que quiser com ele. Este ambiente vai estar no estado preciso que foi definido ao construir a imagem. E como as imagens são somente leitura, ao executar um novo contêiner, você tem um novo ambiente perfeito, não importa o que você fez nos outros contêineres. Você pode executar tantos contêineres simultâneos quanto seu sistema puder controlar.</p>\n<p>Portanto, você executa contêineres a partir de imagens. Uma analogia que pode ser útil - se você trabalhar com programação orientada a objetos, como C ou <a href=\"/programador-fullstack-8-semanas\">JavaScript</a> - é que uma imagem é como uma classe, enquanto um contêiner seria uma instância dessa classe.</p>\n<h3>Fluxo de trabalho com docker</h3>\n<p>Como este é um artigo introdutório, não entrarei em detalhes completos agora, mas para que você tenha uma ideia de como é um fluxo de trabalho típico com o Docker, aqui estão as três etapas principais:</p>\n<ul>\n<li><strong>Construa uma imagem</strong> usando o Dockerfile, um arquivo de texto simples no qual você define as instruções para o que deseja agrupar na construção - como sistema operacional de base, bibliotecas, aplicativos, variáveis ​​de ambiente e arquivos locais. (Consulte a <a href=\"https://docs.docker.com/reference/builder/\" target=\"_blank\" rel=\"noopener\">referência</a> do <a href=\"https://docs.docker.com/reference/builder/\" target=\"_blank\" rel=\"noopener\">Dockerfile</a> para mais informações.);</li>\n<li><strong>Envie a imagem</strong> por meio do Docker Hub ou de seu repositório privado. Agora você pode distribuir facilmente esse aplicativo ou ambiente de desenvolvimento com o Docker - e, de fato, existem dezenas de imagens oficiais pré-construídas oferecidas por desenvolvedores de software, prontas para usar. (Explore o Docker Hub para mais informações.);</li>\n<li><strong>Execute um contêiner</strong> em uma máquina host. Tudo que você precisa é ter o Docker instalado para poder executar contêineres, implantar microsserviços (ou seja, iniciar diferentes contêineres executando diferentes serviços) e ter o ambiente de que você precisa para desenvolvimento ou implantação.</li>\n</ul>\n<p>Dica de artigo: <a href=\"/curso-programador-full-stack-em-8-semanas/\">Curso Programador Full Stack JavaScript</a></p>\n<h2>Próximo passo - docker</h2>\n<p>As possibilidades com containers de software são imensas e eles fornecem, em muitos casos, soluções definitivas para o que costumava ser problemas em aberto na área de desenvolvimento e operações (DevOps). Forneceremos aqui uma lista de recursos para ajudá-lo a começar a trabalhar com <strong>Docker</strong> e contêineres de software.</p>\n<p>Os requisitos para instalar o <strong>Docker</strong> são um pouco altos:</p>\n<ul>\n<li>Windows : sistema operacional de 64 bits, Windows 7 ou superior;</li>\n<li>Mac : OS X 10.8 “Mountain Lion” ou mais recente, com suporte de hardware da Intel para virtualização de unidade de gerenciamento de memória (MMU) e pelo menos 4 GB de RAM;</li>\n<li>Gnu/Linux : instalação de 64 bits (independentemente da distribuição e versão do Linux), com kernel 3.10 ou superior. (Kernels mais antigos não possuem alguns recursos necessários para executar contêineres Docker.)</li>\n</ul>\n<p>Como o Docker é uma tecnologia baseada em Linux, para Windows e Mac você primeiro precisa instalar o Docker Toolbox que configurará facilmente um ambiente Docker em seu computador, incluindo uma máquina virtual executando Linux e o Docker Engine. Para obter instruções sobre a instalação e configuração, você pode consultar os guias específicos do sistema operacional:</p>\n<ul>\n<li><a href=\"https://docs.docker.com/docker-for-windows/\" target=\"_blank\" rel=\"noopener\">Introdução ao Docker para Windows</a>.</li>\n<li><a href=\"https://docs.docker.com/docker-for-mac/\" target=\"_blank\" rel=\"noopener\">Introdução ao Docker para Mac</a>.</li>\n<li><a href=\"https://docs.docker.com/engine/installation/linux/\" target=\"_blank\" rel=\"noopener\">Para o Linux em diversas distros</a>.</li>\n</ul>\n<p>Depois de instalar o Docker, você pode seguir este passo a passo para executar e construir suas próprias imagens, criar um repositório no Docker Hub e muito mais:</p>\n<ul>\n<li><a href=\"https://docs.docker.com/engine/getstarted/\" target=\"_blank\" rel=\"noopener\">Comece a usar o Docker</a></li>\n</ul>\n<p>Esse tutorial do docker é muito legal para você dá seus primeiros passos no uso do docker</p>\n<h2>Conclusões</h2>\n<p>Por fim, lembre-se de que essa tecnologia consiste em muito mais do que uma ferramenta de comando para executar contêineres. O Docker é um ecossistema de produtos e serviços orientado para centralizar tudo o que você pode fazer com contêineres - da criação à distribuição, da execução em uma única máquina à orquestração em centenas ou até milhares de servidores. Vale muito a pena você dá uma chance aoo docker, por que o docker ele via lhe auxliar muito no seu desenvolvimento, o docker veio para fica e ele já é o presente e futuro do Devps, então está na hora de você aprender docker</p>\n<h3>Recomendações</h3>\n","date":"2020-08-26T00:00:00.000Z","readingTime":7,"title":"O que é Docker Um Guia básico Passo a Passo para Iniciantes","categories":["devops"],"tags":["docker","o-que-e-docker"],"description":"Para aquelas situações em que os contêineres brilham, você pode estar se perguntando como essa tecnologia é implementada na prática. Então, vamos ver como o Docker cumpre todas essas promessas.","imgArticle":"/thumbnail-article/o-que-e-docker-um-guia-para-iniciante.png","imgHome":"/thumbnail-home/o-que-e-docker-um-guia-para-iniciante.png"},"Navigation/0-0-12-0-0":{"expanded":false,"persistent":false},"Icon1/0-0-12-0-0-0-0-0-0-1-0":{"persistent":false}},"page":{"image":"/thumbnail-article/o-que-e-docker-um-guia-para-iniciante.png","status":200,"locale":"pt-BR","title":"O que é Docker Um Guia básico Passo a Passo para Iniciantes - [dev] TipsCode","description":"Para aquelas situações em que os contêineres brilham, você pode estar se perguntando como essa tecnologia é implementada na prática. Então, vamos ver como o Docker cumpre todas essas promessas."}}