{"instances":{"application":{"persistent":false},"FacebookPixel/0-0-0-0-0":{"persistent":false},"GoogleAnalytics/0-0-0-0-1":{"persistent":false},"Articles_Articles/0-0-4/artigos/2":{"persistent":false,"articles":[{"slug":"pessoas-largam-a-programacao-veja-8-motivos-que-levam-a-deixar","content":"<p><strong><em>Vou falar um pouco sobre como eu passei por cada um dos principais motivos pelo qual as pessoas largam a programação e trazer algumas alternativas para superar essas dificuldades.</em></strong></p>\n<p><strong><em>Você se sente perdido com tantas tecnologias ou sente que a montanha (dominar a programação) é muito alta e mal sinalizada para ser escalada? Então esse post é para você.</em></strong></p>\n<h3>1 – Me sinto sem direção com tantas informações e opiniões contraditórias</h3>\n<p>Um dos piores males da programação é se sentir perdido com o excesso de informação e não saber para qual lado ir que pode levar a uma <strong><em>pessoas largam a programação</em></strong>.</p>\n<p>Você já se deparou com artigos e conversas com os seguintes temas?</p>\n<ul>\n<li>Aprenda Rails porque ele é melhor do que Django.</li>\n<li>Aprenda Phoenix, é melhor que Rails.</li>\n<li>Django é melhor que Phoenux, aprenda ele.</li>\n<li>Angular é melhor que React (<a href=\"/react-vs-angular-qual-e-o-melhor/\">Aqui no blog tem um artigo só sobre esse assunto, clique aqui para ler</a>).</li>\n<li>Esqueça o Angular, aprenda VueJS.</li>\n<li>Esqueça o Rails, está acabando.</li>\n<li>Não tem mercado pra Django.</li>\n<li>Node é moda.</li>\n<li>E etc etc...</li>\n</ul>\n<p>Para quem está começando essas discussões são como veneno, porque geram uma grande confusão de por onde começar (se eu começar por x e estiver acabando eu vou perder tempo, mas se eu não começar por x e x não estiver acabando eu vou estar perdendo tempo)</p>\n<p>“A incerteza é pior que o sim ou o não”</p>\n<p>Como se livrar deste excesso de informações?</p>\n<p>Se esses papos tem te deixado confuso e com vontade de largar a programação eu tenho algo para te dizer: Tudo isso é balela.</p>\n<p>Se você está começando, busque conhecer um pouco de cada coisa (o suficiente para saber se vale ou não a pena), siga os desenvolvedores que estão gerando conhecimento de qualidade e valor e converse com pessoas mais experientes que você para saber qual caminho elas indicam (eu não sou o desenvolvedor mais experiente de todos, mas se precisar eu estou aqui).</p>\n<p>*Uma outra estratégia é observar o que está sendo pedido nas vagas de emprego com a faixa salarial que você deseja e depois ver se as tecnologias que estão lá te interessam.</p>\n<h3>2 - Não consigo me organizar para estudar</h3>\n<p>Programação não é um processo em que você estuda x coisas e pronto, o aprendizado é constante. Por tanto estudar muito é algo comum e que assusta quem está chegando e fazem as <strong><em>pessoas largam a programação</em></strong>, principalmente os iniciantes na área.</p>\n<p>Muitos desenvolvedores que eu conheci travaram nessa parte porque não tinha a disciplina e a paixão necessária para se dedicar ao aprendizado dessa bela arte chamada programação.</p>\n<p>Como melhorar sua organização? Primeiro você tem que se perguntar o seguinte: Eu não consigo me organizar para estudar ou eu não tenho interesse em estudar programação?</p>\n<p>Infelizmente ou felizmente aprender coisas complexas exige dedicação contínua e a maior parte das pessoas só conseguem essa dedicação quando estão apaixonadas pelo objeto de estudo (quando se está apaixonado o estudo parece diversão).</p>\n<p>Se você não se sente assim busque entender se é realmente isto que você quer fazer.</p>\n<p><a href=\"/ebook-gratuito-html\"><img src=\"/uploads/2020/09/ebook-guia-completo-html.png\" alt=\"\"></a></p>\n<p>Se você constatar que tem a paixão necessária se inscreva em algum <a href=\"/programador-fullstack-8-semanas\">curso</a> ou Bootcamp que realmente faça a diferença e te puxe para os estudos (estar em uma comunidade com conteúdo de qualidade é extremamente estimulante).</p>\n<p>Sinta-se convidado para fazer parte da comunidade TipsCode. Grupo do <a href=\"https://chat.whatsapp.com/Gd0TruowvdD7YgnZLyc9Pz\" target=\"_blank\" rel=\"noopener\">WhatsApp</a> ou <a href=\"https://web.facebook.com/groups/tipscode\" target=\"_blank\" rel=\"noopener\">Facebook</a>.</p>\n<p>“Disciplina é liberdade”, Renato Russo</p>\n<h3>3 - Sinto que minhas tarefas são muito repetitivas (falta uma causa maior)</h3>\n<p>Depois de algum tempo na profissão alguns devs começam a se sentirem angustiados por se verem em uma situação de fazer basicamente a mesma coisa todo dia (em empresas mais tradicionais isso é bem comum).</p>\n<p>Em geral os programadores por trabalharem em uma profissão que trata do futuro e da mudança sentem a necessidade de algo maior pelo qual se dedicar e quando tudo que se tem são códigos repetitivos todos os dias para um sistema administrativo qualquer, o desespero acontece.</p>\n<p>Como se livrar da repetição?</p>\n<p>Primeiro você precisa se fazer algumas perguntas, porque ás pessoas largam a programação?</p>\n<ol>\n<li>Eu estou preso na minha zona de conforto?</li>\n<li>Está na hora de aprender algo novo?</li>\n<li>Está na hora de mudar de emprego?</li>\n</ol>\n<p>Programação é algo lindo e capaz de antecipar o futuro e não deveria ser utilizada de maneira tão repetitiva (nós deveríamos programar algo pra fazer a repetição), então se você está se sentindo desestimulado por isso busque sair da zona de conforto aprendendo coisas novas, participando de hackatons, projetos Open Source e quem sabe até mudando de trabalho (indo para algum lugar que te desafie a criar coisas com propósito)</p>\n<p>“Tome as rédeas da sua vida, senão você vai passar a vida toda lamentando por não ter vivido a vida que queria”</p>\n<h3>4 - As exigências dos Jobs parecem distantes demais</h3>\n<p>Se você acessou aquela vaga de job e viu que eles queriam que o programador soubesse ruby, javascript, c#, cobol, tivesse PHD em engenharia aeroespacial e também fosse advogado formado em Harvard e se desesperou, eu tenho uma boa notícia para você: isso não é assim tão comum e nem sempre o que se pede lá é 100% necessário.</p>\n<p>Algumas empresas que não querem pagar o preço de mercado para um profissional pleno ou sênior anunciam a vaga com valor menor dizendo ser para juniors mas com exigências de sênior, quando se deparar com isso não se assuste, continue buscando que você encontrará empresas dispostas a pagar o valor justo.</p>\n<p>Como superar isto?<br>\nExistem vagas para diferentes níveis (e felizmente no mundo da programação elas são bem remuneradas), então não se desespere se você ainda não estiver preparado para uma vaga que exija muitas coisas.</p>\n<p>Caso você veja uma vaga que seria ideal para você mas que você não possui todos os conhecimentos, submeta mesmo assim e explique que você tem interesse e que com o tempo certo você pode se tornar o profissional perfeito para a vaga (por mais estranho que pareça as empresas também têm muita dificuldade de encontrar candidatos para as vagas e isso vai ajudar)</p>\n<p>Coragem! 🙂</p>\n<h3>5 - Não tem vagas perto de onde eu vivo</h3>\n<p>Se você não vive perto dos grandes centros terá mais dificuldades de encontrar bons jobs e isso vai te fazer querer largar a área.</p>\n<p>Como não desistir quando isso acontece?</p>\n<p>Para quem está longe das capitais (onde não exista bons jobs) existem dois bons caminhos para ter sucesso na área:</p>\n<ol>\n<li>Buscar um trabalho remoto: Trabalhos nessa categoria estão cada vez mais frequentes e abundantes, então você pode ganhar salário de capital e viver com os custos de interior (ou quem sabe salário de Londres e custos de Brasil);</li>\n<li>Se mudar para onde as vagas estão: Eu sei que nem todas as pessoas querem se mudar, mas no meu caso eu fiz isso no começo da minha carreira (eu era do interior de São Paulo e fui para São Paulo) e foi um grande impulso que me permitiu depois ter a experiência necessária para pegar bons trabalhos remotos.</li>\n</ol>\n<p>Bora?</p>\n<h3>6 - Não me sinto preparado para pegar um job</h3>\n<p>Essa é a principal preocupação dos alunos do Bootcamp Super Full Stack quando eles começam a imersão (felizmente ela passa rápido).</p>\n<p>Existe uma coisa que se chama síndrome do impostor, ela acontece quando um programador sente que as suas habilidades são inferiores às necessárias para a posição que assumiu ou que vai assumir (logo ele sente que será descoberto e constrangido).</p>\n<p>Você tem se sentido assim?</p>\n<p>Na hora de se inscrever para as vagas o programador sente que não está preparado (que será um impostor) e acaba por não se inscrever. Naturalmente por ele não se inscrever ele acaba ficando sem conseguir um job.</p>\n<p>Como largar o medo e conseguir um job?<br>\nEssa síndrome vai diminuir com o tempo mas ela ainda acompanha até os profissionais mais notáveis por toda a carreira (então não se sinta sozinho(a) 🙂 )</p>\n<p>Se você sente que realmente não está preparado(a) para pegar um Job grande busque um projeto freelancer para fazer (e até ofereça não cobrar caso não consiga entregar) isso vai aumentar muito a sua confiança.</p>\n<p>Depois que fizer alguns projetos nessa modalidade com sucesso você vai se sentir mais preparado(a) para pegar um grande Job (então mãos à obra).</p>\n<h3>7 - Não consigo acompanhar as atualizações</h3>\n<p><img src=\"/uploads/2020/09/pessoas-desistem-de-programar-1024x576.jpg\" alt=\"pessoas largam a programação\"></p>\n<p>Esse é um dos maiores motivos pelas quais as <strong><em>pessoas largam a programação</em></strong>. Parece que a cada dia saem milhões de atualizações nos frameworks e bibliotecas e isso gera um grande desespero em quem está começando a programar.</p>\n<p>No caso do Ruby On Rails nos últimos meses tivemos dezenas de novidades que ainda não foram completamente absorvidas pelos desenvolvedores e as atualizações continuam saindo.</p>\n<p>Como remover essa aflição do seu coração?<br>\nMas não se desespere meu caro(a) amigo(a), 99% das atualizações não vão afetar de maneira significativa a sua rotina de desenvolvimento. Basta você estar inserido(a) na comunidade.</p>\n<p>Naturalmente você vai perceber quais são as atualizações importantes que você deve se atentar e adotar.</p>\n<p>Buscar blogs (como este que você está agora) e canais no youtube pode te ajudar a receber as novidades de maneira mais fácil e compilada (sem o que não importa).</p>\n<p>Um dos meus compromissos aqui no OneBitCode é esse, estudar tudo que for possível, simplificar e disponibilizar para você (para economizar seu tempo).</p>\n<h3>8 - Eu travo muito em alguns Bugs e perco muito tempo</h3>\n<p>Muitos desenvolvedores que eu convivo se sentem frustrados com a profissão porque no dia a dia se deparam com Bugs que levam horas para serem resolvidos.</p>\n<p>Isso isoladamente talvez não seja um motivo para largar a carreira, mas com certeza essa frustração ajuda muito a agravar outros problemas.</p>\n<p>Você se sente desestimulado a criar algo porque sabe que vai perder horas com os Bugs?</p>\n<p>“Programação é ir de Bug em Bug até chegar a uma versão estável do código”</p>\n<p>Como diminuir essa frustração?</p>\n<p>Certamente é desagradável esse processo de ficar correndo atrás de Bugs, mas a minha experiência me mostrou que a maior parte dos Bugs não são resolvidos pelos seguintes motivos:</p>\n<ol>\n<li>O desenvolvedor não leu o Log de erro;</li>\n<li>O Programador não usou técnica de Debug (eu ensino a usá-las aqui);</li>\n<li>O iniciante não sabe pesquisar no Google o seu erro.</li>\n</ol>\n<p>Você tem cometido algum desses erros?</p>\n<p>Se mesmo fazendo tudo isso certo você não resolver esse problema peça ajuda na sua comunidade ou caso seja algo mais complexo contrate uma mentoria de um desenvolvedor mais experiente.</p>\n<p>“A cada Bug que ocorre com você, é um Bug a mais que você sabe resolver”</p>\n<h2>Conclusão</h2>\n<p>Você não está sozinho nessas dúvidas e com certeza conseguirá superar esses pequenos desafios que ser um programador que faz a diferença trazem.</p>\n<p>O importante é você identificar um caminho que faça sentido para você, manter o trabalho duro, a participação na comunidade e continuar se desafiando todos os dias.</p>\n<p>No <a href=\"https://www.onebitcode.com\" target=\"_blank\" rel=\"noopener\">OneBitCode</a> nós temos uma imersão no mundo da programação que dura 6 meses, nessa imersão nós desenvolvemos dentro de uma comunidade com mais de 150 programados 10 APPs do zero (onde nós resolvemos grande parte desses 8 problemas).</p>\n<p>As inscrições não estão abertas nesse momento, mas você pode pedir para ser avisado assim que abrirmos uma turma nesse link: <a href=\"http://super.onebitcode.com/bootcamp\" target=\"_blank\" rel=\"noopener\">Me notifique sobre a próxima turma</a></p>\n<p>Também há algum tempo eu escrevi um guia para quem está começando no mundo do Ruby On Rails, caso esse seja o seu caso acesse aqui: <a href=\"https://onebitcode.com/guia-para-iniciar-no-mundo-do-ruby-on-rails/\" target=\"_blank\" rel=\"noopener\">Guia para iniciar no mundo do Ruby On Rails</a></p>\n<p>Compartilhe esse artigo e ajude outros desenvolvedores como você a superarem esses medos que travam o desenvolvimento na profissão.</p>\n<p>Pessoas largam a programação, como qualquer outras profissão, mas lembre-se que o sucesso é daqueles que não desistem.</p>\n<p>Obrigado por estar aqui,<br>\nGrande abraço,<br>\nEsse artigo foi escrito por <a href=\"https://onebitcode.com/\" target=\"_blank\" rel=\"noopener\">Leonardo Scorza da escola OneBitCode</a></p>\n<h3>Recomendação</h3>\n","date":"2020-09-16T00:00:00.000Z","readingTime":9,"title":"Pessoas largam a programação? Veja 8 Motivos que levam a deixar","categories":["programacao"],"description":"Vou falar um pouco sobre como eu passei por cada um dos principais motivos pelo qual as pessoas largam a programação e trazer algumas alternativas para superar essas dificuldades.","imgArticle":"/thumbnail-article/pessoas-largam-a-programacao.png","imgHome":"/thumbnail-home/pessoas-largam-a-programacao.png"},{"slug":"como-construir-uma-api-restful-conheca-as-13-melhores-boas-praticas","content":"<p><em>****Como construir uma API RESTful<strong>,</strong> <strong>neste artigo você vai descobrir quais são ás 13 melhores práticas para criar uma API RESTFull. Facebook, GitHub, Google e muitas outras gigantes precisam de uma forma de servir e consumir dados. A API RESTful ainda é uma das melhores opções atualmente no cenário de desenvolvimento para servir e consumir dados.</strong></em></p>\n<p>Você já pensou em aprender sobre os padrões de como construir uma API RESTful, portando saiba quais são as práticas recomendadas para projetar uma API RESTful? Em teoria, qualquer pessoa pode ativar rapidamente uma API de dados em menos de cinco minutos, usando <a href=\"/conhecendo-nodejs/\">Node.js</a>, Ruby, Java ou Python.</p>\n<p>Em resumo, exploraremos 13 <strong>práticas recomendadas</strong> de como construir uma API RESTful, mas, primeiramente, vamos esclarecer uma questão.</p>\n<h2>O que é uma API RESTful?</h2>\n<p>Rest API é o conjunto de boas práticas utilizadas nas requisições HTTP realizadas por uma API em uma aplicação web. Todavia, entenda como funciona essa tecnologia, quais os tipos de APIs existentes e sua importância em um site.</p>\n<p>Uma API RESTful precisa atender às seguintes restrições para ser chamada de API RESTful.</p>\n<p>1 . <strong>Cliente-servidor</strong>: uma API RESTful segue o modelo cliente-servidor em que o servidor fornece dados e os clientes se conectam ao servidor para consumir dados. Assim, a interação entre cliente e servidor ocorre por meio de solicitações HTTP (S) que transferem os dados solicitados.</p>\n<p>2 . <strong>Sem estado</strong>: mais importante, uma API RESTful deve ser sem estado. Dessa forma, cada solicitação é tratada como uma solicitação independente. O servidor não deve controlar nenhum estado interno que possa influenciar o resultado de solicitações futuras.</p>\n<p><a href=\"/ebook-gratuito-html\"><img src=\"/uploads/2020/09/ebook-guia-completo-html.png\" alt=\"Como Construir uma API RESTful\"></a></p>\n<p>3 . <strong>Interface uniforme:</strong> Por último, a uniformidade define como o cliente e o servidor interagem. Em conclusão, ás APIs RESTful definem as melhores práticas para nomear recursos, porque as operações HTTP fixas permitem modificar e interagir com os recursos, portanto, ás seguintes operações HTTP por exemplo quando eu faço uma requisição <strong>GET</strong> é porque quero recuperar um recurso.</p>\n<p><strong>Solicitação POST</strong>: cria um recurso ou envie informações para a API</p>\n<p><strong>Chamada PUT</strong>: cria ou substitua um recurso</p>\n<p><strong>Solicitação PATCH</strong>: atualiza um recurso existente</p>\n<p><strong>Pedido DELETE</strong>: elimina um recurso</p>\n<p>Com entendimento mais profundo das características da interface de programação de aplicativos, então é hora de aprender mais sobre as práticas recomendadas para construí uma API RESTfull.</p>\n<h2>Práticas recomendadas de como construir uma API RESTful</h2>\n<p>Vou apresentar ás 13 práticas uma a uma e explorar um pouco cada uma delas.</p>\n<h3>1. Use métodos HTTP corretamente</h3>\n<p>Já discutimos os possíveis métodos HTTP que você pode usar para modificar recursos: GET, POST, PUT, PATCH e DELETE.</p>\n<p>Percebo, constantemente que alguns desenvolvedores tendem a abusar de GET e POST, ou PUT e PATCH. Por exemplo, vejo alguns desenvolvedores usarem uma solicitação POST para recuperar dados.</p>\n<p>No entanto, vejo alguns desenvolvedores usarem frequentemente uma solicitação PUT, sobretudo, substitui o recurso, embora os mesmos prefiram utilizar apenas um único campo para esse recurso.</p>\n<p>Em primeiro lugar, certifique-se de usar o método HTTP correto, porém, criará muita confusão para os desenvolvedores que usam sua API RESTful. É melhor seguir as diretrizes pretendidas.</p>\n<h3>2. Convenções de nomenclatura</h3>\n<p><img src=\"/uploads/2020/09/o-que-e-API-RESTful.jpg\" alt=\"Como Construir uma API RESTful\"></p>\n<p>Em principio, entender as convenções de nomenclatura da API RESTful o ajudará muito a projetar sua API de maneira organizada. Portanto, projete uma API RESTful de acordo com os recursos que você já atende.</p>\n<p>Em resumo, sua API gerencia autores e livros. Dessa forma, queremos adicionar um novo autor ou acessar um autor com ID <code>3</code>. Você pode projetar as seguintes rotas para atender a esse propósito:</p>\n<ul>\n<li><strong>api.com/addNewAuthor</strong></li>\n<li><strong>api.com/getAuthorByID/3</strong></li>\n</ul>\n<p>Imagine uma API que hospeda muitos recursos, cada um com muitas propriedades. Assim sendo, a lista de endpoint possíveis se tornará interminável e não muito amigável. Portanto, precisamos de uma maneira mais organizada e padronizada de projetar endpoint da API.</p>\n<p>Dessa forma, as melhores práticas da API RESTful descrevem que um endpoint deve começar com o nome do recurso, enquanto a operação HTTP descreve a ação. Exemplo:</p>\n<ul>\n<li>POST api.com/authors</li>\n<li>GET api.com/authors/3</li>\n</ul>\n<p>E se quisermos acessar todos os livros que o autor com ID <code>3</code> já escreveu? Também neste caso, as APIs RESTful têm uma solução:</p>\n<ul>\n<li>GET api.com/authors/3/books</li>\n</ul>\n<p>Por último, e se você quiser excluir um livro com ID <code>5</code> de um autor com ID <code>3</code>. Novamente, vamos seguir a mesma abordagem estruturada para formar o seguinte endpoint:</p>\n<ul>\n<li>DELETE api.com/authors/3/books/5</li>\n</ul>\n<p>Resumindo, use as operações HTTP e a forma estruturada de mapeamento de recursos para formar um caminho de endpoint legível e compreensível. Dessa maneira, a grande vantagem dessa abordagem é que todo desenvolvedor entende como as APIs RESTful são projetadas, assim também, podem usar a API imediatamente sem ter que ler a documentação em cada endpoint.</p>\n<h3>3. Use recursos plurais</h3>\n<p>Os recursos devem sempre usar sua forma no plural. Dessa forma, imagine que você deseja recuperar todos os autores. Portanto, você chamaria o seguinte endpoint: <code>GET api.com/authors</code>.</p>\n<p>Contudo, ao ler a solicitação, não é possível saber se a resposta da API conterá apenas um ou todos os autores. Dessa maneira, os endpoints da API devem usar vários recursos.</p>\n<h3>4. Uso correto de códigos de status como construir uma API RESTfull</h3>\n<p>Os códigos de status não estão aqui apenas para diversão. Eles têm um propósito claro. Um código de status notifica o cliente sobre o sucesso de sua solicitação.</p>\n<p>As categorias de código de status mais comuns incluem:</p>\n<ul>\n<li><strong>200 (OK)</strong>: A solicitação foi tratada e concluída com êxito.</li>\n<li><strong>201 (criado)</strong>: indica a criação bem-sucedida de um recurso.</li>\n<li><strong>400 (Solicitação inválida)</strong>: representa um erro do lado do cliente, porque a solicitação foi malformada ou faltam parâmetros de solicitação.</li>\n<li>401 (não autorizado): você tentou acessar um recurso para o qual não tem permissão.</li>\n<li>404 (não encontrado): o recurso solicitado não existe.</li>\n<li>500 (Erro interno do servidor): Sempre que o servidor levanta uma exceção durante a execução da solicitação.</li>\n</ul>\n<p>Uma lista completa de códigos de status pode ser encontrada em <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Status\" target=\"_blank\" rel=\"noopener\">Mozilla Developers</a> .</p>\n<h3>5. Siga as convenções de casing</h3>\n<p>Mais comumente, uma API RESTful fornece dados JSON, portanto, a convenção de embalagem camelCase deve ser praticada. No entanto, diferentes linguagens de programação usam diferentes convenções de nomenclatura .</p>\n<h3>6. Como lidar com a pesquisa, paginação, filtragem e classificação</h3>\n<p>Ações como pesquisa, paginação, filtragem e classificação não representam pontos de extremidade separados. Essas ações podem ser realizadas por meio do uso de parâmetros de consulta fornecidos com a solicitação da API.</p>\n<p>Por exemplo, vamos recuperar todos os autores classificados por nome em ordem crescente. Seu pedido API deve olhar como este: <strong><code>api.com/authors?sort=name_asc</code>.</strong></p>\n<p>Além disso, desejo recuperar um autor com o nome 'Alisson'. O pedido é assim <code>api.com/authors?search=Alisson</code>.</p>\n<p>Felizmente, muitos projetos de API vêm com recursos integrados de pesquisa, paginação, filtragem e classificação. Da mesma forma vai economizar muito tempo.</p>\n<h3>7. Controle de versão de API</h3>\n<p>Não vejo isso com muita frequência, porque é uma prática recomendada criar uma versão de sua API. É uma maneira eficaz de comunicar as mudanças importantes aos usuários.</p>\n<p>Freqüentemente, o número da versão da API é incorporada na URL API, como este: <code>api.com/v1/authors/3/books</code>.</p>\n<h3>8. Envie metadados por meio de cabeçalhos HTTP</h3>\n<p>Os cabeçalhos HTTP permitem que um cliente envie informações adicionais com sua solicitação. Por exemplo, o <code>Authorization</code>cabeçalho é comumente usado para enviar dados de autenticação para acessar a API.</p>\n<p>Uma lista completa de todos os cabeçalhos HTTP possíveis pode ser encontrada <a href=\"https://en.wikipedia.org/wiki/List_of_HTTP_header_fields\" target=\"_blank\" rel=\"noopener\">aqui</a> .</p>\n<h3>9. Limitação de taxa</h3>\n<p>A limitação de taxa é uma abordagem interessante para controlar o número de solicitações por cliente. Estes são os possíveis cabeçalhos de limitação de taxa que seu servidor pode retornar:</p>\n<ul>\n<li><strong>X-Rate-Limit-Limit</strong>: Informa o número de solicitações que um cliente pode enviar em um intervalo de tempo especificado.</li>\n<li><strong>X-Rate-Limit-Remaining</strong>: Informa quantas solicitações o cliente ainda pode enviar no intervalo de tempo atual.</li>\n<li><strong>X-Rate-Limit-Reset</strong>: Informa ao cliente quando o limite de taxa será redefinido.</li>\n</ul>\n<h3>10. Tratamento significativo de erros</h3>\n<p>Caso algo dê errado, é importante fornecer uma mensagem de erro significativa ao desenvolvedor. Da mesma forma, a API Twilio retorna o seguinte formato de erro:</p>\n<pre><code><span class=\"token punctuation\">{</span>\n    <span class=\"token string-property property\">\"status\"</span><span class=\"token operator\">:</span> <span class=\"token number\">400</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string-property property\">\"message\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"O recurso não existe!\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string-property property\">\"code\"</span><span class=\"token operator\">:</span> <span class=\"token number\">24801</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string-property property\">\"more_info\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"api.com/docs/errors/24801\"</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>Neste exemplo, o servidor retorna o código de status e uma mensagem legível. Além disso, um código de erro interno também é retornado para o desenvolvedor pesquisar o erro específico. Isso permite que o desenvolvedor procure rapidamente mais informações sobre o erro.</p>\n<h3>11. Escolha a estrutura de API certa</h3>\n<p>Existem muitos frameworks para diferentes linguagens de programação. É importante escolher uma framework que ofereça suporte às práticas recomendadas da API RESTful.</p>\n<p>Para Node.js, os desenvolvedores de back-end adoram usar <a href=\"https://expressjs.com/\" target=\"_blank\" rel=\"noopener\">Express.js</a>, caso queira <a href=\"/programador-fullstack-8-semanas\">aprender mais sobre NodeJS com Express clique aqui</a>, enquanto para Python, <a href=\"https://falconframework.org/\" target=\"_blank\" rel=\"noopener\">Falcon</a> é uma ótima opção.</p>\n<h3>12. Documente sua API</h3>\n<p>Por último, escreva a documentação! Mas ainda é uma das maneiras mais fáceis de transferir conhecimento sobre sua API recém-desenvolvida.</p>\n<p>Embora sua API siga todas as práticas recomendadas de <strong>como construir uma APIs RESTful</strong>, acima de tudo, o mais importante é documentar vários elementos, como os recursos que sua API manipula ou quais limites de taxa se aplicam ao seu servidor.</p>\n<p>Pense em seus colegas desenvolvedores. A documentação reduz drasticamente o tempo necessário para aprender sobre sua API.</p>\n<h3>13. Mantenha a simplicidade!</h3>\n<p>Não complique sua API e mantenha os recursos simples. Uma definição adequada dos diferentes recursos que sua API manipula o ajudará a evitar problemas relacionados a recursos no futuro.</p>\n<p>Defina seus recursos, porque também defina com precisão suas propriedades e as relações entre os recursos. Por exemplo, não há espaço para disputas sobre como conectar os diferentes recursos.</p>\n<h2>Conclusão</h2>\n<p>Espero que você tenha gostado deste artigo, tentei explorar as melhores práticas utilizadas e testadas no mercado de desenvolvimento web, caso tenha gostado, deixa seu like, compartilhar com seu colegas que está com dificuldade nessas questões abordadas no artigo, deixa seu comentário caso você tenha alguma dica a mais para complementar o artigo. Fica com Deus forte abraço.</p>\n<h3>Recomendação</h3>\n","date":"2020-09-13T00:00:00.000Z","readingTime":8,"title":"Como Construir uma API RESTful: Conheça Ás 13 Melhores Boas Praticas","categories":["nodejs"],"tags":["api","boas-praticas","como-construir-uma-api-restful","nodejs","o-que-e-api-restfull"],"description":"Como construir uma API RESTful, neste artigo você vai descobrir quais são ás 13 melhores práticas para criar uma API RESTFull. Facebook, GitHub, Google e muitas outras gigantes precisam de uma forma de servir e consumir dados. A API RESTful ainda é uma das melhores opções atualmente no cenário de desenvolvimento para servir e consumir dados.","imgArticle":"/thumbnail-article/como-construir-uma-api-restful.png","imgHome":"/thumbnail-home/como-construir-uma-api-restful.png"},{"slug":"event-loop-em-node-guia-completo","content":"<p>A assincronia em qualquer linguagem de programação é difícil e o <strong>event loop</strong> vem pra resolver isso. Conceitos como simultaneidade, paralelismo e deadlocks fazem tremer até os engenheiros mais experientes. O código executado de forma assíncrona é imprevisível e difícil de rastrear quando há bugs. O problema é inevitável porque a computação moderna possui vários núcleos. Há um limite térmico em cada núcleo da CPU, e nada está ficando mais rápido. Isso pressiona o desenvolvedor a escrever um código eficiente que aproveite as vantagens do hardware.</p>\n<p>JavaScript é de thread única, mas isso limita o Node de utilizar arquitetura moderna? Um dos maiores desafios é lidar com várias threads por causa de sua complexidade inerente. Criar novas threads e gerenciar a troca de contexto entre elas é caro. Tanto o sistema operacional quanto o programador devem trabalhar muito para fornecer uma solução. Neste artigo, mostrarei como o Node lida com <strong>event loop</strong>. Explorarei cada parte do event loop do Node.js e demonstrarei como ele funciona. Um dos recursos melhores recursos do Node é o event loop, porque ele resolveu um problema difícil de uma maneira inovadora</p>\n<h2>Event Loop</h2>\n<p>O <strong>event loop</strong> é um loop simultâneo de thread única, sem bloqueio e de forma assíncrona. Imagine uma solicitação web que faz uma pesquisa no banco de dados. Uma única <strong>thread</strong> só pode fazer uma coisa de cada vez. Em vez de aguardar a resposta do banco de dados, ele continua a selecionar outras tarefas na fila. No <strong>event loop</strong>, o loop principal desenrola a pilha de chamadas e não espera os retornos de chamada. Como o loop não bloqueia, é tranquilo fazer mais de uma solicitação web por vez. Várias solicitações podem ser enfileiradas ao mesmo tempo, o que as torna simultâneas. O event loop não espera que uma solicitação seja concluído, mas pega retornos de chamada conforme eles vêm, sem bloqueio.</p>\n<p>O <strong>event loop</strong> em si é semi-infinito, o que significa que se a pilha de chamadas ou a fila de retorno de chamada estiverem vazias, ele pode sair do loop. Pense na pilha de chamadas como um código síncrono que se desenrola, como console.log, antes que o loop busque mais trabalho. O Node usa <strong>libuv</strong> por baixo dos panos para pesquisar no sistema operacional em busca de retornos de chamada de conexões de entrada.</p>\n<p>Você pode estar se perguntando, por que o event loop é executado em uma única thread? <strong>Threads</strong> são relativamente pesados ​​na memória para os dados de que necessita por conexão. Threads são recursos do sistema operacional que aumentam e isso não é escalonável para milhares de conexões ativas.</p>\n<p>Vários tópicos em geral também complicam a história. Se um retorno de chamada retornar com dados, ele deve empacotar o contexto de volta para a thread que está em execução. A troca de contexto entre threads é lenta, porque deve sincronizar o estado atual, como a pilha de chamadas ou variáveis ​​locais. O event loop elimina os bugs quando várias threads compartilham recursos, porque é thread única. Um loop de thread única corta casos extremos de segurança de thread e pode mudar de contexto muito mais rápido. Este é o verdadeiro lance por trás do event loop. Ele faz uso efetivo de conexões e threads enquanto permanece escalável.</p>\n<h2>Loop Semi-infinito</h2>\n<p>A maior pergunta que o event loop deve responder é se o loop está ativo. Em caso afirmativo, ele descobre quanto tempo deve esperar na fila de retorno de chamada. A cada iteração, o loop desenrola a pilha de chamadas e, em seguida, pesquisa.</p>\n<p>Aqui está um exemplo que bloqueia o loop principal:</p>\n<pre><code><span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>\n  <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Oi a fila de retorno'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token number\">5000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Mantenha o loop ativo por x tempo</span>\n\n<span class=\"token keyword\">const</span> stopTime <span class=\"token operator\">=</span> Date<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">2000</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>Date<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> stopTime<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token comment\">// Bloqueie o loop principal</span>\n</code></pre>\n<p>Se você executar este código, observe que o loop fica bloqueado por dois segundos. Mas o loop permanece ativo até que o retorno de chamada seja executado em cinco segundos. Depois que o loop principal é desbloqueado, o mecanismo de pesquisa descobre quanto tempo ele espera nos retornos de chamada. Esse loop termina quando a pilha de chamadas é desfeita e não há mais retornos de chamada restantes.</p>\n<h2>A fila de retorno de chamada</h2>\n<p>Agora, o que acontece quando eu bloqueio o loop principal e agendo um retorno de chamada? Uma vez que o loop é bloqueado, ele não coloca mais callbacks na fila:</p>\n<pre><code><span class=\"token keyword\">const</span> stopTime <span class=\"token operator\">=</span> Date<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">2000</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>Date<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> stopTime<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token comment\">// Bloqueie o loop principal</span>\n\n<span class=\"token comment\">// Isso leva 7 segundos para ser executado</span>\n<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Executou callback A'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>Desta vez, o loop permanece ativo por sete segundos. O event loop é burro em sua simplicidade. Ele não tem como saber o que pode ser colocado na fila no futuro. Em um sistema real, os retornos de chamada de entrada são enfileirados e executados, pois o loop principal está livre para pesquisar. O event loop passa por várias fases <em>sequencialmente</em> quando é desbloqueado. Portanto, para vencer aquela entrevista de emprego sobre o loop, evite jargões sofisticados como “emissor de evento” ou “padrão de reator”. É um humilde loop de thread único, simultâneo e não bloqueador, não precisa querer complica, lembre-se o simples é poderoso.</p>\n<h2>O Event Loop assíncrono / espera</h2>\n<p>Para evitar o bloqueio do loop principal, uma ideia é envolver a E / S síncrona em torno do recurso async / await. Caso esteja procurando um bom curso / treinamento de NodeJS te <a href=\"/programador-fullstack-8-semanas\">recomendo esse aqui</a>.</p>\n<pre><code><span class=\"token keyword\">const</span> fs <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fs'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">readFileSync</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">path</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">await</span> fs<span class=\"token punctuation\">.</span><span class=\"token function\">readFileSync</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">readFileSync</span><span class=\"token punctuation\">(</span><span class=\"token string\">'readme.md'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'O event loop continua sem bloqueio...'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>Tudo o que vier depois de <strong>await</strong> vem da fila de retorno de chamada. O código é lido como um código de bloqueio síncrono, mas não bloqueia. Note que async / <a href=\"https://youtu.be/IR9azXeWs2s\" target=\"_blank\" rel=\"noopener\">readFileSync</a> await o torna possível, o que o tira do loop principal. Pense em tudo o que vem depois await como não-bloqueador por meio de um retorno de chamada.</p>\n<p>O código acima é apenas para fins de demonstração. Em código real, eu recomendo <a href=\"https://youtu.be/IR9azXeWs2s\" target=\"_blank\" rel=\"noopener\">fs.readFile</a>, que dispara um retorno de chamada que pode envolver uma <a href=\"https://youtu.be/fRa33RSJpSo\" target=\"_blank\" rel=\"noopener\">promise</a>. A intenção geral ainda é válida, porque isso tira o bloqueio de E / S do loop principal.</p>\n<h2>Mais detalhes sobre</h2>\n<p>E se eu dissesse que o <strong>event loop</strong> tem mais do que uma pilha de chamada e mais uma fila de retorno de chamada? E se o <strong>event loop</strong> não fosse apenas um loop, mas muitos?</p>\n<p>Agora, quero levá-lo para trás da fachada e para visualiza com mais detalhes os componentes internos do <a href=\"/conhecendo-nodejs/\">NodeJS</a></p>\n<h2>Fases do Event Loop</h2>\n<p>Estas são as fases do <strong>Event Loop</strong>:</p>\n<p><img src=\"/uploads/2020/09/event-loop.png\" alt=\"event loop\n\"></p>\n<p>Estrutura event loop</p>\n<p>1 . Ás datas / hora são atualizadas. O <strong>Event loop</strong> armazena em cache a hora atual no início do loop para evitar chamadas de sistema frequentes relacionadas ao tempo. Essas chamadas de sistema são internas à <strong>libuv</strong>.</p>\n<p>2 . O loop está vivo? Se o loop tiver identificadores ativos, solicitações ativas ou identificadores de fechamento, ele está vivo. Conforme mostrado, retornos de chamada pendentes na fila mantêm o loop ativo.</p>\n<p>3 . Os cronômetros de vencimento são executados. Este é o lugar onde o <strong>setTimeout</strong>() ou <strong>setInterval</strong>() retornos de chamada executada. O loop verifica o cache se tem <strong>callbacks</strong> ativos que expiraram em execução.</p>\n<p>4 . Retornos de chamada pendentes na fila são executados. Se a iteração anterior adiou quaisquer retornos de chamada, eles serão executados neste ponto. O <strong>polling</strong> normalmente executa <strong>callbacks</strong> de E / S imediatamente, mas há exceções. Esta etapa lida com quaisquer retardatários da iteração anterior.</p>\n<p>5 . Manipuladores ociosos são executados - principalmente a partir de nomenclatura inadequada, porque eles são executados a cada iteração e são internos ao libuv.</p>\n<p>6 . Prepare identificadores para <strong>setImmediate()</strong> execução de retorno de chamada na iteração do loop. Esses identificadores são executados antes dos blocos do loop para E / S e preparam a fila para esse tipo de retorno de chamada.</p>\n<p>7 . Calcule o tempo limite da votação. O loop deve saber quanto tempo ele bloqueia para E / S. É assim que ele calcula o tempo limite:</p>\n<ul>\n<li>Se o loop estiver prestes a sair, o tempo limite é 0;</li>\n<li>Se não houver identificadores ou solicitações ativas, o tempo limite será 0;</li>\n<li>Se houver algum identificador inativo, o tempo limite é 0;</li>\n<li>Se houver algum identificador pendente na fila, o tempo limite será 0;</li>\n<li>Se houver alguma fechamento, o tempo limite é 0;</li>\n<li>Se nenhuma das opções acima, o tempo limite é definido para o temporizador mais próximo ou, se não houver temporizadores ativos, infinito.</li>\n</ul>\n<p>8 . O loop bloqueia para E / S com a duração da fase anterior. Os retornos de chamada relacionados a E / S na fila são executados neste ponto.</p>\n<p>9 . Verifique a execução de callbacks do identificador. Esta fase é onde <strong>setImmediate()</strong> funciona e é a contrapartida para preparar. Quaisquer <strong>setImmediate()</strong> retornos de chamada enfileirados no meio da execução de retorno de chamada de E / S são executados aqui.</p>\n<p>10 . Fechar callbacks são executados. Esses são identificadores ativos descartados de conexões fechadas.</p>\n<p>11 . A iteração termina.</p>\n<p>Você deve estar se perguntando por que a pesquisa bloqueia E / S quando deveria ser sem bloqueio? O loop bloqueia apenas quando não há retornos de chamada pendentes na fila e a pilha de chamadas está vazia. No Node, o temporizador mais próximo pode ser definido por <strong>setTimeout</strong>, por exemplo. Se definido como infinito, o loop espera nas conexões de entrada com mais trabalho. É um loop semi-infinito, porque a pesquisa mantém o loop ativo quando não há mais nada a fazer e há uma conexão ativa.</p>\n<p>Aqui está a versão Unix deste cálculo de tempo limite é toda a sua glória C:</p>\n<pre><code>int <span class=\"token function\">uv_backend_timeout</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token keyword\">const</span> uv_loop_t<span class=\"token operator\">*</span> loop</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>loop<span class=\"token operator\">-</span><span class=\"token operator\">></span>stop_flag <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">uv__has_active_handles</span><span class=\"token punctuation\">(</span>loop<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span><span class=\"token function\">uv__has_active_reqs</span><span class=\"token punctuation\">(</span>loop<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token constant\">QUEUE_EMPTY</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>loop<span class=\"token operator\">-</span><span class=\"token operator\">></span>idle_handles<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token constant\">QUEUE_EMPTY</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>loop<span class=\"token operator\">-</span><span class=\"token operator\">></span>pending_queue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>loop<span class=\"token operator\">-</span><span class=\"token operator\">></span>closing_handles<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token function\">uv__next_timeout</span><span class=\"token punctuation\">(</span>loop<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>Você pode não estar muito familiarizado com C, mas parece inglês e faz exatamente o que está na fase sete.</p>\n<h2>Uma demonstração fase a fase</h2>\n<p>Para mostrar cada fase em JavaScript simples:</p>\n<pre><code><span class=\"token comment\">// 1. Loop começa, o timestamps é atualizados</span>\n<span class=\"token keyword\">const</span> http <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 2. O loop permanece vivo se houver código na pilha de chamadas para desenrolar</span>\n<span class=\"token comment\">// 8. Pesquisar E / S e executar este retorno de chamada de conexões de entrada</span>\n<span class=\"token keyword\">const</span> server <span class=\"token operator\">=</span> http<span class=\"token punctuation\">.</span><span class=\"token function\">createServer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// O retorno de chamada de E / S da rede é executado imediatamente após a pesquisa</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Mantenha o loop ativo se houver uma conexão aberta</span>\n<span class=\"token comment\">// 7. Se não houver mais nada a fazer, calcule o tempo limite</span>\nserver<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">3000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> options <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Evite uma consulta DNS para ficar fora do pool de threads</span>\n  <span class=\"token literal-property property\">hostname</span><span class=\"token operator\">:</span> <span class=\"token string\">'192.0.2.1'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">port</span><span class=\"token operator\">:</span> <span class=\"token number\">3000</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">sendHttpRequest</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Callbacks de E / S de rede executados na fase 8</span>\n  <span class=\"token comment\">// Callbacks de E / S de arquivo executados na fase 4</span>\n  <span class=\"token keyword\">const</span> req <span class=\"token operator\">=</span> http<span class=\"token punctuation\">.</span><span class=\"token function\">request</span><span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Resposta recebida do servidor'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 9. Executar verificação de retorno de chamada</span>\n    <span class=\"token function\">setImmediate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n      <span class=\"token comment\">// 10. Feche a execução da callback</span>\n       server<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n        <span class=\"token comment\">// O fim. ALERTA DE SPOILER! O Loop morre no final.</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Fechando servidor'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  req<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 3. O cronômetro é executado em 8 segundos, enquanto o loop permanece ativo</span>\n<span class=\"token comment\">// O tempo limite calculado antes da votação o mantém ativo</span>\n<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">sendHttpRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 11. Fim da iteração..</span>\n</code></pre>\n<p>Como os callbacks de E / S de arquivo são executados na fase quatro e antes da fase nove, espere <strong>setImmediate()</strong> disparar primeiro:</p>\n<pre><code>fs<span class=\"token punctuation\">.</span><span class=\"token function\">readFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">'leiame.md'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Arquivo I/O callback via setTimeout()'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// Este retorno de chamada é executado primeiro</span>\n  <span class=\"token function\">setImmediate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Arquivo I/O callback via setImmediate()'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>A E / S de rede sem uma pesquisa de DNS é menos cara do que a E / S de arquivo, porque é executada no <strong>event loop</strong> principal. Em vez disso, a E / S do arquivo é enfileirada por meio do pool de threads. Uma pesquisa de DNS também usa o pool de threads, então isso torna a E / S de rede tão cara quanto a E / S de arquivo.</p>\n<h2>Pool de Thread - Event loop</h2>\n<p>Os componentes internos do nó têm duas partes principais: o mecanismo JavaScript V8 e o libuv. E / S de arquivo, pesquisa de DNS e E / S de rede acontecem via libuv.</p>\n<p>Esta é a arquitetura geral:</p>\n<p><img src=\"/uploads/2020/09/libuv.png\" alt=\"\"></p>\n<p>Fonte da imagem: documentação do <a href=\"https://github.com/libuv/libuv\" target=\"_blank\" rel=\"noopener\">libuv</a></p>\n<p>Para E / S de rede, o <strong>event loop</strong> pesquisa dentro do encadeamento principal. A thread não é segura para threads porque não muda de contexto com outro thread. A E / S de arquivo e a pesquisa de DNS são específicas da plataforma, portanto, a abordagem é executá-los em um pool de threads. Uma ideia é fazer a pesquisa de DNS você mesmo para ficar fora do pool de threads, conforme mostrado no código acima. Colocar um endereço IP versus localhost, por exemplo, tira a pesquisa do pool. O pool de threads tem um número limitado de threads disponíveis, que pode ser definido por UV_THREADPOOL_SIZEmeio da variável de ambiente. O tamanho do pool de threads padrão é cerca de quatro.</p>\n<p>O V8 é executado em um loop separado, esvazia a pilha de chamadas e devolve o controle ao event loop. O V8 pode usar vários encadeamentos para coleta de lixo fora de seu próprio loop. Pense no V8 como o mecanismo que recebe JavaScript bruto e o executa no hardware.</p>\n<p>Para o programador médio, o JavaScript permanece com thread único porque não há segurança de thread. V8 e libuv internos giram seus próprios threads separados para atender às suas próprias necessidades.</p>\n<p>Se houver problemas de taxa de transferência no Node, comece com o event loop principal. Verifique quanto tempo leva para a aplicação concluir uma única iteração. Não deve durar mais do que cem milissegundos. Em seguida, verifique se há inanição do pool de encadeamentos e o que pode ser despejado do pool. Também é possível aumentar o tamanho do pool por meio da variável de ambiente. A última etapa é fazer um microbenchmark do código JavaScript no V8 que é executado de forma síncrona.</p>\n<h2>Empacotando</h2>\n<p>O event loop continua a iterar em cada fase à medida que os retornos de chamada são enfileirados. Mas, dentro de cada fase, há uma maneira de enfileirar outro tipo de retorno de chamada.</p>\n<p><strong>process.nextTick()</strong> vs <strong>setImmediate()</strong></p>\n<p>No final de cada fase, o loop executa o <strong>process.nextTick()</strong> retorno de chamada. Observe que esse tipo de retorno de chamada não faz parte do event loop porque é executado no final de cada fase. O <a href=\"https://github.com/libuv/libuv\" target=\"_blank\" rel=\"noopener\">setImmediate()</a> retorno de chamada faz parte do loop geral de eventos, portanto, não é tão imediato quanto o nome indica. Como <strong>process.nextTick()</strong> precisa de conhecimento avançado de event loop <a href=\"/programador-fullstack-8-semanas\">clique aqui caso queira ir para o próximo nível em nodejs</a>, recomendo o uso <strong>setImmediate()</strong> em geral.</p>\n<p>Existem alguns motivos pelos quais você pode precisar <strong>process.nextTick():</strong></p>\n<ul>\n<li>Permita que a E / S da rede lide com erros, limpe ou tente a solicitação novamente antes que o loop continue;</li>\n<li>Pode ser necessário executar um retorno de chamada após o desenrolar da pilha de chamadas, mas antes que o loop continue.</li>\n</ul>\n<p>Digamos, por exemplo, que um emissor de evento deseja disparar um evento enquanto ainda está em seu próprio construtor. A pilha de chamadas deve ser desenrolada antes de chamar o evento.</p>\n<pre><code><span class=\"token keyword\">const</span> EventEmitter <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'eventos'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ImpatientEmitter</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">EventEmitter</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Acione isso no final da fase com uma pilha de chamadas desfeita</span>\n    process<span class=\"token punctuation\">.</span><span class=\"token function\">nextTick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">emit</span><span class=\"token punctuation\">(</span><span class=\"token string\">'eventos'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> emitter <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ImpatientEmitter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nemitter<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'event'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Ocorreu um evento impaciente!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>Permitir que a pilha de chamadas seja desenrolada pode evitar erros como RangeError: Maximum call stack size exceeded. Uma pegadinha é ter certeza de process.nextTick()que não bloqueia o event loop O bloqueio pode ser problemático com chamadas de retorno de chamada recursivas na mesma fase.</p>\n<h2>Conclusão</h2>\n<p>O event loop é a simplicidade em sua sofisticação final. É preciso um problema difícil, como assincronia, segurança de thread e simultaneidade. Ele remove o que não ajuda ou o que não precisa e maximiza o rendimento da maneira mais eficaz possível. Por causa disso, os programadores de Node gastam menos tempo com bugs assíncronos e mais tempo entregando novos recursos.</p>\n<h2>Recomendado</h2>\n","date":"2020-09-09T00:00:00.000Z","readingTime":17,"title":"Event Loop NodeJS: Um Guia Completo Para Iniciante","categories":["nodejs"],"tags":["event-loop","javascript","nodejs"],"description":"A assincronia em qualquer linguagem de programação é difícil e o event loop vem pra resolver isso. Conceitos como simultaneidade, paralelismo e deadlocks fazem tremer até os engenheiros mais experientes. O código executado de forma assíncrona é imprevisível e difícil de rastrear quando há bugs. O problema é inevitável porque a computação moderna possui vários núcleos. Há um limite térmico em cada núcleo da CPU, e nada está ficando mais rápido. Isso pressiona o desenvolvedor a escrever um código eficiente que aproveite as vantagens do hardware.","imgArticle":"/thumbnail-article/event-loop-nodejs.png","imgHome":"/thumbnail-home/event-loop-nodejs.png"},{"slug":"6-bibliotecas-e-frameworks-javascript-pra-2021","content":"<p>JavaScript é a tecnologia que está em nosso coração quando se trata de construção de aplicações web. Existem incontáveis bibliotecas e frameworks javascript para desenvolvimento de diversas aplicações de média a alta complexidade.</p>\n<p>Alguns o ajudarão a escrever um código mais eficiente e sustentável. Ou você precisa de ajuda para projetar um conjunto de componentes de IU consistentes, interoperáveis ​​e rápidos. Em quase todas as situações, você pode encontrar uma opção que faz muito do trabalho pesado para você. Não há necessidade de começar do zero e reinventar a roda.</p>\n<p>As bibliotecas e frameworks JavaScript mais populares disponíveis apresentam alguns recursos comuns. Em particular, são eles:</p>\n<ul>\n<li>Pode manter o estado e visualizações sincronizadas;</li>\n<li>Oferecer funcionalidade de roteamento;</li>\n<li>Permitem que os desenvolvedores criem, reutilizem e mantenham componentes da interface do usuário que sejam eficientes e rápidos para responder à interação do usuário.</li>\n</ul>\n<p>O número de bibliotecas e frameworks javascript disponíveis é alto e esse número continua crescendo.</p>\n<p>Vamos começar com um framework JavaScript elegante de nível empresarial o Ext JS</p>\n<h2>01 - Sencha Ext JS</h2>\n<p><img src=\"/uploads/2020/09/Sencha-Ext-js.png\" alt=\"Bibliotecas e Frameworks JavaScript\"></p>\n<p>Precisa construir uma aplicação web que lida com grandes quantidades de dados e precisa de ferramentas front-end poderosas e flexíveis para exibi-los e trabalhar com eles?</p>\n<blockquote>\n<p>O framework JavaScript mais abrangente para a construção de aplicativos móveis e de plataforma cruzada com uso intensivo de dados para qualquer dispositivo moderno. Ext JS inclui mais de 140 componentes de IU de alto desempenho pré-integrados e testados.</p>\n<p>Sencha Etx JS</p>\n</blockquote>\n<p>Alguns desses componentes incluem:</p>\n<ul>\n<li>Calendário HTML5;</li>\n<li>Grids;</li>\n<li>Arvores;</li>\n<li>Listas;</li>\n<li>Formulários</li>\n<li>Menus;</li>\n<li>Tolbars;</li>\n<li>e muito mais.</li>\n</ul>\n<p>Ext JS é um framework confiável e tem uma boa documentação, tutoriais e suporte. Testes recentes mostraram que a grade de dados Ext JS foi <a href=\"https://www.sencha.com/blog/ext-js-performance-benchmarks/\" target=\"_blank\" rel=\"noopener\">300 vezes mais rápida</a> do que os concorrentes líderes segundo o blog da ferramenta. Na verdade, sua experiência de rolagem virtual recupera e mostra grandes quantidades de dados em menos de um segundo.</p>\n<p>As vantagens do Ext JS incluem:</p>\n<ul>\n<li>Desenvolvimento rápido e suave. Desfrute da integração perfeita entre um framework corporativo e componentes e ferramentas de última geração;</li>\n<li>Conjunto abrangente de componentes seguros. Você nunca terá que sair do framework para encontrar qualquer <strong>widget</strong> ou funcionalidade ausente.</li>\n<li>Grandes capacidades de design devido às ferramentas integradas incluídas. O <strong>Sencha Architect</strong> oferece recursos de arrastar e soltar. O Sencha Stencils permite que os desenvolvedores simulem, estilizem, prototipem e testem conceitos de IU.</li>\n<li>Unidades incríveis e ferramentas de teste ponta a ponta com o <strong>Sencha Test</strong>.</li>\n<li>Um gerenciador de layout. Gerencie a exibição de dados e conteúdo em diferentes navegadores e tamanhos de tela. Um sistema de configuração responsivo adapta a interface à orientação do dispositivo e aos tamanhos das janelas do navegador.</li>\n<li>Fácil de obter conformidade de acessibilidade com o pacote <strong>Ext JS ARIA</strong>.</li>\n<li>Um pacote de dados robusto que desacopla os componentes de IU da camada de dados.</li>\n</ul>\n<p>Você pode descobrir mais sobre Ext JS no <a href=\"https://www.sencha.com/products/extjs/\" target=\"_blank\" rel=\"noopener\">site</a> do framework.</p>\n<h2>02 - React</h2>\n<p><img src=\"/uploads/2020/07/React-bonux-249x300.png\" alt=\"\"></p>\n<p><a href=\"https://reactjs.org/\" target=\"_blank\" rel=\"noopener\">React</a> é enormemente popular entre os desenvolvedores <strong>front-end</strong>. É uma biblioteca JavaScript de código aberto para a construção de interfaces de usuário incrivelmente rápida e interativa. O React foi criado por <strong>Jordan Walke</strong>, um engenheiro de software que trabalha para o Facebook. Foi implantado pela primeira vez no feed de notícias do Facebook em 2011 e no Instagram em 2012. É usado por nomes como Netflix, Airbnb, Instagram e New York Times, entre outros.</p>\n<p>Os motivos para escolher o React para impulsionar seu próximo projeto incluem:</p>\n<ul>\n<li>O React é rápido de aprender e usar. É JavaScript com uma pequena API. Os componentes do código são estáveis ​​e reutilizáveis. Eles são fáceis de criar e manter usando a sintaxe declarativa da API;</li>\n<li>Uma grande empresa está envolvida, e um forte apoio da comunidade React;</li>\n<li>A biblioteca é agnóstica de pilha, também pode renderizar no servidor usando Node.js e em aplicativos móveis com React Native.</li>\n<li>Flexível, é livre para definir padrão. Diferente do angular não existe uma estrutura obrigatória para se seguir. Mas é sempre bom buscar exemplos de outros projetos para não se construir uma estrutura pouco escalável e de difícil manutenção;</li>\n<li>JSX, uma das características mais fantásticas do react, que é poder escrever HTML e css dentro de um arquivo javascript, e além disso todos os recursos da linguagem como loops, funções de formatação, validações e muito mais;</li>\n<li>Permite usar javascript, ES6(javascript moderno com novas funcionalidades), TypeScript</li>\n</ul>\n<p>Caso queira aprende mais React <a href=\"https://tipscode.tech/\" target=\"_blank\" rel=\"noopener\">clique aqui.</a></p>\n<h2>03 - Angular</h2>\n<p><img src=\"/uploads/2020/09/angular.jpg\" alt=\"\"></p>\n<p>Angular</p>\n<p><a href=\"https://angular.io/\" target=\"_blank\" rel=\"noopener\">Angular</a> é um framework de código aberto gratuito do Google que funciona tanto para desktop quanto para celular.</p>\n<p>Há uma curva de aprendizado, incluindo familiarização com o TypeScript, um superconjunto do JavaScript. Apesar disso, o Angular continua sendo um ótimo framework para trabalhar. Aqui estão algumas das razões para usá-lo:</p>\n<ul>\n<li>Plataforma cruzada - aplicações progressivas web, aplicativos móveis nativos e desktop;</li>\n<li>Oferece velocidade e desempenho;</li>\n<li>Tem ótimos recursos como filtros, vinculação de dados bidirecional, diretivas e muito mais;</li>\n<li>Disponibiliza ferramentas incríveis para um desenvolvimento mais rápido;</li>\n<li>Tem suporte total do Google e uma forte comunidade de desenvolvedores por trás dele.</li>\n</ul>\n<h2>04 - Vue</h2>\n<p><img src=\"/uploads/2020/09/vue.jpg\" alt=\"\"></p>\n<p>Vue JS é um framework JavaScript progressivo gratuito e de código aberto criada por <strong>Evan You</strong>. Ele usa uma sintaxe de modelo (como Angular) e depende de uma arquitetura baseada em componentes (como React).</p>\n<p>Veja como o Vue se descreve em sua própria página de repositório GitHub :</p>\n<blockquote>\n<p>Vue (pronunciado /vjuː/, como view) é uma estrutura progressiva para construir interfaces de usuário. Ele foi projetado desde o início para ser adotado de forma incremental e pode ser facilmente escalonado entre uma biblioteca e um framework, dependendo dos diferentes casos de uso. Ele consiste em uma biblioteca central acessível que se concentra apenas na camada de visualização e em um ecossistema de bibliotecas de suporte que ajuda a lidar com a complexidade em grandes aplicações de página única.</p>\n<p>Site Vue</p>\n</blockquote>\n<p>Aqui estão alguns dos pontos fortes do Vue:</p>\n<ul>\n<li>Amigável ao desenvolvedor. Se você conhece as linguagens web (<a href=\"/ebook-gratuito-html\">HTML</a>, CSS e <a href=\"/mini-curso-construindo-seu-jogo-em-javascript/\">JavaScript</a>), ficará ainda mais fácil;</li>\n<li>Você pode integrá-lo a um projeto progressivamente. Ele pode ser facilmente escalado de uma biblioteca para um framework completo;</li>\n<li>Pequeno e vem com um DOM virtual super-rápido;</li>\n<li>Tem uma comunidade incrível por trás dele, o que o torna um framework estável para ser adotada;</li>\n<li>Oferece uma boa documentação.</li>\n</ul>\n<p>Caso queira desenvolver uma aplicação usando o Vue lá no meu canal do Youtube tem uma aula completa <a href=\"https://youtu.be/dtJPYIXf4Sc\" target=\"_blank\" rel=\"noopener\">clique aqui para ver</a></p>\n<h2>05 - Ember</h2>\n<p><img src=\"/uploads/2020/09/ember.jpg\" alt=\"\"></p>\n<p>Lançado em dezembro de 2011 por Yehuda Katz e Tom Dale , Ember é</p>\n<blockquote>\n<p>Uma framework para desenvolvedores web ambiciosos.</p>\n</blockquote>\n<p>Ember.js é um framework JavaScript produtivo e testado em batalhas para a construção de aplicações web modernos. Inclui tudo que você precisa para construir interfaces de usuário ricas que funcionem em qualquer dispositivo.</p>\n<p>Esse framework JavaScript é gratuito, de código aberto e possui uma forte comunidade por trás dela. Aqui estão alguns dos motivos pelos quais o Ember faz sucesso entre os desenvolvedores:</p>\n<ul>\n<li>Alavanca a convenção sobre a abordagem de configuração defendida por <strong>David Heinemeier Hansson</strong>. Tem como objetivo diminuir o número de decisões que um desenvolvedor deve tomar (sem sacrificar a flexibilidade);</li>\n<li>Quase tudo que você precisa para configurar sua aplicação vem com o Ember pronto para uso;</li>\n<li>Compatível com versões anteriores;</li>\n<li>Rápido em adotar os mais recentes padrões da web e recursos JavaScript;</li>\n<li>Oferece uma boa documentação e recursos interessantes.</li>\n</ul>\n<h2>06 - Svelte 3</h2>\n<p><img src=\"/uploads/2020/09/svelte-1024x482.jpg\" alt=\"\"></p>\n<p>Embora esteja crescendo rapidamente, Svelte 3 é o novo garoto na área de frameworks. Rich Harris lançou o Svelte em novembro de 2016 como um projeto de código aberto. A versão 3 foi lançada em abril de 2019 e foi uma revisão completa.</p>\n<p>Svelte funciona de maneira diferente da maioria dos frameworks listados até agora. Em particular:</p>\n<blockquote>\n<p>Enquanto frameworks tradicionais como React e Vue fazem a maior parte de seu trabalho no navegador , Svelte muda esse trabalho para uma etapa de compilação que acontece quando você constrói seu aplicativo.</p>\n</blockquote>\n<p>Muitos frameworks usam técnicas como diffing virtual de DOM. Em vez disso, o Svelte atualiza cirurgicamente o DOM quando o estado da sua aplicação muda. Compilar o código cria benefícios de desempenho perceptíveis.</p>\n<p>Svelte é rápido para iniciantes. Você pode construir componentes sem muito código clichê. Basta usar HTML, CSS e JavaScript. O site Svelte oferece recursos para iniciantes. Isso inclui um tutorial, exemplos e uma API detalhada para desenvolvedores Svelte mais experientes. Para obter ajuda e suporte, você está convidado a ingressar no servidor Discord dedicado .</p>\n<h2>Conclusões</h2>\n<p>A escolha de um framework é sempre uma decisão circunstancial. Envolve prestar atenção a quais são os desafios específicos do seu projeto. Também significa considerar a experiência e as preferências de sua equipe.</p>\n<p>Por exemplo, se sua equipe precisa construir projetos de nível corporativo com muitos dados que precisam de uma estrutura segura, confiável e abrangente com um grande conjunto de componentes que funcionam bem uns com os outros, Ext JS da Sencha é uma ótima opção. Você nunca terá que sair do framework para pesquisar componentes. Para projetos que começam pequenos, mas precisam de flexibilidade e recursos de escala, o Vue pode funcionar bem. E se a sua equipe de front-end tem amplo conhecimento do React, escolher o React pode ser sua melhor aposta. Eu particularmente uso o React.</p>\n<p>Existem muitas biblioteca e frameworks javascript que gostaria de sugerir? Quais você se encontrou usando mais como desenvolvedor? Deixe-me saber, coloca nos comentário.</p>\n<h2>Recomendações</h2>\n","date":"2020-09-06T00:00:00.000Z","readingTime":7,"title":"6 Bibliotecas e Frameworks JavaScript para 2021","tags":["6-frameworks","bibliotecas-e-frameworks-javascript","bibliotecas-javascript","css","frameworks-javascript","html","javascript"],"description":"JavaScript é a tecnologia que está em nosso coração quando se trata de construção de aplicações web. Existem incontáveis bibliotecas e frameworks javascript para desenvolvimento de diversas aplicações de média a alta complexidade.","imgArticle":"/thumbnail-article/6-bibliotecas-e-frameworks-javascript-para-2021.png","imgHome":"/thumbnail-home/6-bibliotecas-e-frameworks-javascript-para-2021.png"},{"slug":"entrevista-de-emprego-perguntas-e-respostas-para-nodejs","content":"<p>Descobra como é uma Entrevista de Emprego Perguntas e Respostas na vida real de um programador em NodeJS.</p>\n<p>A preparação para uma entrevista de emprego é sempre uma tarefa desafiadora. Provavelmente você não sabe exatamente o que será perguntado e a ansiedade pode lhe atrapalha, fazendo você esquecer até mesmo seu próprio nome. Pensando nisso está aqui 21 perguntas sobre <a href=\"https://nodejs.org/en/\" target=\"_blank\" rel=\"noopener\">Node.js</a> para entrevistas de emprego que vão de coisas muito simples a tópicos mais avançados tecnicamente para ajudá-lo no processo.</p>\n<p>Node.js não é usado exclusivamente no back-end. Também o usamos para criar aplicações front-end e isso se tornou uma parte muito importante do ecossistema do desenvolvimento web. Isso significa que é muito útil para um desenvolvedor Node.js estar familiarizado com o papel que essa tecnologia desempenha em diferentes ambientes JavaScript. Por esse motivo, aqui vão algumas perguntas e respostas nesse sentido.</p>\n<p>Nota: Caso queria conhecer mais sobre o NodeJs lá no canal do Youtube, tem vários vídeo sobre, desde do básico a criação de sistemas completo. <a href=\"https://www.youtube.com/tipscode\" target=\"_blank\" rel=\"noopener\">Clique aqui para conhece o canal</a></p>\n<h2>Entrevista de Emprego Perguntas e Respostas</h2>\n<p><img src=\"/uploads/2020/09/perguntas-e-respostas-do-artigo-1024x724.jpg\" alt=\"Entrevista de Emprego Perguntas e Respostas\"></p>\n<p>Entrevista de Emprego Perguntas e Respostas</p>\n<h2>Algumas Recomendações</h2>\n<p>Eu recomendaria tentar responder às perguntas antes de ler as respostas. Caso você não consiga, é muito normal, mas tente novamente amanhã para você aprender ainda mais e fixa.</p>\n<p>Também é possível que você esteja procurando exemplos de perguntas de entrevista para seus candidatos. Eu acredito que eles devem ser variados o suficiente como um ponto de partida para ajudá-lo a avaliar seu nível.</p>\n<p>Mais do que responder bem a uma pergunta, acho que são os detalhes que mostram o quanto alguém sabe. Uma boa resposta pode iniciar uma conversa que pode transformar uma experiência estressante em uma conversa casual com um colega. É um resultado ideal para ambas as partes.</p>\n<p>Caso você queira aprender NodeJS como todo de um jeito 100% prático da uma olhadinha <a href=\"/programador-fullstack-8-semanas\">neste curso aqui</a></p>\n<h2>Sobre NodeJS</h2>\n<h3>Pergunta: O que é NodeJs?</h3>\n<p>Resposta: Node.js é um ambiente de tempo de execução JavaScript baseado no mecanismo V8. Ele nos permite executar JavaScript fora do navegador - normalmente, em um servidor web.</p>\n<h3>Pergunta: Para que o NodeJS é bom?</h3>\n<p>Resposta: O Node.js é ótimo para lidar com várias conexões com baixa complexidade ciclomática, visto que sua natureza de thread única requer que liberemos o loop de eventos o mais rápido possível. Isso torna o Node.js a escolha ideal para microsserviços e aplicações em tempo real.</p>\n<h3>Pergunta: O que é npm?</h3>\n<p>Resposta: O npm significa Gerenciador de Pacotes Node.js. Consiste em uma interface de linha de comando que podemos usar para acessar um registro online de pacotes públicos e privados.</p>\n<h3>Pergunta: Como você cria uma aplicação Node.js do zero?</h3>\n<p>Resposta: Podemos começar criando uma pasta de projeto. Em seguida, navegamos até essa pasta na linha de comando e executamos <strong>npm init</strong>. Por fim, seguimos os passos para preencher as informações do nosso aplicativo. Caso queira criar um sistema do zero <a href=\"https://www.youtube.com/watch?v=rNaK6oCrXWM&amp;list=PLw608KLEKJz9aXDnpBq7SWpq9tvRdcpP_&amp;index=2&amp;t=538s\" target=\"_blank\" rel=\"noopener\">clique aqui</a></p>\n<h3>Pergunta: O que “npm install” faz?</h3>\n<p>Resposta: Ele instala as dependências encontradas no arquivo <strong>package.json</strong>.</p>\n<h3>Pergunta: Como você instala uma biblioteca em Node.js?</h3>\n<p>Resposta: <strong>npm install name-da-lib</strong> instalar nossa biblioteca e incluí-la como um arquivo dependency. Se adicionarmos o parâmetro <strong>--save-dev</strong>, ele será incluído como um <strong>devDependency</strong>.</p>\n<h3>Pergunta: Como você cria um script personalizado?</h3>\n<p>Resposta: Precisamos entrar em package.json e adicionar nosso script personalizado dentro da tag <strong>scripts</strong>. Podemos então executar nosso script indo para o terminal e executando <strong>npm run name-do-script</strong>.</p>\n<h3>Pergunta: É possível criar uma aplicação front-end com Node.js?</h3>\n<p>Resposta: O navegador não pode executar um aplicação Node.js, mas você pode usar algo como webpack ou Parcel para agrupar o código e transformá-lo em algo que um navegador possa executar. É muito comum hoje em dia usar um ambiente Node.js para construir aplicações front-end. Um bom exemplo de Node.js no front end é o framework <strong>Electron</strong>, que faz uso de Node.js e chromium para construir aplicações “nativas” como, por exemplo, <strong>VSCode</strong>.</p>\n<h3>Pergunta: Você pode mencionar três frameworks Node.js populares?</h3>\n<p>Resposta: Express.js é provavelmente framework mais popular até hoje. Koajs é provavelmente um dos mais rápidos e Sails.js funciona muito bem para aplicativos de comunicação bilateral em tempo real, uma vez que usam socket.io.</p>\n<h3>Pergunta: Para que serve o Express.js?</h3>\n<p>Resposta: Express.js torna muito fácil definir rotas em uma aplicação web, o que torna uma escolha óbvia para criar <strong>APIs</strong> <strong>REST</strong>. É bastante flexível e fácil de usar, e sua arquitetura de <strong>middleware</strong> ajuda a manter um sistema simples e escalável.</p>\n<h3>Pergunta: O que é criptografia?</h3>\n<p>Resposta: Crypto é uma biblioteca interna do Node.js que fornece funcionalidade criptográfica para fazer coisas como, por exemplo, criptografar e descriptografar senhas.</p>\n<h3>Pergunta: Como lidamos com o escopo local e global no Node.js?</h3>\n<p>Resposta: Ao contrário do JavaScript do lado do cliente, em Node.js as variáveis ​​declaradas com <strong>var</strong> o escopo mais alto não são globais; eles são locais para o módulo em que estão. No navegador, temos acesso ao objeto <strong>window</strong> onde residem nossas variáveis ​​globais, e Node.js tem um objeto para isso chamado <strong>global</strong>.</p>\n<h3>Pergunta: O Node.js tem acesso ao sistema de arquivos?</h3>\n<p>Resposta: Sim. Podemos usar o módulo fs para ler, gravar, copiar e excluir arquivos e pastas. Lá no <a href=\"https://youtu.be/IR9azXeWs2s\" target=\"_blank\" rel=\"noopener\">canal tem uma aula onde ensino</a></p>\n<h3>Pergunta: O que significa sem bloqueio?</h3>\n<p>Resposta: Isso significa que um trecho de código como, por exemplo, uma função assíncrona, está programado para ser executado na próxima iteração do loop de eventos, desbloqueando assim o resto do código e permitindo que ele continue em execução.</p>\n<h3>Pergunta: O que é o loop de eventos e como ele funciona?</h3>\n<p>Resposta: O loop de eventos é o que dá ao Node.js sua natureza assíncrona. Agenda a execução de um conjunto de cinco fases em loop. A primeira fase executa os retornos de chamada <strong>setTimeout</strong> e <strong>setInterval</strong> programados. O segundo executa os retornos de chamada IO programados para execução na iteração atual. A terceira pesquisa os eventos que serão executados na próxima iteração. O quarto executa os <strong>callbacks</strong> <strong>setImmediate()</strong>. Finalmente, o quinto executa todos os <strong>callbacks</strong> “próximos”.</p>\n<h3>Pergunta: As funções assíncronas são executadas em paralelo?</h3>\n<p>Não. Uma função assíncrona será executada na próxima iteração do loop de evento enquanto um processo paralelo é executado em seu próprio processo ou thread.</p>\n<h3>Pergunta: O Node.js é multithread?</h3>\n<p>Resposta: Um processo Node.js é executado em um único thread, mas poderíamos usar o módulo <strong>child_process</strong> para executar vários processos em paralelo ou <strong>Workers</strong> para executar várias <strong>threads</strong>.</p>\n<h3>Pergunta: O que é o módulo child_process?</h3>\n<p>Resposta: O <strong>módulo child_process</strong> nos permite gerar e separar processos filhos. Esses são processos independentes que rodam em sua própria CPU e nos dão acesso aos comandos do sistema.</p>\n<h3>Pergunta: Qual é a diferença entre um web worker e um worker thread?</h3>\n<p>Resposta: Os <strong>Web workers</strong> são implementados no navegador e os threads de trabalho são implementados no Node.js. Ambos resolvem o mesmo problema, que é fornecer processamento paralelo. Na verdade, a API Worker Thread é baseada na implementação de Web Workers.</p>\n<h3>Pergunta: Quais são as vantagens de usar um thread de trabalho em vez de um processo filho?</h3>\n<p>Resposta: Enquanto um processo filho executa seu próprio processo com seu próprio espaço de memória, um thread de trabalho é um thread dentro de um processo que pode compartilhar memória com o thread principal. Isso ajuda a evitar serializações de dados caras e para trás.</p>\n<h3>Pergunta: O que você usaria para abrir uma conexão bidirecional em tempo real com um cliente via HTTP?</h3>\n<p>Resposta: Podemos usar WebSockets ou long polling. Existem bibliotecas como soket.io e SignalR que simplificam isso para nós. Eles até fornecem clientes que recorrem a longas pesquisas se o WebSockets não estiver disponível no navegador.</p>\n<h2>Conclusão</h2>\n<p>Chegamos ao fim de mais um artigo. Espero que você tenha achado essas perguntas úteis. Você poderia acertá-los? Se você não conseguiu, não se preocupe. A menos que você esteja almejando uma posição sênior, não se espera que você conheça todos eles. Certifique-se de compreender os fundamentos e, sempre que encontrar uma lacuna de conhecimento, esforce-se para ultrapassar seus limites. Garanto que não passará despercebido.</p>\n<p>Desejo-lhe boa sorte em sua entrevista. Mantenha a calma, confie no que você sabe e seja legal - o último sendo provavelmente o mais importante. A maioria das pessoas prefere preencher as lacunas no conhecimento de uma pessoa boa e humilde do que estar no escritório todos os dias com um indivíduo arrogante e egoísta com quem é difícil trabalhar apesar de ser um gênio.</p>\n<p>Se você for um entrevistador, lembre-se de que o nervosismo pode atrapalhar alguém que mostra como é bom. Faça-os se sentirem o mais confortáveis ​​possível e deixe-os saber que você está do lado deles e quer que eles acertem!</p>\n<p>Isso é tudo, pessoal. Deixa seu like e um comentário dizendo o que você achou, te vejo no próximo artigo, até mais fica com Deus.</p>\n<h2>Recomendação</h2>\n<p>DO ZERO A PROGRAMADOR FULL STACK JAVASCRIPT EM 8 SEMANAS</p>\n<p>Você vai aprender:</p>\n<ul>\n<li>Introdução a Web + HTML5;</li>\n<li>CSS + Bulma;</li>\n<li>JavaScript + Lógica de Programação;</li>\n<li>Git e Github;</li>\n<li>JavaScript Moderno (ES6+)</li>\n<li>React</li>\n<li>NodeJS + MongoDB</li>\n<li>Como criar um APP inspirado no Evernote</li>\n<li>Como preparar seu portfólio e encontrar Jobs</li>\n</ul>\n<p>E você comprando através desse botão você ainda vai ganha os bônus premiums do TipsCode.</p>\n<ul>\n<li><a href=\"/meus-bonus/\">Como Criar uma Calculadora com React</a></li>\n<li><a href=\"/meus-bonus/\">Desenvolvendo um Clone do Instagram com React Native</a></li>\n<li>e Acesso vitalicio a todos os bônus futuros.</li>\n</ul>\n<p>Garanta já sua vaga</p>\n<p><a href=\"/programador-fullstack-8-semanas\"><img src=\"/uploads/2020/09/treinamento-fullstack-js-576x1024.gif\" alt=\"\"></a></p>\n","date":"2020-09-02T00:00:00.000Z","readingTime":7,"title":"Entrevista de Emprego Perguntas e Respostas: 21 Respostas Para você Ser Aprovado em uma Vaga NodeJS","categories":["nodejs"],"tags":["alisson-suassuna","backend","entrevista-de-emprego-perguntas-e-respostas","javascript","nodejs","perguntas","perguntas-e-respostas","programador","tipscode","vaga-de-emprego"],"description":"Descobra como é uma Entrevista de Emprego Perguntas e Respostas na vida real de um programador em NodeJS.","imgArticle":"/thumbnail-article/vaga-de-nodejs-21-respostas-para-se-dar-bem-na-entrevista.png","imgHome":"/thumbnail-home/vaga-de-nodejs-21-respostas-para-se-dar-bem-na-entrevista.png"},{"slug":"html-e-css-criando-um-site-do-zero","content":"<p>O TipsCode está lançando mais uma nova série lá no canal do Youtube, nesta nova playlist de aulas vamos desenvolver do zero um site de notícia, então se você está querendo aprender HTML e CSS é essa sua chance, e o melhor de tudo isso é que é 100% gratuito.</p>\n<p>Nesta série de aulas você vai aprender tudo sobre HTML e CSS para desenvolver seus próprios sistemas web ou site, além do conteúdo em formato de vídeo tem um <a href=\"/ebook-gratuito-html\">material complementa em formato de ebook.</a></p>\n<p>Para você ter acesso a esses vídeo baixa clicar no vídeo a baixo que irá direto para a playliste com todas as aulas que estão disponíveis no momento.</p>\n<h2>HTML e CSS - Criando site do zero</h2>\n<p>&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/6qWmAMglFAA&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;/iframe&gt;</p>\n<p><a href=\"/programador-fullstack-8-semanas\">Caso queira conhecer um curso muito bom que super recomendo clique aqui</a></p>\n","date":"2020-08-30T00:00:00.000Z","readingTime":0,"title":"MiniCurso Criando um Site de Notícia com HTML e CSS","categories":["css","html"],"tags":["criar-site","css","html"],"description":"O TipsCode está lançando mais uma nova série lá no canal do Youtube, nesta nova playlist de aulas vamos desenvolver do zero um site de notícia, então se você está querendo aprender HTML e CSS é essa sua chance, e o melhor de tudo isso é que é 100% gratuito.","imgArticle":"/thumbnail-article/mini-curso de-HTML5-Construindo-um-site-de-noticias.png","imgHome":"/thumbnail-home/mini-curso de-HTML5-Construindo-um-site-de-noticias.png"},{"slug":"o-que-e-docker-guia-basico-passo-a-passo","content":"<p>Para aquelas situações em que os contêineres brilham, você pode estar se perguntando como essa tecnologia é implementada na prática. Então, vamos ver como o Docker cumpre todas essas promessas.</p>\n<p><img src=\"/uploads/2020/08/o-que-e-docker-1024x683.png\" alt=\"o que é docker\"></p>\n<p>O que é Docker</p>\n<p>Docker é um projeto de código aberto - bem como uma empresa, com sede em San Francisco, que apoia esse projeto. O docker foi lançado em 2013 e, mesmo assim, em tão pouco tempo e ainda parcialmente em versão beta, <a href=\"https://www.datadoghq.com/docker-adoption/\" target=\"_blank\" rel=\"noopener\">está sendo amplamente adotado em vários setores.</a></p>\n<p>Mas o que é? Docker é um software executado na linha de comando e que permite automatizar a implantação de aplicações dentro de contêineres de software. <a href=\"https://www.docker.com/why-docker\" target=\"_blank\" rel=\"noopener\">No site do Docker</a>:</p>\n<blockquote>\n<p>Os contêineres do Docker envolvem um pedaço de software em um sistema de arquivos completo que contém tudo o que é necessário para executar: código, tempo de execução, ferramentas do sistema, bibliotecas do sistema - qualquer coisa que possa ser instalada em um servidor. Isso garante que o software sempre funcionará da mesma forma, independentemente de seu ambiente.</p>\n</blockquote>\n<p>Como isso ainda pode ser um pouco abstrato, vamos ver como é executar um contêiner com docker.</p>\n<h2>Criando Contêiner Docker</h2>\n<p>É assim que você executa um contêiner “hello-world”:</p>\n<pre><code>$ docker run hello<span class=\"token operator\">-</span>world\n</code></pre>\n<p>E aqui está a saída, gerada de dentro do contêiner, com uma pequena descrição dos componentes internos do Docker:</p>\n<pre><code>Hello from Docker<span class=\"token punctuation\">.</span>\nThis message shows that your installation appears to be working correctly<span class=\"token punctuation\">.</span>\n\nTo generate <span class=\"token keyword\">this</span> message<span class=\"token punctuation\">,</span> Docker took the following steps<span class=\"token operator\">:</span>\n<span class=\"token number\">1.</span> The Docker Engine <span class=\"token constant\">CLI</span> client contacted the Docker Engine daemon<span class=\"token punctuation\">.</span>\n<span class=\"token number\">2.</span> The Docker Engine daemon pulled the <span class=\"token string\">\"hello-world\"</span> image from the Docker Hub<span class=\"token punctuation\">.</span>\n<span class=\"token number\">3.</span> The Docker Engine daemon created a <span class=\"token keyword\">new</span> <span class=\"token class-name\">container</span> from that image which runs the\n   executable that produces the output you are currently reading<span class=\"token punctuation\">.</span>\n<span class=\"token number\">4.</span> The Docker Engine daemon streamed that output to the Docker Engine <span class=\"token constant\">CLI</span> client<span class=\"token punctuation\">,</span> which sent it\n   to your terminal<span class=\"token punctuation\">.</span>\n\nCaso queira algo mais avançado<span class=\"token punctuation\">,</span> você pode executar com o o Ubuntu ou qualquer outra distro<span class=\"token operator\">:</span>\n$ docker run <span class=\"token operator\">-</span>it ubuntu bash\n\nCompartilhe imagens<span class=\"token punctuation\">,</span> automatize fluxos de trabalho e muito mais com uma conta Docker Hub gratuita<span class=\"token operator\">:</span>\n<span class=\"token literal-property property\">https</span><span class=\"token operator\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span>hub<span class=\"token punctuation\">.</span>docker<span class=\"token punctuation\">.</span>com\n\nPara mais exemplos veja o site<span class=\"token operator\">:</span>\n<span class=\"token literal-property property\">https</span><span class=\"token operator\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span>docs<span class=\"token punctuation\">.</span>docker<span class=\"token punctuation\">.</span>com<span class=\"token operator\">/</span>userguide<span class=\"token operator\">/</span>\n</code></pre>\n<p>Esperançosamente, isso foi simples o suficiente, mas não há muito mais que possamos fazer com o contêiner “hello-world”, então vamos além e executamos um shell interativo em um Ubuntu Linux:</p>\n<pre><code>$ docker run <span class=\"token operator\">-</span>i <span class=\"token operator\">-</span>t ubuntu bash\n\n# cat <span class=\"token operator\">/</span>etc<span class=\"token operator\">/</span>issue\nUbuntu <span class=\"token number\">16.04</span> <span class=\"token constant\">LTS</span> \\n \\l\n</code></pre>\n<p>O primeiro comando inicia o -i TTY interativo ( ) ou o console ( -t) no ubuntu contêiner com o bash shell. O segundo comando ( cat /etc/issue) já está dentro do contêiner (e poderíamos ter continuado a executar os comandos, é claro). Para ser claro: não importa se você está no Windows, Mac ou Debian, para esse contêiner você está em uma máquina Ubuntu. E para que conste, o console estava pronto e funcionando em um segundo !</p>\n<p>Além disso, como os contêineres são ambientes completamente isolados e descartáveis, você pode fazer coisas malucas neles, como:</p>\n<pre><code># rm <span class=\"token operator\">-</span>rf <span class=\"token operator\">/</span>etc\n# cat <span class=\"token operator\">/</span>etc<span class=\"token operator\">/</span>issue\n<span class=\"token literal-property property\">cat</span><span class=\"token operator\">:</span> <span class=\"token operator\">/</span>etc<span class=\"token operator\">/</span>issue<span class=\"token operator\">:</span> No such file or directory\n</code></pre>\n<p>E quando você sai ou finaliza esse contêiner, tudo que você precisa fazer é reiniciá-lo, e você obterá um novo exatamente no mesmo estado inicial:</p>\n<pre><code># exit\n$ docker run <span class=\"token operator\">-</span>i <span class=\"token operator\">-</span>t ubuntu bash\n# cat <span class=\"token operator\">/</span>etc<span class=\"token operator\">/</span>issue\nUbuntu <span class=\"token number\">16.04</span> <span class=\"token constant\">LTS</span> \\n \\l\n</code></pre>\n<p>E é simples assim, espero que tenha consigo compreender melhor o que é docker.</p>\n<h2>Como Funciona o Doker</h2>\n<h3>A arquitetura</h3>\n<p>Se você está familiarizado com máquinas virtuais (VM), como um hipervisor, pode já ter começado a notar algumas diferenças. Embora permitam que você execute diferentes sistemas operacionais (SO), as VMs ocupam muito espaço na memória da máquina host, já que cada novo SO é carregado do zero na memória principal. E uma vez que cada SO requer todos os seus próprios binários e bibliotecas para todo o sistema, isso geralmente é responsável por vários GBs extras de espaço em disco. Por último, mas não menos importante, assim como ao iniciar um SO real, o sistema leva vários minutos para carregar antes de estar operacional.</p>\n<p><img src=\"/uploads/2020/08/arquitetura-docker.png\" alt=\"\"></p>\n<p>Fonte: <a href=\"https://www.docker.com/sites/default/files/WhatIsDocker_2_VMs_0.png\" target=\"_blank\" rel=\"noopener\">https://www.docker.com/sites/default/files/WhatIsDocker_2_VMs_0.png</a></p>\n<h3>Imagens e Containers</h3>\n<p>Você ouvirá muito sobre “imagens” e “contêineres” ao trabalhar com o Docker, então vamos esclarecer o que são.</p>\n<p>Uma imagem (às vezes chamada de “construção”) é um arquivo, um recurso somente de leitura que você baixa ou cria, embalado com tudo o que é necessário para um ambiente operacional. Construir imagens é muito fácil, porque você pode usar imagens já disponíveis como base (por exemplo, uma distribuição Debian) e dizer ao Docker o que você quer em cima dela, como certas ferramentas de desenvolvimento, bibliotecas e até mesmo colocar seu próprio aplicativo dentro.</p>\n<p>Um contêiner, por outro lado, é o ambiente isolado que você obtém quando executa uma imagem e é lido e gravado, para que você possa fazer o que quiser com ele. Este ambiente vai estar no estado preciso que foi definido ao construir a imagem. E como as imagens são somente leitura, ao executar um novo contêiner, você tem um novo ambiente perfeito, não importa o que você fez nos outros contêineres. Você pode executar tantos contêineres simultâneos quanto seu sistema puder controlar.</p>\n<p>Portanto, você executa contêineres a partir de imagens. Uma analogia que pode ser útil - se você trabalhar com programação orientada a objetos, como C ou <a href=\"/programador-fullstack-8-semanas\">JavaScript</a> - é que uma imagem é como uma classe, enquanto um contêiner seria uma instância dessa classe.</p>\n<h3>Fluxo de trabalho com docker</h3>\n<p>Como este é um artigo introdutório, não entrarei em detalhes completos agora, mas para que você tenha uma ideia de como é um fluxo de trabalho típico com o Docker, aqui estão as três etapas principais:</p>\n<ul>\n<li><strong>Construa uma imagem</strong> usando o Dockerfile, um arquivo de texto simples no qual você define as instruções para o que deseja agrupar na construção - como sistema operacional de base, bibliotecas, aplicativos, variáveis ​​de ambiente e arquivos locais. (Consulte a <a href=\"https://docs.docker.com/reference/builder/\" target=\"_blank\" rel=\"noopener\">referência</a> do <a href=\"https://docs.docker.com/reference/builder/\" target=\"_blank\" rel=\"noopener\">Dockerfile</a> para mais informações.);</li>\n<li><strong>Envie a imagem</strong> por meio do Docker Hub ou de seu repositório privado. Agora você pode distribuir facilmente esse aplicativo ou ambiente de desenvolvimento com o Docker - e, de fato, existem dezenas de imagens oficiais pré-construídas oferecidas por desenvolvedores de software, prontas para usar. (Explore o Docker Hub para mais informações.);</li>\n<li><strong>Execute um contêiner</strong> em uma máquina host. Tudo que você precisa é ter o Docker instalado para poder executar contêineres, implantar microsserviços (ou seja, iniciar diferentes contêineres executando diferentes serviços) e ter o ambiente de que você precisa para desenvolvimento ou implantação.</li>\n</ul>\n<p>Dica de artigo: <a href=\"/curso-programador-full-stack-em-8-semanas/\">Curso Programador Full Stack JavaScript</a></p>\n<h2>Próximo passo - docker</h2>\n<p>As possibilidades com containers de software são imensas e eles fornecem, em muitos casos, soluções definitivas para o que costumava ser problemas em aberto na área de desenvolvimento e operações (DevOps). Forneceremos aqui uma lista de recursos para ajudá-lo a começar a trabalhar com <strong>Docker</strong> e contêineres de software.</p>\n<p>Os requisitos para instalar o <strong>Docker</strong> são um pouco altos:</p>\n<ul>\n<li>Windows : sistema operacional de 64 bits, Windows 7 ou superior;</li>\n<li>Mac : OS X 10.8 “Mountain Lion” ou mais recente, com suporte de hardware da Intel para virtualização de unidade de gerenciamento de memória (MMU) e pelo menos 4 GB de RAM;</li>\n<li>Gnu/Linux : instalação de 64 bits (independentemente da distribuição e versão do Linux), com kernel 3.10 ou superior. (Kernels mais antigos não possuem alguns recursos necessários para executar contêineres Docker.)</li>\n</ul>\n<p>Como o Docker é uma tecnologia baseada em Linux, para Windows e Mac você primeiro precisa instalar o Docker Toolbox que configurará facilmente um ambiente Docker em seu computador, incluindo uma máquina virtual executando Linux e o Docker Engine. Para obter instruções sobre a instalação e configuração, você pode consultar os guias específicos do sistema operacional:</p>\n<ul>\n<li><a href=\"https://docs.docker.com/docker-for-windows/\" target=\"_blank\" rel=\"noopener\">Introdução ao Docker para Windows</a>.</li>\n<li><a href=\"https://docs.docker.com/docker-for-mac/\" target=\"_blank\" rel=\"noopener\">Introdução ao Docker para Mac</a>.</li>\n<li><a href=\"https://docs.docker.com/engine/installation/linux/\" target=\"_blank\" rel=\"noopener\">Para o Linux em diversas distros</a>.</li>\n</ul>\n<p>Depois de instalar o Docker, você pode seguir este passo a passo para executar e construir suas próprias imagens, criar um repositório no Docker Hub e muito mais:</p>\n<ul>\n<li><a href=\"https://docs.docker.com/engine/getstarted/\" target=\"_blank\" rel=\"noopener\">Comece a usar o Docker</a></li>\n</ul>\n<p>Esse tutorial do docker é muito legal para você dá seus primeiros passos no uso do docker</p>\n<h2>Conclusões</h2>\n<p>Por fim, lembre-se de que essa tecnologia consiste em muito mais do que uma ferramenta de comando para executar contêineres. O Docker é um ecossistema de produtos e serviços orientado para centralizar tudo o que você pode fazer com contêineres - da criação à distribuição, da execução em uma única máquina à orquestração em centenas ou até milhares de servidores. Vale muito a pena você dá uma chance aoo docker, por que o docker ele via lhe auxliar muito no seu desenvolvimento, o docker veio para fica e ele já é o presente e futuro do Devps, então está na hora de você aprender docker</p>\n<h3>Recomendações</h3>\n","date":"2020-08-26T00:00:00.000Z","readingTime":7,"title":"O que é Docker Um Guia básico Passo a Passo para Iniciantes","categories":["devops"],"tags":["docker","o-que-e-docker"],"description":"Para aquelas situações em que os contêineres brilham, você pode estar se perguntando como essa tecnologia é implementada na prática. Então, vamos ver como o Docker cumpre todas essas promessas.","imgArticle":"/thumbnail-article/o-que-e-docker-um-guia-para-iniciante.png","imgHome":"/thumbnail-home/o-que-e-docker-um-guia-para-iniciante.png"},{"slug":"criando-um-app-clone-do-dropbox-com-javascript","content":"<p>Neste super treinamento composto por 15 aulas completas você vai aprender muito JavaScript, de fato vai aprender a organização de código criando uma aplicação inspirada no serviço da Microsoft DropBox. Esse super treinamento está sendo disponibilizado através do <a href=\"https://www.youtube.com/tipscode\" target=\"_blank\" rel=\"noopener\">canal do YouTube TipsCode</a></p>\n<p><img src=\"/uploads/2020/01/javascript.png\" alt=\"criando um app\n\"></p>\n<p>Neste treinamento você vai aprender:</p>\n<ul>\n<li>Manipulações de DOM com JavaScript;</li>\n<li>Criar um BackEnd com NodeJS (Usando Express.js);</li>\n<li>Firebase;</li>\n<li>Adicionar, inserir, lista e remove itens;</li>\n<li>Fazer atualizações em tempo real usando o realdatabase</li>\n<li>Escrever arquivos direto no seu HD usando o NodeJS</li>\n<li>Criar rotas com NodeJS</li>\n<li>Criar Breadcump com JavaScript;</li>\n<li>Criar elemento dinâmicos com JavaScript;</li>\n<li>e muito mais...</li>\n</ul>\n<p>Com esse super treinamento gratuito você irá aprender muito mais muito javascript e o melhor 100% na prática criando app.</p>\n<p>&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/rNaK6oCrXWM&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;/iframe&gt;</p>\n<h2>Material extra</h2>\n<p><a href=\"/minicurso-criando-app-mata-covid-18/\">Criando jogo mata covid-19</a></p>\n","date":"2020-08-23T00:00:00.000Z","readingTime":0,"title":"Criando um APP: Clone do DropBox com JavaScript, NodeJS, Express e Firebase","tags":["criando-um-app","firebase","javascript","nodejs"],"description":"Neste super treinamento composto por 15 aulas completas você vai aprender muito JavaScript, de fato vai aprender a organização de código criando uma aplicação inspirada no serviço da Microsoft DropBox. Esse super treinamento está sendo disponibilizado através do [canal do YouTube TipsCode](https//www.youtube.com/tipscode)","imgArticle":"/thumbnail-article/criando-um-app-clone-do-dropbox.png","imgHome":"/thumbnail-home/criando-um-app-clone-do-dropbox.png"},{"slug":"minicurso-criando-app-mata-covid-18","content":"<p>Neste projeto que está sendo disponibilizado lá no <a href=\"http://www.youtube.com/tipscode\" target=\"_blank\" rel=\"noopener\">canal do youtube TipsCode</a>, vamos desenvolver um jogo do zero usando HTML5, CSS3 e JavaScript.</p>\n<p>As aulas vão ser postadas toda semana lá no canal <a href=\"http://www.youtube.com/tipscode\" target=\"_blank\" rel=\"noopener\">TipsCode no Youtube</a>, então se você está a fim de realmente aprender essas tecnologias já cola lá, se inscreve no canal e ativa o sininho para receber as atualizações das novas aulas.</p>\n<p>&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/63iZlcQVDrQ&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;/iframe&gt;</p>\n","date":"2020-08-19T00:00:00.000Z","readingTime":0,"title":"MiniCurso: Criando App Mata Covid-19 (Você vai aprender muito com esse Jogo","tags":["criando-app","css","javascrip","jogo"],"description":"Neste projeto que está sendo disponibilizado lá no [canal do youtube TipsCode](http//www.youtube.com/tipscode), vamos desenvolver um jogo do zero usando HTML5, CSS3 e JavaScript.","imgArticle":"/thumbnail-article/criando-um-jogo-mata-covid.png","imgHome":"/thumbnail-home/criando-um-jogo-mata-covid.png"},{"slug":"variaveis-css-um-guia-basico-de-como-criar","content":"<p>Durante anos, as variáveis ​​foram um dos recursos do CSS mais comumente solicitados. As variáveis ​​facilitam o gerenciamento de cores, fontes, tamanho e valores de animação e garantem sua consistência em uma base de código.</p>\n<p>Ás variáveis ​​se encaixariam nas regras existentes que governam o CSS e a herança. Agora eles estão disponíveis para desenvolvedores na forma de “propriedades personalizadas” CSS. Caso você queira aprender na prática em formato de video, tenho um super bônus onde te ensino a criar um projeto do zero usando React e neste projeto faço uso na prática de criação de variáveis <a href=\"/bonus1-calculadora\">clique aqui para ver</a>.</p>\n<p>Neste artigo, discutiremos a sintaxe das propriedades personalizadas do CSS. Veremos:</p>\n<ul>\n<li>Como definir propriedades e definir valores padrão para essas propriedades;</li>\n<li>Como as regras de cascata e herança funcionam com propriedades personalizadas</li>\n<li>Como usar propriedades personalizadas com consultas de mídia</li>\n</ul>\n<p>No final, você deve ter uma boa noção de como usar propriedades personalizadas em seus projetos. E se você quiser se aprofunda ainda mais no CSS da uma <a href=\"/programador-fullstack-8-semanas\">olhadinha aqui</a></p>\n<p>Nota: <a href=\"https://caniuse.com/\" target=\"_blank\" rel=\"noopener\">O suporte do navegador</a> para variáveis ​​personalizadas é robusto, existindo nas versões mais recentes de todos os principais navegadores. No entanto, o suporte não está disponível em versões de navegador mais antigas, mas lançadas recentemente, que ainda podem ser amplamente utilizadas pelo público do seu site. As versões do Microsoft Edge anteriores a 15 e do Safari anteriores à versão 9.1 carecem totalmente de suporte. O mesmo é válido para qualquer versão do Internet Explorer. O Microsoft Edge 15 tem suporte, mas também tem alguns bugs documentados.</p>\n<p><img src=\"/uploads/2020/08/css.jpeg\" alt=\"css\"></p>\n<p>700</p>\n<h2>Definindo Propriedade Personalizadas</h2>\n<p>Para definir uma propriedade customizada, selecione um nome e prefixe-o com dois hifens. Qualquer caractere alfanumérico pode fazer parte do nome. Os caracteres hífen <strong>( -)</strong> e sublinhado <strong>( _)</strong> também são permitidos. Uma ampla gama de caracteres Unicode pode fazer parte de um nome de propriedade personalizada, incluindo emojis. Por razões de clareza e legibilidade, use nomes alfanuméricos.</p>\n<p>Aqui está um exemplo:</p>\n<pre><code><span class=\"token operator\">--</span>primarycolor<span class=\"token operator\">:</span> #0ad0f9ff<span class=\"token punctuation\">;</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\"> * Usando a notação de cores #rrggbbaa * </span><span class=\"token regex-delimiter\">/</span></span>\n</code></pre>\n<p>O <strong>--indica</strong> ao analisador CSS que esta é uma propriedade customizada. O valor da propriedade substituirá a propriedade sempre que for usado como uma variável.</p>\n<p>Os nomes das propriedades personalizadas diferenciam maiúsculas de minúsculas . Em outras palavras, -<strong>-primaryColore</strong> -<strong>-primarycolor</strong> são considerados dois nomes de propriedade distintos. Isso é um desvio do CSS tradicional, no qual o caso de propriedade e valor não importa. No entanto, é consistente com a maneira como o <a href=\"/6-recursos-do-ecmascript6/\">ECMAScript</a> trata as variáveis.</p>\n<p>Assim como outras propriedades, como <strong>display</strong> ou <strong>font</strong>, as propriedades personalizadas CSS devem ser definidas em um bloco de declaração. Um padrão comum é definir propriedades personalizadas dentro de um conjunto de regras que usa o elemento psuedo <strong>:root</strong> como um seletor:</p>\n<pre><code><span class=\"token operator\">:</span>root <span class=\"token punctuation\">{</span>\n    <span class=\"token operator\">--</span>primarycolor<span class=\"token operator\">:</span> #0ad0f9ff<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>:root</strong> é um <strong>pseudoelemento</strong> que se refere ao elemento raiz do documento. Para documentos HTML, esse é o elemento <strong>html</strong>. Para documentos <strong>SVG</strong>, é o elemento <strong>svg</strong>. Ao usar <strong>:root</strong>, as propriedades ficam imediatamente disponíveis em todo o documento.</p>\n<h2>Usando Propriedades Personalizadas no CSS</h2>\n<p>Para usar um valor de propriedade personalizada como variável, precisamos usar a função <strong><a href=\"https://developer.mozilla.org/pt-BR/docs/Web/CSS/var\" target=\"_blank\" rel=\"noopener\">var()</a></strong> Por exemplo, se quiséssemos usar nossa <strong>--primarycolor</strong> como uma propriedade personalizada como cor de fundo, usaríamos o seguinte:</p>\n<pre><code>body <span class=\"token punctuation\">{</span>\n    background<span class=\"token operator\">-</span>color<span class=\"token operator\">:</span> <span class=\"token keyword\">var</span><span class=\"token punctuation\">(</span><span class=\"token operator\">--</span>primarycolor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>O valor da nossa propriedade personalizada se tornará o valor calculado da propriedade. background-color</p>\n<p>Até o momento, as propriedades personalizadas só podem ser usadas como variáveis ​​para definir valores para propriedades CSS padrão. Você não pode, por exemplo, armazenar um nome de propriedade como uma variável e então reutilizá-lo. O seguinte CSS não funcionará:</p>\n<pre><code><span class=\"token operator\">:</span>root <span class=\"token punctuation\">{</span>\n    <span class=\"token operator\">--</span>top<span class=\"token operator\">-</span>border<span class=\"token operator\">:</span> border<span class=\"token operator\">-</span>top<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* Can't set a property as custom property's value */</span>\n    <span class=\"token keyword\">var</span><span class=\"token punctuation\">(</span><span class=\"token operator\">--</span>top<span class=\"token operator\">-</span>border<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> 10px solid #bc84d8 <span class=\"token comment\">/* Can't use a variable as a property */</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>Você também não pode armazenar um par propriedade-valor como uma variável e reutilizá-lo. O exemplo a seguir também é inválido:</p>\n<pre><code><span class=\"token operator\">:</span>root <span class=\"token punctuation\">{</span>\n   <span class=\"token operator\">--</span>text<span class=\"token operator\">-</span>color<span class=\"token operator\">:</span> <span class=\"token string\">'color: orange'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* Invalid property value */</span>\n<span class=\"token punctuation\">}</span>\nbody <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span><span class=\"token punctuation\">(</span><span class=\"token operator\">--</span>text<span class=\"token operator\">-</span>color<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* Invalid use of a property */</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>Por último, você também não pode concatenar uma variável como parte de uma string de valor:</p>\n<pre><code><span class=\"token operator\">:</span>root <span class=\"token punctuation\">{</span>\n    <span class=\"token operator\">--</span>base<span class=\"token operator\">-</span>font<span class=\"token operator\">-</span>size<span class=\"token operator\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\nbody <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">font</span><span class=\"token operator\">:</span> <span class=\"token keyword\">var</span><span class=\"token punctuation\">(</span><span class=\"token operator\">--</span>base<span class=\"token operator\">-</span>font<span class=\"token operator\">-</span>size<span class=\"token punctuation\">)</span>px <span class=\"token operator\">/</span> <span class=\"token number\">1.25</span> sans<span class=\"token operator\">-</span>serif<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* Invalid CSS syntax. */</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>As propriedades personalizadas foram projetadas para serem usadas como propriedades que são analisadas de acordo com a especificação CSS. Caso a especificação de extensões CSS seja adotada por fornecedores de navegadores, poderíamos algum dia usar propriedades personalizadas para criar grupos de seletores personalizados ou at-rules personalizados. Por enquanto, no entanto, estamos limitados a usá-los como variáveis ​​para definir valores de propriedade padrão.'</p>\n<h2>Valor Substituto</h2>\n<p>A função <strong>var()</strong> realmente aceita até dois argumentos. O primeiro argumento deve ser um nome de propriedade customizada. O segundo argumento é opcional, mas deve ser um valor de declaração. Este valor de declaração funciona como uma espécie de valor de fallback se o valor da propriedade customizada não tiver sido definido.</p>\n<p>Vamos pegar o seguinte CSS:</p>\n<pre><code><span class=\"token punctuation\">.</span>btn__call<span class=\"token operator\">-</span>to<span class=\"token operator\">-</span>action <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">background</span><span class=\"token operator\">:</span> <span class=\"token keyword\">var</span><span class=\"token punctuation\">(</span><span class=\"token operator\">--</span>accent<span class=\"token operator\">-</span>color<span class=\"token punctuation\">,</span> salmon<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>Se -<strong>-accent-color</strong> for definido - digamos que seu valor seja <strong>#f30-</strong>, a cor de preenchimento de qualquer caminho com um atributo de classe <strong>.btn__call-to-action</strong> terá um preenchimento vermelho-laranja. Se não estiver definido, o preenchimento será salmão.</p>\n<p>Os valores da declaração também podem ser aninhados. Em outras palavras, você pode usar uma variável como valor substituto para a função <strong>var</strong>:</p>\n<pre><code>body <span class=\"token punctuation\">{</span>\n    background<span class=\"token operator\">-</span>color<span class=\"token operator\">:</span> <span class=\"token keyword\">var</span><span class=\"token punctuation\">(</span><span class=\"token operator\">--</span>books<span class=\"token operator\">-</span>bg<span class=\"token punctuation\">,</span> <span class=\"token keyword\">var</span><span class=\"token punctuation\">(</span><span class=\"token operator\">--</span>arts<span class=\"token operator\">-</span>bg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>No CSS acima, se -<strong>-books-bg</strong> definido, a cor de fundo será configurada com o valor da propriedade <strong>--books-bg</strong>. Caso contrário, a cor de fundo será, em vez disso, qualquer valor atribuído --arts-bg. Se nenhum deles for definido, a cor de fundo será o valor inicial da propriedade - neste caso transparent.</p>\n<p>Algo semelhante acontece quando uma propriedade customizada recebe um valor inválido para a propriedade com a qual é usada. Considere o seguinte CSS:</p>\n<pre><code><span class=\"token operator\">:</span>root <span class=\"token punctuation\">{</span>\n    <span class=\"token operator\">--</span>footer<span class=\"token operator\">-</span>link<span class=\"token operator\">-</span>hover<span class=\"token operator\">:</span> #0cg<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span>link <span class=\"token punctuation\">{</span>\n     <span class=\"token literal-property property\">color</span><span class=\"token operator\">:</span> blue<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span>hover <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">color</span><span class=\"token operator\">:</span> red<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\nfooter a<span class=\"token operator\">:</span>hover <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">color</span><span class=\"token operator\">:</span> <span class=\"token keyword\">var</span><span class=\"token punctuation\">(</span><span class=\"token operator\">--</span>footer<span class=\"token operator\">-</span>link<span class=\"token operator\">-</span>hover<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>Neste caso, o valor do --footer-link-hoverimóvel não é uma cor válida. No Microsoft Edge, a cor do estado de foco para links de rodapé será herdada do a:hoverseletor. Na maioria dos outros navegadores, a cor do estado de foco será herdada da cor do texto do bodyelemento.</p>\n<h2>Propriedades Personalizadas</h2>\n<p>As propriedades personalizadas também obedecem às regras da cascata. Seus valores podem ser substituídos por regras subsequentes:</p>\n<pre><code><span class=\"token operator\">:</span>root <span class=\"token punctuation\">{</span>\n    <span class=\"token operator\">--</span>text<span class=\"token operator\">-</span>color<span class=\"token operator\">:</span> #<span class=\"token number\">190736</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* navy */</span>\n<span class=\"token punctuation\">}</span>\nbody <span class=\"token punctuation\">{</span>\n   <span class=\"token operator\">--</span>text<span class=\"token operator\">-</span>color<span class=\"token operator\">:</span> #<span class=\"token number\">333</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">/* Dark gray */</span>\n<span class=\"token punctuation\">}</span>\nbody <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">color</span><span class=\"token operator\">:</span> <span class=\"token keyword\">var</span><span class=\"token punctuation\">(</span><span class=\"token operator\">--</span>text<span class=\"token operator\">-</span>color<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>No exemplo acima, nosso corpo de texto seria cinza escuro. Também podemos redefinir os valores por seletor. Vamos adicionar mais algumas regras a este CSS:</p>\n<pre><code><span class=\"token operator\">:</span>root <span class=\"token punctuation\">{</span>\n    <span class=\"token operator\">--</span>text<span class=\"token operator\">-</span>color<span class=\"token operator\">:</span> #<span class=\"token number\">190736</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* navy */</span>\n<span class=\"token punctuation\">}</span>\nbody <span class=\"token punctuation\">{</span>\n   <span class=\"token operator\">--</span>text<span class=\"token operator\">-</span>color<span class=\"token operator\">:</span> #<span class=\"token number\">333</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">/* Dark gray */</span>\n<span class=\"token punctuation\">}</span>\np <span class=\"token punctuation\">{</span>\n  <span class=\"token operator\">--</span>text<span class=\"token operator\">-</span>color<span class=\"token operator\">:</span> #f60<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* Orange */</span>\n<span class=\"token punctuation\">}</span>\nbody <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">color</span><span class=\"token operator\">:</span> <span class=\"token keyword\">var</span><span class=\"token punctuation\">(</span><span class=\"token operator\">--</span>text<span class=\"token operator\">-</span>color<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\np <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">color</span><span class=\"token operator\">:</span> <span class=\"token keyword\">var</span><span class=\"token punctuation\">(</span><span class=\"token operator\">--</span>text<span class=\"token operator\">-</span>color<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>Nesse caso, qualquer texto envolto a tags <strong>&lt;p&gt;</strong> será da cor laranja. Mas o texto dentro da <strong>&lt;div&gt;</strong> ou em outros elementos ainda seria cinza escuro.</p>\n<p>Também é possível definir o valor de uma propriedade personalizada usando o atributo <strong>style</strong> - por exemplo, <strong>style=&quot;--brand-color: #9a09af&quot;</strong>- que pode ser útil em uma arquitetura de front-end baseada em componente.</p>\n<h2>Recomendados</h2>\n","date":"2020-08-16T00:00:00.000Z","readingTime":8,"title":"Variáveis CSS: Como Criar as Propriedades Personalizadas","categories":["css"],"tags":["como-criar","css","variaveis"],"description":"Durante anos, as variáveis ​​foram um dos recursos do CSS mais comumente solicitados. As variáveis ​​facilitam o gerenciamento de cores, fontes, tamanho e valores de animação e garantem sua consistência em uma base de código.","imgArticle":"/thumbnail-article/variaveis-css.png","imgHome":"/thumbnail-home/variaveis-css.png"},{"slug":"android-studio-esta-dificil-instalar-o-emulator-alternativa-para-preparando-ambiente-para-criar-aplicativos-com-react-native","content":"<p>Você fez toda a instalação necessária para rodar o <strong>android studio emulator</strong> e não está funcionando? Está com dando tela preta? Não inicia? Sua placa mãe não suporta <strong>emuladores</strong>? Então você está no artigo certo, vou lhe mostra uma solução <strong>alternativa</strong> e com ZERO configurações. Esse artigo vai lhe ensinar a preparar o ambiente de desenvolvimento para criar suas aplicação com React Native.</p>\n<h2>O que é Android Studio?</h2>\n<p><img src=\"/uploads/2020/08/Android-studio2-1.png\" alt=\"Android Studio\"></p>\n<p><a href=\"https://developer.android.com/studio\" target=\"_blank\" rel=\"noopener\">Android Studio</a> é um ambiente de desenvolvimento integrado para desenvolver para a plataforma Android. Foi anunciado em 16 de Maio de 2013 na conferência Google I/O. Android Studio é disponibilizado gratuitamente sob a Licença Apache 2.0</p>\n<h2>O que é React Native?</h2>\n<p><img src=\"/uploads/2020/08/React-native-300x185.png\" alt=\"android studio\"></p>\n<p><a href=\"https://reactnative.dev/\" target=\"_blank\" rel=\"noopener\">React Native</a> é uma biblioteca Javascript criada pelo Facebook. É usada para desenvolver aplicativos para os sistemas Android e IOS de forma nativa</p>\n<h2>Android Emlator</h2>\n<p>O <a href=\"https://developer.android.com/studio/run/emulator?hl=en\" target=\"_blank\" rel=\"noopener\">Android Emulator</a> simula dispositivos Android no seu computador. Assim, você pode testar o aplicativo em diversos dispositivos e níveis de API do Android, sem precisar ter cada dispositivo físico.</p>\n<p>O emulador oferece quase todos os recursos de um dispositivo Android real. É possível simular o recebimento de chamadas telefônicas e mensagens de texto, especificar o local do dispositivo, simular diferentes velocidades de rede, simular rotação e outros sensores de hardware, acessar a Google Play Store e muito mais.</p>\n<p>O teste do app no emulador é, de certa forma, mais rápido e mais fácil do que fazer isso em um dispositivo físico. Por exemplo, você pode transferir dados mais rapidamente para o emulador do que para um dispositivo conectado via USB.</p>\n<h2>Preparando Ambiente sem o Android Emulator</h2>\n<p>A própria <a href=\"https://reactnative.dev/docs/environment-setup\" target=\"_blank\" rel=\"noopener\">documentação do React Native</a> tem um guia ensinando como você deve fazer, mas sentir falta de alguns detalhes que tiver que seguir por si só, por isso estou escrevendo esse artigo.</p>\n<p><strong>Passo 01</strong>: Faça o download do NodeJS na Versão LTS 12 (quando esse artigo está sendo escrito é a versão 12, isso poderá mudar conforme o tempo). Caso não saiba instalar o node, aqui no blog tenho um artigo ensinando, <a href=\"/instalando-nodejs-no-manjaro/\">clique aqui para ver</a></p>\n<p><strong>Passo 02</strong>: Instale o pacote Expo com o seguinte comando</p>\n<pre><code>npm install <span class=\"token operator\">-</span>g expo<span class=\"token operator\">-</span>cli\n</code></pre>\n<p><strong>Passo 03</strong>: Acessa o site da plataforma <a href=\"https://expo.io\" target=\"_blank\" rel=\"noopener\">expo</a> e crie sua conta</p>\n<p><img src=\"/uploads/2020/08/criando-conta-expo-1024x550.png\" alt=\"android studio\"></p>\n<p><strong>Passo 04</strong>: Faça o Download do Emulador <a href=\"https://pt.bignox.com/\" target=\"_blank\" rel=\"noopener\">NoxPlayer</a> a instalação é muito simples, faça o download e é só next, next (No Windows, caso você use Linus, procura qualquer emulador para android que não afetará em nada esse tutorial)</p>\n<p><img src=\"/uploads/2020/08/NoxPlayer-1024x524.jpg\" alt=\"android studio\"></p>\n<p><strong>Passo 05</strong>: Agora abra o terminal (Linux, Windows ou Mac) e digite o seguinte comando</p>\n<pre><code>expo init testeProjeto <span class=\"token comment\">// criando o projeto</span>\ncd testeProjeto  <span class=\"token comment\">// Aqui você coloca o nome do projeto que você criou ok.</span>\nyarn start <span class=\"token comment\">// esse comando vai executar o projeto</span>\n</code></pre>\n<p><img src=\"/uploads/2020/08/criando-projeto-1024x561.png\" alt=\"\"></p>\n<p>Quando você executar o <strong>yarn start</strong>, caso você não tenha confirmado a sua conta criada no expo ele vai lhe mostrar a opção de enviar o link de confirmação do cadastro do expo.</p>\n<p><strong>Passo 06</strong>: Abra o NoxPlayer e faça todo o procedimento de abrir a loja de aplicativo, baixe o app do expo e faça o login no app.</p>\n<p><strong>Passo 07</strong>: Agora veja as imagens para você conseguir finalizar tudo.</p>\n<p><img src=\"/uploads/2020/08/passos123-1024x548.png\" alt=\"\"></p>\n<p><img src=\"/uploads/2020/08/passos-4444-1024x482.png\" alt=\"\"></p>\n<p>Agora você tem um emulador que está rodando o seu projeto com React Native sem precisa instalar o Java, Python e Android Studio, veja que é muito simples, pois o emulador do android studio em vários casos não funciona.</p>\n<p><strong>Nota: O emulador deve está rodando na mesma rede ou caso você queira utilizar no seu celular a rede tem que ser a mesma.</strong></p>\n<h3>Recomendações</h3>\n","date":"2020-08-13T00:00:00.000Z","readingTime":3,"title":"Android Studio está difícil instalar o emulator? Alternativa para Preparando ambiente para criar aplicativos com React Native","categories":["react-native"],"tags":["android-studio","erro","react","react-native"],"description":"Você fez toda a instalação necessária para rodar o android studio emulator e não está funcionando? Está com dando tela preta? Não inicia? Sua placa mãe não suporta emuladores? Então você está no artigo certo, vou lhe mostra uma solução alternativa e com ZERO configurações. Esse artigo vai lhe ensinar a preparar o ambiente de desenvolvimento para criar suas aplicação com React Native.","imgArticle":"/thumbnail-article/android-studio-esta-dificil-instalar-o-emulator.png","imgHome":"/thumbnail-home/android-studio-esta-dificil-instalar-o-emulator.png"},{"slug":"3-dicas-para-deixa-seu-site-mais-rapido","content":"<p>A otimização de sites é um conjunto de técnicas, tanto do lado do servidor quanto do lado do cliente, que visam acelerar o tempo de carregamento dos sites e renderizar no navegador para uma melhor experiência do usuário.</p>\n<p>Hoje, os visitantes estão acostumados ao imediatismo e à reatividade típicos de aplicativos nativos. Eles esperam que uma página da web seja carregada em 1000ms . Se demorar muito mais do que isso, é provável que eles deixem o site.</p>\n<p>Os mecanismos de pesquisa certamente alcançaram essa tendência e, de várias maneiras, contribuíram para ela. De fato, o Google usa a velocidade da página como um fator de classificação para sites em pesquisas em computadores há um tempo. <a href=\"https://webmasters.googleblog.com/2018/01/using-page-speed-in-mobile-search.html\" target=\"_blank\" rel=\"noopener\">O Google anunciou</a> que, a partir de julho de 2018, as pesquisas para dispositivos móveis também serão super importantes para alcançar as primeiras posições em sua lista de resultados.</p>\n<p>Muitas vezes, o <a href=\"/bulma-css-guia-basico-para-iniciante/\">Bulma</a> é criticado por adicionar inchaços desnecessários aos sites. Portanto, se você usar essa popular biblioteca de interface do usuário de front-end em seu projeto, preste atenção extra ao peso e velocidade da página.</p>\n<p>Neste artigo, vou seguir três etapas de otimização de front-end que você pode seguir para garantir que seu site baseado no Bootstrap seja renderizado rapidamente e otimizado.</p>\n<p><img src=\"/uploads/2020/08/1455318-1.png\" alt=\"site\n\"></p>\n<p>site</p>\n<h2>01 - Faça o Download apenas do necessário</h2>\n<p>Se você decidir trabalhar com o pacote de download pré - compilado do Bootstrap, deve realmente pensar seriamente em quais partes da biblioteca realmente precisa.</p>\n<p>A pasta de download contém a biblioteca CSS completa ( bootstrap.csse bootstrap.min.css) e a biblioteca de componentes JavaScript com todas as suas dependências, exceto jQuery ( bootstrap.bundle.jse bootstrap.bundle.min.js), além de vários arquivos CSS independentes que contêm o código necessário para partes específicas desse popular kit de interface do usuário.</p>\n<p>Se você só precisa de uma boa redefinição de CSS para o seu projeto, basta usar bootstrap-reboot.min.css. Se você só precisa de um sistema de grade flexível e fácil de usar, escolha bootstrap-grid.min.css. Não é necessário fazer o download de toda a estrutura. Se, por outro lado, você sabe que vai usar tudo na biblioteca, pelo menos, certifique-se de incluir a versão reduzida.</p>\n<p>Da mesma forma com o código JavaScript. Se você sabe que não terá menus suspensos, popovers e dicas de ferramentas em seu projeto, use-o em bootstrap.min.jsvez de bootstrap.bundle.min.jsnão precisar incluir o Popper.js .</p>\n<h2>02 - Opte pela origem e não pacotes de download pré-compilado</h2>\n<p>Tanto quanto a versão mais recente do Bootstrap permite selecionar partes dele para incluir no seu projeto, os arquivos pré-compilados ainda podem conter itens que você realmente não precisa.</p>\n<p>Os navegadores ainda precisam fazer o download e processar o código não utilizado, o que pode afetar o desempenho do site, especialmente em conexões de rede lentas.</p>\n<p>Uma idéia melhor seria fazer o download do código fonte do Bootstrap , porque:</p>\n<ul>\n<li>você poderá incluir exatamente os componentes necessários no seu projeto;</li>\n<li>personalizar qualquer parte da biblioteca se torna mais limpo e eficiente, sem necessidade de substituir estilos repetidamente;</li>\n<li>a folha de estilo que acaba em produção geralmente é mais enxuta.</li>\n</ul>\n<h2>03 - Use técnicas comprovadas</h2>\n<p>Além dos pontos acima, a otimização de um site construído sobre o Bootstrap para desempenho ainda precisa incorporar técnicas de desempenho de front-end, como qualquer outro site.</p>\n<p>Abaixo estão apenas alguns dos fatores críticos que você deve prestar atenção para otimizar o front-end do seu site.</p>\n<h3>CSS e JavaScript</h3>\n<p>Cada caractere no seu código soma o peso final da página da web. Escrever códigos CSS e <a href=\"https://tipscode.tech/\" target=\"_blank\" rel=\"noopener\">JavaScript</a> limpos e concisos, mantendo-os legíveis nem sempre é fácil. No entanto, deve ser algo a ser buscado em todos os projetos.</p>\n<p>Boas práticas de CSS incluem livrar-se de seletores não utilizados, código duplicado e regras excessivamente aninhadas. É bom manter seu código bem organizado no início de um projeto. Por exemplo, o uso de guias de estilo pode realmente beneficiar seu processo de desenvolvimento e a qualidade do seu código.</p>\n<p>Além disso, existem ótimas ferramentas disponíveis para ajudá-lo a limpar seu código. Um linter como CSS Lint e JSLint pode verificar seu documento quanto a erros de sintaxe, padrões de codificação ineficientes, código não utilizado, etc.</p>\n<h3>Minimize e concatene o código</h3>\n<p>Uma importante etapa de otimização é limitar o número de solicitações HTTP que um site precisa fazer para renderizar seu conteúdo. Cada ida e volta ao servidor e de volta para buscar recursos leva tempo, impactando negativamente a experiência do usuário.</p>\n<p>Minimizar (ou seja, remover comentários e espaços em branco do documento) e concatenar arquivos CSS e JavaScript agora se tornaram uma prática consolidada que visa manter o tamanho do arquivo pequeno e diminuir o número de solicitações HTTP.</p>\n<p>Se você deseja aprofundar, como otimizar CSS e JS para sites mais rápidos, de Gary Stevens, é uma ótima leitura.</p>\n<h3>Cuidado com o tamanho dos arquivos de imagens</h3>\n<p>A parte mais pesada de uma página da web geralmente é representada por arquivos de imagem, mas também os arquivos de áudio e vídeo fazem sua parte. A otimização de recursos visuais é, portanto, crucial para o desempenho do site.</p>\n<p>Fazer isso envolve dois aspectos:</p>\n<ul>\n<li>Certifique-se de usar o formato de imagem correto para o trabalho em questão;</li>\n<li>Espremer o excesso de bytes de seus ativos antes de enviá-los para produção. Existem ótimas ferramentas por aí que podem ajudá-lo. Confira ferramentas on-line como o TinyPNG para imagens rasterizadas (PNG, JPG, etc.) e o SSVGOMG de Jake Archibald para otimização SVG. Além disso, considere as ferramentas que você pode instalar localmente como o seu executor de tarefas favorito (Grunt, Gulp, etc.).</li>\n</ul>\n<h2>Conclusões</h2>\n<p>Um site de renderização rápida é um fator essencial para determinar a ótima experiência do usuário nos sites. Isso se torna ainda mais crucial quando se trata de avaliar a experiência do usuário da Web em dispositivos móveis.</p>\n<p>Neste artigo, listei uma série de técnicas que desempenham um papel na otimização de um site Bootstrap para desempenho do ponto de vista do desenvolvimento front-end.</p>\n<p>Quais são as suas técnicas de otimização de front-end para um site Bootstrap de carregamento rápido? Deixe-me saber nos comentários!</p>\n<h3>Recomendações</h3>\n","date":"2020-08-09T00:00:00.000Z","readingTime":4,"title":"3 dicas Poderosas para deixar seu site mais rápido","categories":["desenvolvimento-web"],"tags":["3-dicas","seu-site-mais-rapido","site"],"description":"A otimização de sites é um conjunto de técnicas, tanto do lado do servidor quanto do lado do cliente, que visam acelerar o tempo de carregamento dos sites e renderizar no navegador para uma melhor experiência do usuário.","imgArticle":"/thumbnail-article/3-dicas-para-deixar-seu-site-mais-rapido.png","imgHome":"/thumbnail-home/3-dicas-para-deixar-seu-site-mais-rapido.png"},{"slug":"css-viewport-unidade-de-isualizacoes-do-css","content":"<p>As unidades de <strong>viewport</strong> foram introduzidas no <strong>CSS</strong> faz algum tempo. Eles são realmente &quot;unidades de comprimento responsivo&quot;, no sentido de que seu valor muda toda vez que o navegador é redimensionado. Se você já ouviu falar sobre essas unidades antes, mas nunca aprendeu sobre elas em detalhes, este artigo pode ajudá-lo.</p>\n<h2>As Unidades do CSS</h2>\n<p><img src=\"/uploads/2020/04/perguntas-png-2.png\" alt=\"css\"></p>\n<p>Figura 01: CSS</p>\n<p>Existem quatro unidades baseadas em <strong>viewport</strong> no <strong>CSS</strong>. Estes são <strong>vh</strong>, <strong>vw</strong>, <strong>vmin</strong> e <strong>vmax</strong>.</p>\n<p><strong>Altura da janela de visualização (vh)</strong>. Esta unidade é baseada na altura da janela de visualização. Um valor <strong>1vh</strong> é igual a <strong>1%</strong> da altura da janela de exibição.</p>\n<p><strong>Largura da janela de visualização (vw)</strong>. Esta unidade é baseada na largura da janela de visualização. Um valor <strong>1vw</strong> é igual a 1% da largura da janela de exibição.</p>\n<p><strong>Mínimo de janela de visualização (vmin)</strong>. Esta unidade é baseada na dimensão menor do <strong>viewport</strong> . Se a altura do <strong>viewport</strong> for menor que a largura, o valor de <strong>1vmin</strong> será igual a <strong>1%</strong> da altura do <strong>viewport</strong>. Da mesma forma, se a largura do <strong>viewport</strong> for menor que a altura, o valor de <strong>1vmin</strong> será igual a <strong>1%</strong> da largura do <strong>viewport</strong>.</p>\n<p><strong>Máximo de janela de visualização (vmax)</strong>. Esta unidade é baseada na dimensão maior do <strong>viewport</strong>. Se a altura do <strong>viewport</strong> for maior que a largura, o valor de <strong>1vmax</strong> será igual a <strong>1%</strong> da altura do <strong>viewport</strong>. Da mesma forma, se a largura do <a href=\"https://www.eclipse.org/downloads/\" target=\"_blank\" rel=\"noopener\"><strong>viewport</strong></a> for maior que a altura, o valor de <strong>1vmax</strong> será igual a <strong>1%</strong> da largura do <strong>viewport</strong>.</p>\n<h3>Ebook Guia Completo HTML: Descubra o Poder o Verdadeira do HTML5</h3>\n<p>Baixe agora mesmo esse super livro digital com mais de 100 páginas de puro conteúdo sobre HTML, realmente muito completo seja você iniciante ou avançado, tenho certeza que você vai aprender algo novo. Tudo isso Grátis, então clicar no botão aqui em baixo e pegar agora seu ebook e descubra o verdadeiro poder do HTML</p>\n<p><a href=\"/ebook-gratuito-html\">Baixa agora</a></p>\n<p>Vamos ver qual será o valor dessas unidades em diferentes situações:</p>\n<p>Se a janela de visualização tiver <strong>1200px</strong> de largura e <strong>1000px</strong> de altura, o valor de <strong>10vws</strong> erá <strong>120px</strong> e o valor de <strong>100px 10vh</strong>. Como a largura da viewport é maior que sua altura, o valor de <strong>10vmax</strong> será <strong>120px</strong> e o valor de <strong>10vmin 100px</strong>.</p>\n<p>Se o dispositivo agora for girado para que a janela de visualização fique com <strong>1000px</strong> de largura e <strong>1200px</strong> de altura, o valor <strong>10vh</strong> será <strong>120px</strong> e o valor <strong>10vw</strong> é de <strong>100px</strong>. Curiosamente, o valor de <strong>10vmax</strong> ainda será <strong>120px</strong> porque agora será determinado com base na altura da janela de visualização. Da mesma forma, o valor de <strong>10vmin</strong> ainda será <strong>100px</strong>.</p>\n<p>Se você redimensionar a janela do navegador para que a janela de visualização se torne <strong>1000px</strong> de largura e <strong>800px</strong> de altura, o valor de <strong>10vh</strong> se tornará <strong>80px</strong> e o valor de <strong>10vw 100px</strong>. Da mesma forma, o valor de <strong>10vmaxs</strong> e tornará <a href=\"https://www.eclipse.org/downloads/\" target=\"_blank\" rel=\"noopener\">100px</a> e o valor de <strong>10vmin</strong> se tornará <strong>80px</strong>.</p>\n<p>Nesse ponto, as unidades de janela de visualização podem parecer semelhantes às porcentagens. No entanto, eles são muito diferentes. No caso de porcentagens, a largura ou a altura do elemento filho são determinadas em relação ao seu pai. Aqui está um exemplo:</p>\n<pre><code><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span> <span class=\"token constant\">HTML</span> <span class=\"token operator\">--</span><span class=\"token operator\">></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>main</span><span class=\"token punctuation\">></span></span>\n     <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>elemento-pai<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n         <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>elemento-filho<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n     <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n          \n     <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>viewport-pai<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n         <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>viewport-filho<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>main</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token comment\">/* CSS */</span>\n<span class=\"token operator\">*</span> <span class=\"token punctuation\">{</span>\n   box<span class=\"token operator\">-</span>sizing<span class=\"token operator\">:</span> border<span class=\"token operator\">-</span>box<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">.</span>elemento<span class=\"token operator\">-</span>pai <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">width</span><span class=\"token operator\">:</span> <span class=\"token number\">50</span><span class=\"token operator\">%</span><span class=\"token punctuation\">;</span>\n    <span class=\"token literal-property property\">height</span><span class=\"token operator\">:</span> 300px<span class=\"token punctuation\">;</span>\n    <span class=\"token literal-property property\">background</span><span class=\"token operator\">:</span> orange<span class=\"token punctuation\">;</span>\n    padding<span class=\"token operator\">-</span>top<span class=\"token operator\">:</span> 75px<span class=\"token punctuation\">;</span>\n    margin<span class=\"token operator\">-</span>bottom<span class=\"token operator\">:</span> 75px<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">.</span>elemento<span class=\"token operator\">-</span>filho <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">width</span><span class=\"token operator\">:</span> <span class=\"token number\">80</span><span class=\"token operator\">%</span><span class=\"token punctuation\">;</span>\n    <span class=\"token literal-property property\">height</span><span class=\"token operator\">:</span> 150px<span class=\"token punctuation\">;</span>\n    <span class=\"token literal-property property\">background</span><span class=\"token operator\">:</span> <span class=\"token function\">rgba</span><span class=\"token punctuation\">(</span><span class=\"token number\">125</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">.</span>viewport<span class=\"token operator\">-</span>pai <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">width</span><span class=\"token operator\">:</span> <span class=\"token number\">50</span><span class=\"token operator\">%</span><span class=\"token punctuation\">;</span>\n    <span class=\"token literal-property property\">height</span><span class=\"token operator\">:</span> 300px<span class=\"token punctuation\">;</span>\n    <span class=\"token literal-property property\">background</span><span class=\"token operator\">:</span> orange<span class=\"token punctuation\">;</span>\n    padding<span class=\"token operator\">-</span>top<span class=\"token operator\">:</span> 75px<span class=\"token punctuation\">;</span>\n    margin<span class=\"token operator\">-</span>bottom<span class=\"token operator\">:</span> 75px<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">.</span>viewport<span class=\"token operator\">-</span>filho <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">width</span><span class=\"token operator\">:</span> 80vw<span class=\"token punctuation\">;</span>\n    <span class=\"token literal-property property\">height</span><span class=\"token operator\">:</span> 150px<span class=\"token punctuation\">;</span>\n    <span class=\"token literal-property property\">background</span><span class=\"token operator\">:</span> <span class=\"token function\">rgba</span><span class=\"token punctuation\">(</span><span class=\"token number\">125</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>Resultado no Navegador</p>\n<p><img src=\"/uploads/2020/08/exemplo-navegador-css-viewport-1024x468.png\" alt=\"css\"></p>\n<p>Resultado browser</p>\n<h2>Aplicações das Unidades Viewport</h2>\n<p>Como essas unidades são baseadas nas dimensões da janela de visualização, é muito conveniente usá-las em situações em que a largura, altura ou tamanho dos elementos precisam ser configurados em relação à janela de visualização.</p>\n<h2>Imagens de fundo em tela cheia ou seções</h2>\n<p>É muito comum definir imagens de fundo em elementos que cobrem totalmente a tela. Da mesma forma, convém criar um site em que cada seção individual sobre um produto ou serviço tenha que cobrir a tela inteira. Nesses casos, você pode definir a largura dos respectivos elementos como iguais a <strong>100%</strong> e a altura deles igual a <strong>100vh</strong>.</p>\n<p>Como exemplo, use o seguinte HTML:</p>\n<pre><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>tela-cheia<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>Imagem <span class=\"token number\">01</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n</code></pre>\n<p>Você pode obter uma seção de imagem de fundo de largura total usando o CSS abaixo:</p>\n<pre><code><span class=\"token operator\">*</span> <span class=\"token punctuation\">{</span>\n   box<span class=\"token operator\">-</span>sizing<span class=\"token operator\">:</span> border<span class=\"token operator\">-</span>box<span class=\"token punctuation\">;</span>\n   <span class=\"token literal-property property\">margin</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nbody <span class=\"token punctuation\">{</span>\n   text<span class=\"token operator\">-</span>align<span class=\"token operator\">:</span> center<span class=\"token punctuation\">;</span>\n   font<span class=\"token operator\">-</span>family<span class=\"token operator\">:</span> <span class=\"token string\">'arial'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\np <span class=\"token punctuation\">{</span>\n   font<span class=\"token operator\">-</span>size<span class=\"token operator\">:</span> 6em<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">.</span>tela<span class=\"token operator\">-</span>cheia <span class=\"token punctuation\">{</span>\n   <span class=\"token literal-property property\">width</span><span class=\"token operator\">:</span> <span class=\"token number\">100</span><span class=\"token operator\">%</span><span class=\"token punctuation\">;</span>\n   <span class=\"token literal-property property\">height</span><span class=\"token operator\">:</span> 100vh<span class=\"token punctuation\">;</span>\n   <span class=\"token literal-property property\">padding</span><span class=\"token operator\">:</span> 40vh<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">.</span>imagem1 <span class=\"token punctuation\">{</span>\n   <span class=\"token literal-property property\">background</span><span class=\"token operator\">:</span> <span class=\"token function\">url</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./papel-de-fundo.jpg'</span><span class=\"token punctuation\">)</span> center<span class=\"token operator\">/</span>cover<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><img src=\"/uploads/2020/08/exemplo-22-1024x472.jpg\" alt=\"css\"></p>\n<p>Figura 02 - Resultado do Browser</p>\n<h2>Criando Títulos</h2>\n<h3>Ebook Guia Completo HTML: Descubra o Poder o Verdadeira do HTML5</h3>\n<p>Baixe agora mesmo esse super livro digital com mais de 100 páginas de puro conteúdo sobre HTML, realmente muito completo seja você iniciante ou avançado, tenho certeza que você vai aprender algo novo. Tudo isso Grátis, então clicar no botão aqui em baixo e pegar agora seu ebook e descubra o verdadeiro poder do HTML</p>\n<p><a href=\"/ebook-gratuito-html\">Baixa agora</a></p>\n<p>Como mencionei anteriormente, o valor das unidades do viewport muda diretamente com base no tamanho da viewport. Isso significa que, se você usar unidades de janela de visualização para definir font-size dos seus títulos, elas se encaixam perfeitamente na tela., também é possível fazer isso com <a href=\"/flexbox-como-centralizar-elementos/\">FlexBox</a> Sempre que a largura da janela de visualização mudar, o navegador também dimensionará automaticamente o texto do título adequadamente. A única coisa que você precisa fazer é descobrir o valor inicial correto para o font-size em termos de unidades de viewport.</p>\n<p>Um grande problema com a configuração font-size dessa maneira é que o tamanho do texto variará bastante, dependendo da janela de visualização . Por exemplo, um font-size de <strong>8vw</strong> calculará para cerca de <strong>96px</strong> para uma largura de viewport de <strong>1200px</strong>, <strong>33px</strong> para uma largura de viewport de 400px e 154px para uma largura de viewport de 1920px. Isso pode tornar a fonte grande ou pequena demais para ser legível corretamente. Você pode ler mais sobre como dimensionar corretamente o texto usando uma combinação de unidades, juntamente com a função <a href=\"https://developer.mozilla.org/en/docs/Web/CSS/calc\" target=\"_blank\" rel=\"noopener\">calc()</a>, neste excelente artigo sobre tipografia baseada em unidade de janela de visualização.</p>\n<pre><code><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span> <span class=\"token constant\">HTML</span> <span class=\"token operator\">--</span><span class=\"token operator\">></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span> Titulo Principal <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span><span class=\"token punctuation\">></span></span> SubTitulo<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token comment\">/* CSS */</span>\n<span class=\"token operator\">*</span> <span class=\"token punctuation\">{</span>\n     box<span class=\"token operator\">-</span>sizing<span class=\"token operator\">:</span> border<span class=\"token operator\">-</span>box<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nbody <span class=\"token punctuation\">{</span>\n    font<span class=\"token operator\">-</span>family<span class=\"token operator\">:</span> <span class=\"token string\">'Lato'</span><span class=\"token punctuation\">;</span>\n    text<span class=\"token operator\">-</span>align<span class=\"token operator\">:</span> center<span class=\"token punctuation\">;</span>\n    <span class=\"token literal-property property\">margin</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nh1 <span class=\"token punctuation\">{</span>\n   font<span class=\"token operator\">-</span>size<span class=\"token operator\">:</span> <span class=\"token function\">calc</span><span class=\"token punctuation\">(</span>2em <span class=\"token operator\">+</span> 2vw<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nh2 <span class=\"token punctuation\">{</span>\n  font<span class=\"token operator\">-</span>size<span class=\"token operator\">:</span> <span class=\"token function\">calc</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">.</span>5em <span class=\"token operator\">+</span> <span class=\"token number\">0</span><span class=\"token punctuation\">.</span>75vw<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><img src=\"/uploads/2020/08/titulos-1024x428.png\" alt=\"\"></p>\n<h2>Centralize os Elementos</h2>\n<p>As unidades de viewport podem ser muito úteis quando você deseja colocar um elemento exatamente no centro da tela do usuário. Se você conhece a altura do elemento, basta definir o valor superior e inferior da propriedade margin para ser igual a [(100 - height)/2]vh:</p>\n<pre><code><span class=\"token comment\">/* CSS */</span>\n<span class=\"token operator\">*</span> <span class=\"token punctuation\">{</span>\n    box<span class=\"token operator\">-</span>sizing<span class=\"token operator\">:</span> border<span class=\"token operator\">-</span>box<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nbody <span class=\"token punctuation\">{</span>\n    font<span class=\"token operator\">-</span>family<span class=\"token operator\">:</span> <span class=\"token string\">'Lato'</span><span class=\"token punctuation\">;</span>\n    text<span class=\"token operator\">-</span>align<span class=\"token operator\">:</span> center<span class=\"token punctuation\">;</span>\n    <span class=\"token literal-property property\">margin</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">.</span>centralize <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">width</span><span class=\"token operator\">:</span> 80vw<span class=\"token punctuation\">;</span>\n    <span class=\"token literal-property property\">height</span><span class=\"token operator\">:</span> 70vh<span class=\"token punctuation\">;</span>\n    <span class=\"token literal-property property\">margin</span><span class=\"token operator\">:</span> 15vh auto<span class=\"token punctuation\">;</span>\n    <span class=\"token literal-property property\">background</span><span class=\"token operator\">:</span> brown<span class=\"token punctuation\">;</span>\n    padding<span class=\"token operator\">-</span>top<span class=\"token operator\">:</span> 20px<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nh1 <span class=\"token punctuation\">{</span>\n    font<span class=\"token operator\">-</span>size<span class=\"token operator\">:</span> 4em<span class=\"token punctuation\">;</span>\n    <span class=\"token literal-property property\">color</span><span class=\"token operator\">:</span> white<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span> <span class=\"token constant\">HTML</span> <span class=\"token operator\">--</span><span class=\"token operator\">></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>centralize<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span> Titulo Principal <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span>\n</code></pre>\n<p><img src=\"/uploads/2020/08/titulo-principal-1024x440.png\" alt=\"\"></p>\n<p>Atualmente, no entanto, podemos usar o <a href=\"/flexbox-como-centralizar-elementos/\">Flexbox</a> ou <a href=\"/css-grid-tudo-que-voce-nao-aprendeu-parte-1/\">CSS Grid</a> para centralizar elementos, tanto na vertical quanto na horizontal.</p>\n<h2>Pense um pouco sobre</h2>\n<p>Se você decidir usar unidades de janela de visualização em seus projetos, há algumas coisas que você deve ter em mente.</p>\n<p>Cuidado ao definir a largura de um elemento usando as unidades de janela de visualização. Isso ocorre quando a overflowpropriedade no elemento raiz é definida como auto, os navegadores assumem que as barras de rolagem não existem. Isso tornará os elementos um pouco mais amplos do que você espera. Considere a marcação com quatro elementos div com o seguinte estilo:</p>\n<pre><code><span class=\"token comment\">/*CSS*/</span>\n<span class=\"token operator\">*</span> <span class=\"token punctuation\">{</span>\n            box<span class=\"token operator\">-</span>sizing<span class=\"token operator\">:</span> border<span class=\"token operator\">-</span>box<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        body <span class=\"token punctuation\">{</span>\n            font<span class=\"token operator\">-</span>family<span class=\"token operator\">:</span> <span class=\"token string\">'Lato'</span><span class=\"token punctuation\">;</span>\n            text<span class=\"token operator\">-</span>align<span class=\"token operator\">:</span> center<span class=\"token punctuation\">;</span>\n            <span class=\"token literal-property property\">margin</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        div <span class=\"token punctuation\">{</span>\n            <span class=\"token literal-property property\">height</span><span class=\"token operator\">:</span> 50vh<span class=\"token punctuation\">;</span>\n            <span class=\"token literal-property property\">width</span><span class=\"token operator\">:</span> 50vw<span class=\"token punctuation\">;</span>\n            <span class=\"token literal-property property\">float</span><span class=\"token operator\">:</span> left<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token punctuation\">.</span>a <span class=\"token punctuation\">{</span>\n            <span class=\"token literal-property property\">background</span><span class=\"token operator\">:</span> #ffddbb<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token punctuation\">.</span>b <span class=\"token punctuation\">{</span>\n            <span class=\"token literal-property property\">background</span><span class=\"token operator\">:</span> #ddbb99<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token punctuation\">.</span>c <span class=\"token punctuation\">{</span>\n            <span class=\"token literal-property property\">background</span><span class=\"token operator\">:</span> #bb9977<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token punctuation\">.</span>d <span class=\"token punctuation\">{</span>\n            <span class=\"token literal-property property\">background</span><span class=\"token operator\">:</span> #<span class=\"token number\">997755</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span> <span class=\"token constant\">HTML</span> <span class=\"token operator\">--</span><span class=\"token operator\">></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>a<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>b<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>c<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>d<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n</code></pre>\n<p><img src=\"/uploads/2020/08/navega22222-1024x470.png\" alt=\"\"></p>\n<p>Definir a largura das &lt;<a href=\"/flexbox-como-centralizar-elementos/\">divs</a>&gt; de <strong>50vw</strong> para <strong>50%</strong> resolverá esse problema. A conclusão é que você deve usar porcentagens ao definir a largura dos elementos do bloco, para que as barras de rolagem não interfiram no cálculo de sua largura.</p>\n<p>Um problema semelhante também pode ocorrer em dispositivos móveis devido à barra de endereços que pode aparecer ou desaparecer, dependendo se o usuário está rolando ou não. Isso mudará a altura da janela de visualização e o usuário notará saltos repentinos ao visualizar o conteúdo.</p>\n<h2>Suporte ao Navegador</h2>\n<h3>Ebook Guia Completo HTML: Descubra o Poder o Verdadeira do HTML5</h3>\n<p>Baixe agora mesmo esse super livro digital com mais de 100 páginas de puro conteúdo sobre HTML, realmente muito completo seja você iniciante ou avançado, tenho certeza que você vai aprender algo novo. Tudo isso Grátis, então clicar no botão aqui em baixo e pegar agora seu ebook e descubra o verdadeiro poder do HTML</p>\n<p><a href=\"/ebook-gratuito-html\">Baixa agora</a></p>\n<p>Com base nos dados disponíveis no <a href=\"http://caniuse.com/#feat=viewport-units\" target=\"_blank\" rel=\"noopener\">Caniuse</a> , parece que todos os principais navegadores suportam essas unidades. No entanto, ainda existem alguns bugs e problemas que você deve estar ciente ao usar unidades de viewport. Por exemplo, no Firefox, há um bug documentado em 100vh que não afeta nenhum elemento com a propriedade <strong>display</strong> definida como <strong>table</strong>. Novamente, o Chrome não suporta unidades de janela de visualização para larguras de borda, intervalos de coluna, valores de transformação, sombras de caixa ou calc() até a versão 34. Confira Caniuse para obter uma lista completa de bugs conhecidos.</p>\n<h2>Conclusões</h2>\n<p>Neste artigo, abordamos brevemente o significado, os aplicativos e o suporte ao navegador das unidades de viewport. Se você conhece algum outro aplicativo interessante ou problema de navegador em relação a essas unidades, por que não nos falar sobre eles nos fóruns .</p>\n<p>Leve suas habilidades de CSS para o próximo nível com <a href=\"/programador-fullstack-8-semanas\">treinamento programador fullstack javascript</a>, neste treinamento você vai aprende muito mais do que apenas CSS.</p>\n<h3>Recomendações</h3>\n","date":"2020-08-05T00:00:00.000Z","readingTime":14,"title":"CSS Viewport: Entenda as Unidades de Visualizações do CSS","categories":["css"],"tags":["alisson-suassuna","css","front-end","fullstack","html","programador","tipscode","unidades-do-css","viewport"],"description":"As unidades de viewport foram introduzidas no CSS faz algum tempo. Eles são realmente \"unidades de comprimento responsivo\", no sentido de que seu valor muda toda vez que o navegador é redimensionado. Se você já ouviu falar sobre essas unidades antes, mas nunca aprendeu sobre elas em detalhes, este artigo pode ajudá-lo.","imgArticle":"/thumbnail-article/css viewport-entenda-as-unidades-de-visualizacao.png","imgHome":"/thumbnail-home/css viewport-entenda-as-unidades-de-visualizacao.png"},{"slug":"ebook-guia-completo-html-descubra-o-poder-do-html5","content":"<p>É com muito prazer que estou lançando o ebook <a href=\"/guia-completo-descubra-o-poder-do-html/\">Guia Completo HTML: Descubra o Poder do HTML</a>, passei vários dias escrevendo esse livro digital com o objetivo de lhe mostrar todo o poder da linguagem de marcação HTML e sua versão 5 e 5.2, esse livro tem mais de 110 páginas de puro conteúdo focado em HTML, esse ebook vai lhe servir tanto para aprender como para referencia e consultas posteriores.</p>\n<p><img src=\"/uploads/2020/07/capa-agora-vai2.png\" alt=\"html\"></p>\n<h2>Você vai aprender</h2>\n<p><strong>O poder do HTML5</strong>:<br>\nA versão 5 do HTML é muito poderosa, neste livro você realmente vai aprender tudo que é realmente necessário para criar um layout seguindo os melhores padrões.</p>\n<p><strong>Detalhes de cada elementos</strong>:<br>\nEsse livro digital tem um nível de detalhes muito profundo, você vai aprende o que cada elemento faz, cada atributos e todas as variações que poderá ser aplicados nesses elementos.</p>\n<p><strong>O Verdadeiro Poder da Semântica HTML</strong>:<br>\nA semântica é algo incrível que a versão 5 do HTML trouce, e neste livro digital você vai conhecer todos os elementos novos da versão 5 e os motivos que você precisar conhece e aplicar em seus projetos</p>\n<p>Elementos Assíncronos:<br>\nO HTML5 tem alguns elementos e atributos que possuir técnicas assíncronos e síncronos, pois é não são só as linguagens de programação que possuir, essas tags e atributos tem um impacto muito grande na performance e neste livro você vai dominar esses elementos</p>\n<p><strong>Elementos de Entradas</strong>  <br>\nOs elementos de entradas são algo de extrema importância em qualquer projeto que você vá desenvolver, neste livro você vai aprende e dominar todos os atributos existentes e formas de inputs e outputs do HTML</p>\n<p><strong>Atributos:</strong>  <br>\nOs atributos são algo muito comum na linguagem HTML, existem muitos atributos para cada situação pode ter certeza que existe um atributo, neste livro você verá os principais e os que realmente faz sentido aprender.</p>\n<p>E muito mais, e tudo isso <strong>GRATUITAMENTE</strong>!!</p>\n<h2>HTML faça o download agora</h2>\n<p>[</p>\n<p>DOWNLOAD GRÁTIS AQUI</p>\n<p>](/guia-completo-descubra-o-poder-do-html/)</p>\n<p>&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/qdqssWxuMGU&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;/iframe&gt;</p>\n","date":"2020-08-02T00:00:00.000Z","readingTime":1,"title":"E-Book Guia Completo HTML: Descubra o Verdadeiro Poder do HTML5","categories":["html"],"tags":["ebook-guia-cmpleto","guia-completo","html","html5"],"description":"É com muito prazer que estou lançando o ebook [Guia Completo HTML Descubra o Poder do HTML](https//www.tipscode.com.br/guia-completo-descubra-o-poder-do-html/), passei vários dias escrevendo esse livro digital com o objetivo de lhe mostrar todo o poder da linguagem de marcação HTML e sua versão 5 e 5.2, esse livro tem mais de 110 páginas de puro conteúdo focado em HTML, esse ebook vai lhe servir tanto para aprender como para referencia e consultas posteriores.","imgArticle":"/thumbnail-article/e-book-html.png","imgHome":"/thumbnail-home/e-book-html.png"},{"slug":"react-e-dificil-mesmo-aprender","content":"<p>O <a href=\"/9-ferramentas-uteis-para-trabalhar-com-react/\">React.js</a> é uma estrutura JavaScript específica que os desenvolvedores da Web usam para tornar o processo de criação de elementos interativos mais simplificado. É uma ferramenta importante para a criação de sites e aplicativos móveis, portanto, entender como usar o React.js pode ajudar a dar uma vantagem no mundo da programação.</p>\n<p>Também é interessante notar que toda a biblioteca <a href=\"/programador-fullstack-8-semanas\">React.js.</a> é suportada e mantida pelo Facebook, o que automaticamente confere um certo nível de credibilidade e popularidade entre os desenvolvedores da web. É de código aberto e totalmente gratuito, e isso oferece aos desenvolvedores muitas oportunidades de flexibilizar suas habilidades criativas.</p>\n<h2>É difícil aprender React?</h2>\n<p><img src=\"/uploads/2020/04/perguntas-png-2.png\" alt=\"react\n\"></p>\n<p>Figura 01: React</p>\n<p>Se você está pensando em mudar para uma carreira em programação, precisará descobrir quais habilidades precisará aprender para seguir o emprego dos seus sonhos.</p>\n<p>Você provavelmente já sabe que precisará ter um conhecimento prático das linguagens de programação que os empregadores estão usando, mas há várias outras habilidades que podem diferenciá-lo da concorrência e ajudá-lo a conquistar uma nova posição.</p>\n<p>Uma dessas habilidades é conhecer o <a href=\"/programador-fullstack-8-semanas\">React</a>.js. Esta postagem explicará o que é o <a href=\"/programador-fullstack-8-semanas\">React</a>.js, como é usado e como é difícil aprender.</p>\n<h2>Por que React?</h2>\n<p>Em essência, o React é uma ferramenta versátil usada pelos desenvolvedores da Web para criar interfaces de usuário ou UIs. Isso inclui barras de pesquisa, menus suspensos, botões de página e outros componentes do site com os quais um usuário possa se envolver.</p>\n<p>Uma das grandes coisas que diferencia o React JS é o fato de permitir que os desenvolvedores criem aplicativos de página única que usam uma quantidade mínima de memória, graças ao que é conhecido como DOM Virtual.</p>\n<p>O React ajuda os desenvolvedores a criar aplicativos Web elegantes, eficientes e dinâmicos, como o Facebook Messenger. No início, os usuários precisavam atualizar a página da Web frequentemente para obter novas mensagens na tela. Agora, novas mensagens e notificações podem aparecer em tempo real sem a necessidade de atualizar a página. Estruturas JavaScript como React tornam isso possível.</p>\n<h2>Quão Difícil é?</h2>\n<p>A verdade é que não há uma resposta única para a pergunta de quão difícil é aprender o React.js. Existem muitos fatores que entram em jogo, e cada pessoa adquire novas habilidades no seu próprio ritmo.</p>\n<p>No entanto, é importante observar que você precisará ter algumas outras habilidades de codificação para poder aprender a usar o React.js em seus projetos.</p>\n<p>No Devmountain, ensinamos o React.js, e analisamos o que você precisa saber durante o nosso programa de 13 semanas.</p>\n<h2>Quais pré-requisitos?</h2>\n<p>Primeiro, você deve entender os conceitos fundamentais de programação antes de aprender o React, pois uma base de habilidades básicas de codificação pode ajudá-lo com o React. Você não precisa necessariamente gastar muito tempo revisando o básico, mas deve dedicar algum tempo.</p>\n<p>Segundo, você precisa ter pelo menos conhecimento básico e abrangente sobre como a iteração mais recente do JavaScript opera. Também é útil ter um conhecimento prático de HTML e CSS. HTML e <a href=\"/uploads/2020/07/bulma-css.png\">CSS</a> são parte integrante de qualquer projeto de desenvolvimento web.</p>\n<p>Se você já possui essas habilidades, aprender o React deve ser um processo relativamente direto. Ele tem seu próprio conjunto de desafios, mas é uma excelente ferramenta para iniciar ou continuar sua carreira como desenvolvedor web.</p>\n<h2>Realmente preciso aprender React?</h2>\n<p>O React pode ser útil para ajudar você a se tornar um programador de sucesso.</p>\n<p>Uma vantagem que um programador tem ao aprender o React.js é que ele não apenas ensina como navegar na estrutura em si, mas também ensina novos padrões de pensamento que podem beneficiá-lo em outras áreas da programação.</p>\n<p>Existem outras estruturas e bibliotecas JavaScript como Vue, Angular, Redux e jQuery que também são úteis. No Devmountain, nosso programa é baseado no React.js, pois é requisitado.</p>\n<h2>Benefícios do React</h2>\n<h3>JavaScript</h3>\n<p>Como mencionado anteriormente, é útil ter pelo menos um entendimento básico da sintaxe do JavaScript. No entanto, mesmo que você não saiba, aprender o React também pode ajudá-lo a entender e a se sentir confortável com a codificação em JavaScript.</p>\n<p>Além disso, o React geralmente possui uma curva de aprendizado mais curta, pois é uma estrutura geral menor do que outras opções como Angular. O Learning React primeiro permite que você escolha apenas as peças necessárias à medida que avança, em vez de ficar inundado de vários conceitos.</p>\n<h3>É rápido e eficiente</h3>\n<p>O React.js foi criado com a eficiência em mente. Todo o conceito da biblioteca React é economizar tempo e esforço no desenvolvimento de aplicativos da web.</p>\n<p>Ele contém padrões e funções pré-criados que podem ser combinados e combinados como blocos de construção para criar projetos rápidos, atraentes e escaláveis ​​em menos tempo do que seria necessário para projetar toda a linha de aplicativos por linha.</p>\n<h3>É seguro</h3>\n<p>Por ser mantido pelo Facebook e por uma grande comunidade de desenvolvedores qualificados, o React.js tem um alcance enorme e uma enorme rede de suporte.</p>\n<p>Embora seja verdade que você pode precisar de outras ferramentas ao lado do React.js para concluir seu projeto com sucesso, a verdade é que você pode usar quase qualquer tecnologia com ele, o que abre muitos caminhos para os desenvolvedores.</p>\n<h2>Conclusões</h2>\n<p>Tornar-se um desenvolvedor web pode ser uma mudança de carreira incrivelmente satisfatória e empolgante. Para ter sucesso, é importante garantir que você aprenda habilidades novas e necessárias. Se você não souber por onde começar, considere como o aprendizado de Reagir na Devmountain pode ajudá-lo a se aproximar de seus objetivos de carreira.</p>\n<h3>Recomendado</h3>\n<p><a href=\"/react-guia-completo-para-testes/\">Teste com React</a></p>\n","date":"2020-07-26T00:00:00.000Z","readingTime":4,"title":"React é Realmente Difícil de Aprender","categories":["react"],"tags":["aprender-a-programar","aprender-javascript","aprender-react","framework-reativos","react"],"description":"O [React.js](https//www.tipscode.com.br/9-ferramentas-uteis-para-trabalhar-com-react/) é uma estrutura JavaScript específica que os desenvolvedores da Web usam para tornar o processo de criação de elementos interativos mais simplificado. É uma ferramenta importante para a criação de sites e aplicativos móveis, portanto, entender como usar o React.js pode ajudar a dar uma vantagem no mundo da programação.","imgArticle":"/thumbnail-article/react-e-dificil.png","imgHome":"/thumbnail-home/react-e-dificil.png"},{"slug":"desenvolvimento-web-por-onde-comecar","content":"<p>Sendo bem direto e honesto com você, você pode começar sua jornada de desenvolvimento Web com tutoriais do YouTube (no <a href=\"https://www.youtube.com/tipscode\" target=\"_blank\" rel=\"noopener\">canal do tipscode</a> tem muito material legal), artigos de blogs ou fóruns com o Stack Overflow, mas por onde começar a entender todo o material e as informações disponíveis? Qual é o caminho para se tornar um desenvolvedor web profissional?</p>\n<p>Se você já se fez essa pergunta em algum momento, você pode começar marcando o blog do TipsCode e o canal do Youtube, W3Schools e Stack Overflow como favoritos, pois esses espaços serão muito úteis para você inicia sua jornada. Neste sites você vai encontrar um material bacana sobre e conteúdos sérios onde o foco é realmente te ensinar.</p>\n<p>Em seguida, você deve fazer o <a href=\"/mini-curso-construindo-seu-jogo-em-javascript/\">minicurso onde te ensino JavaScript enquanto desenvolvemos um jogo do zero</a> onde você vai obter uma compreensão mais completa do que é desenvolvimento web, o que desenvolvedores profissionais fazem e como você pode tirar o máximo de proveito do aprendizado de desenvolvimento web, independentemente do caminho que você escolha.</p>\n<p>E, é claro, aqui estão algumas dicas úteis que todo iniciante em desenvolvimento web deve considerar.</p>\n<p><img src=\"/uploads/2020/07/dicas-1.png\" alt=\"desenvolvimento web\"></p>\n<p>Figura 01: Dicas</p>\n<h2>Tenha seus objetivos claros</h2>\n<p>Como um iniciante em <a href=\"/programador-fullstack-8-semanas\">desenvolvimento web</a>, pode parecer contra-intuitivo pensar no que você quer fazer com suas novas habilidades daqui a alguns anos, mas isso não poderia estar mais longe da verdade.</p>\n<p>Você precisa começar com o fim em mente se planeja tornar o <a href=\"/programador-fullstack-8-semanas\">desenvolvimento Web</a> parte da sua vida, especialmente parte da sua carreira profissional. Então, pergunte a si mesmo, o que você deseja desenvolver para a web? Aplicativos baseados na Web? Sites de pequenas empresas? Algo que ainda não foi inventado?</p>\n<p>Você quer trabalhar por si mesmo? Deseja fazer parte de uma gigantesca empresa de tecnologia ?</p>\n<p>Gostaria de aproveitar o trabalho diário de um desenvolvedor web ? Eu gosto de resolver problemas?</p>\n<p>À medida que você pensa mais sobre o que o desenvolvimento Web pode fazer por você e por que está interessado em aprendê-lo, você entenderá o que precisa fazer para atingir seus objetivos.</p>\n<h2>Saiba onde Procura em vez de memorizar</h2>\n<p>Se você pulou a introdução, certifique-se de coloca em seus favoritos o site do TipsCode, W3Schools e o Stack Overflow . Esses recursos (assim como muitos outros) podem ajudar a evitar preocupações demais com a memorização de HTML, CSS, JavaScript e os aspectos difíceis de lembrar do desenvolvimento web.</p>\n<p>Se você é novo no desenvolvimento, pode estar se perguntando por que deveria saber onde procurar respostas, em vez de apenas memorizar. A verdade é que você pode memorizar todas essas coisas, mas isso não ajudará muito quando as coisas inevitavelmente mudam, e as coisas mudam frequentemente no mundo do desenvolvimento web.</p>\n<p>Seu tempo e esforço seriam melhor gastos sabendo que há uma resposta por aí e ai que entra onde procura para encontrá-la. Depois que você souber disso, poderá começar a progredir mais rapidamente através do material disponíveis em artigos e cursos na internet.</p>\n<h2>O que estudar?</h2>\n<p><img src=\"/uploads/2020/05/react-hooks.png\" alt=\"desenvolvimento web\"></p>\n<p>Este ponto acompanha o segundo ponto sobre não memorizar regras. Basicamente, você precisa entender que o desenvolvimento web é um campo em constante mudança e evolução; portanto, você terá que continuar aprendendo durante toda a sua carreira de desenvolvimento web para ter sucesso.</p>\n<p>Como você pode continuar aprendendo ao longo de sua carreira?</p>\n<p>Fácil. Não memorize regras para que você tenha que consultar informações atualizadas e relevantes.</p>\n<p>Desenvolvimento Web é um trabalho para solucionadores de problemas que gostam de aprender novas maneiras de resolver problemas.</p>\n<p>Eu particularmente te indico o curso <a href=\"/programador-fullstack-8-semanas\">Programador</a> <a href=\"/programador-fullstack-8-semanas\">FullStack JavaScript</a></p>\n<h2>Você está levando a sério?</h2>\n<p>Lembre-se, todo mundo começa em algum lugar. Mesmo que você não saiba muito sobre desenvolvimento web no momento, se você levar a sério, poderá aprender o que precisa saber para entrar no mercado de trabalho em questão de meses. Além disso, o <a href=\"/programador-fullstack-8-semanas\">treinamento da escola OnebitsCode pode te fazer aprender e iniciar bem em 8 semanas</a> pode ajudá-lo a se concentrar nas habilidades acionáveis ​​necessárias para tornar sua mudança de carreira possível.</p>\n<h2>Conclusões</h2>\n<p>Espero muito te lhe ajudado um pouco com esse artigo, o TipsCode é um portal de conhecimento que me comprometo em fazer conteúdo de qualidade para que sua vida no mundo do desenvolvimento seja o mais simples possível.</p>\n<h3>Recomendado</h3>\n","date":"2020-07-22T00:00:00.000Z","readingTime":3,"title":"Desenvolvimento Web Por onde começar?","categories":["programacao"],"tags":["desenvolvimento-web","javascript","programacao","programador","programar-do-zero","web"],"description":"Sendo bem direto e honesto com você, você pode começar sua jornada de desenvolvimento Web com tutoriais do YouTube (no [canal do tipscode](https//www.youtube.com/tipscode) tem muito material legal), artigos de blogs ou fóruns com o Stack Overflow, mas por onde começar a entender todo o material e as informações disponíveis? Qual é o caminho para se tornar um desenvolvedor web profissional?","imgArticle":"/thumbnail-article/desenvolvimento-web-onde-comecar.png","imgHome":"/thumbnail-home/desenvolvimento-web-onde-comecar.png"},{"slug":"bulma-css-guia-basico-para-iniciante","content":"<p>A linguagem de estilo <strong>Cascading Style Sheets</strong> (CSS) fornece aos desenvolvedores Web um nível mais preciso de controle sobre o layout, a tipografia e a estética visual geral de uma página Web. O CSS tornou-se tão predominante no design de sites.</p>\n<p>O framework Bulma CSS eliminam alguns dos problemas do CSS, fornecendo critérios, conceitos e práticas padronizados para lidar com problemas comuns encontrados no desenvolvimento front-end. Existem várias opções de frameworks CSS disponíveis para escolha, como Bootstrap, Semantic UI e Foundation. Você pode se perguntar qual é a melhor framework CSS? Como um novo jogador que entrou recentemente no jogo, acho que o Bulma CSS tem muito a oferecer aos desenvolvedores de aplicações e sites.</p>\n<h2>O que é Bulma CSS?</h2>\n<p><img src=\"/uploads/2020/05/problematica-png-1.png\" alt=\"bulma css\"></p>\n<p>Figura 01: O que é bulma css</p>\n<p>O framework <strong>Bulma CSS</strong> é uma solução gratuita com base no layout do <strong>Flexbox</strong>. Com Bulma, a uma ampla gama de recursos internos e retorno mais rápido e menos códigos CSS.</p>\n<p>A Bulma CSS também é totalmente de código aberto, o que significa que o código fonte original da Bulma está disponível gratuitamente para download - não há limite para o quanto você (e a crescente comunidade Bulma) pode estender sua funcionalidade.</p>\n<p>E se você estiver interessado em ver o que pode conseguir com uma pequena ajuda da Bulma, não é difícil encontrar exemplos. <a href=\"/programador-fullstack-8-semanas\">Caso queira estudar Bulma CSS Clique Aqui!</a> Vamos dar uma olhada em alguns dos benefícios de trabalhar no Bulma CSS.</p>\n<h2>Por que usar Bulma CSS?</h2>\n<p>Aqui estão algumas das outras vantagens que pensamos que poderiam fazer do Bulma CSS sua nova estrutura favorita.</p>\n<h4>É fácil de aprender</h4>\n<p>Acima de tudo, o Bulma foi projetado para ajudar a simplificar o processo de codificação, portanto, faz sentido que o Bulma deva ter a facilidade de uso como prioridade. É por isso que o site oficial da Bulma inclui <a href=\"https://bulma.io/documentation/overview/start/\" target=\"_blank\" rel=\"noopener\">modelos iniciais</a> e <a href=\"https://bulma.io/videos/\" target=\"_blank\" rel=\"noopener\">tutoriais em vídeo</a>. Da mesma forma, a comunidade Stackoverflow é extremamente favorável ao Bulma, e encontrar respostas para perguntas específicas não é problema.</p>\n<h4>Bulma CSS é Modular</h4>\n<p><strong>Bulma CSS</strong> não é um framework do tipo tudo ou nada; ele é bem modular isso significa que você pode usar as peças que deseja e deixar o resto de fora. Deseja apenas os estilos de botão da Bulma? Ou talvez você goste de como Bulma faz colunas? Basta importar os arquivos .sass individuais de que você precisa e criar seu site da maneira que desejar.</p>\n<h4>Apenas CSS</h4>\n<p>Bulma é um framework que usa exclusivamente CSS; a única saída é um arquivo CSS (bulma.css). E se você quiser tirar proveito da modularidade mencionada acima para personalizar suas variáveis, poderá fazer o download dos arquivos de origem .sass individuais. Caso contrário, a Bulma funciona bem como uma solução <strong>plug-and-play</strong>. Tudo isso significa que não há JavaScript no Bulma. Mas como pode ser isso? Bem, às vezes Bulma é descrito como sendo um framework independente de ambiente; é essencialmente uma camada de estilo que fica no topo da lógica.</p>\n<h4>Responsividade no Bulma CSS</h4>\n<p>Pode ser difícil tentar converter um site projetado para desktop para uso em um dispositivo móvel, mas com o Bulma, isso não é realmente um problema. <strong>Bulma CSS</strong> é um framework focado no dispositivos móveis, oferecendo ótima capacidade de resposta do site. Crie um site uma vez e observe-o funcionar em qualquer dispositivo.</p>\n<h4>Documentação bem escrita</h4>\n<p>O site da Bulma fornece <a href=\"https://bulma.io/documentation/\" target=\"_blank\" rel=\"noopener\">documentação</a> abrangente para ajudá-lo a tirar o máximo proveito da estrutura CSS da Bulma. Os tópicos incluem modificadores, layouts, colunas e componentes.</p>\n<h4>Vários Componentes</h4>\n<p>O Bulma CSS vem com praticamente todos os componentes necessários para proporcionar ao seu projeto uma aparência funcional e nítida, incluindo menus suspensos, barras de navegação, painéis, guias e tabelas.</p>\n<h4>Compatibilidade do Bulma CSS</h4>\n<p>Nem todo mundo usa o Chrome; portanto, quando você cria um site, deseja ter certeza de que ele funcionará bem com toda a gama de navegadores da web disponíveis. O Bulma é compatível com muitas outras opções principais do navegador.</p>\n<h4>Bulma CSS está em constante atualização</h4>\n<p>Bulma pode ser um recém-chegado em nosso meio, mas você não o conheceria olhando para o histórico de atualizações. Novos recursos estão sendo adicionados quase que constantemente e as versões mais recentes estão diminuindo rapidamente a qualquer bug ou outro problema que os usuários possam encontrar.</p>\n<h2>Conclusões</h2>\n<p>Obviamente, isso não significa que todos se apaixonam instantaneamente pelo Bulma, mas por ser código aberto significa que, se houver algo que você não gosta (a paleta de cores, por exemplo), provavelmente poderá mudar. Mantenha o que você gosta, use o que você precisa e melhore onde você precisa - parece que a Bulma tem todas as suas bases cobertas.</p>\n<p>O CSS oferece aos desenvolvedores controle direto sobre a aparência do site. O Bulma CSS eleva esse nível de controle ainda mais, simplificando o processo e adicionando um nível aprimorado de consistência. A Bulma está rapidamente se tornando uma estrutura CSS favorita para desenvolvedores da web em todo o mundo. Então, por que não experimentá-lo?</p>\n<h3>Recomendações</h3>\n","date":"2020-07-19T00:00:00.000Z","readingTime":4,"title":"Bulma CSS - Guia básico para Iniciante","categories":["css"],"tags":["bulma-css","css","desenvolvedor-front-end","framework-css"],"description":"A linguagem de estilo Cascading Style Sheets (CSS) fornece aos desenvolvedores Web um nível mais preciso de controle sobre o layout, a tipografia e a estética visual geral de uma página Web. O CSS tornou-se tão predominante no design de sites.","imgArticle":"/thumbnail-article/bulma-css.png","imgHome":"/thumbnail-home/bulma-css.png"},{"slug":"deno-vs-nodejs-vantagens-e-desvantagens","content":"<p>Quando o <a href=\"https://youtu.be/Z-mGgOz5NEA\" target=\"_blank\" rel=\"noopener\">Deno</a> foi anunciado gerou bastante interesse na comunidade JavaScript, fiz até um vídeo lá no meu canal do Youtube explicando o que era esse tal de <a href=\"https://youtu.be/Z-mGgOz5NEA\" target=\"_blank\" rel=\"noopener\">Deno</a>. Existe muitas semelhanças entre as duas plataformas. No entanto, também existem diferenças <strong>importantes</strong>, o que significa que você não pode simplesmente substituir um pelo outro.</p>\n<p>Neste artigo vou analisar o Deno em relação ao seu “primo mais velho” o NodeJS para ajudar a entender o que eles têm em comum e o que os diferencia. (<a href=\"https://youtu.be/Z-mGgOz5NEA\" target=\"_blank\" rel=\"noopener\">Se você quiser conhecer Deno primeiro, confira o vídeo que fiz lá em nosso canal do Youtube</a>)</p>\n<p><img src=\"/uploads/2020/07/diferenças.jpg\" alt=\"Deno\"></p>\n<p>Figura 01: Diferenças</p>\n<h2>Suporte de Linguagem</h2>\n<p>Ambos os projetos tem como objetivo de leva a linguagem JavaScript para o backend, permitindo que o código JavaScript seja executado em um computador fora de um navegador da web. Vamos ver como eles se comparam em termos de suporte linguagem.</p>\n<h3>Node.js</h3>\n<p><img src=\"/uploads/2020/07/nodejs.png\" alt=\"Deno\"></p>\n<p>A versão atual do LTS do Node (v12.18.1 até a data de escrita deste artigo) ele suporta a sintaxe e os recursos modernos do JavaScript. Ele também suporta cerca de <strong>77% das especificações do ES2020</strong>. Os módulos <strong>ECMAScript</strong> também são suportados, mas atualmente são classificados apenas como <strong>experimentais</strong>: você precisa usar a extensão <strong><code>.mjs</code></strong> do arquivo ou adicionar a propriedade &quot;<strong>type</strong>&quot;: &quot;<strong>module</strong>&quot;ao <strong>package.json</strong> arquivo do seu projeto .</p>\n<p>Para executar o <strong>TypeScript</strong> (ou qualquer outra linguagem) no Node, o código precisa ser compilado no JavaScript que o mecanismo V8 pode executar. Existem várias maneiras diferentes de fazer isso, com diferentes prós e contras, portanto, começar a funcionar significa escolher um deles e seguir o processo de configuração necessário.</p>\n<h3>Deno</h3>\n<p><img src=\"/uploads/2020/07/deno-300x300.png\" alt=\"\"></p>\n<p>Não consegui encontrar nenhuma menção à especificação de JavaScript suportada pelo Deno, mas como ele também usa o V8 sob o capô, eu assumi um nível de suporte semelhante ao do Node. Meus próprios testes mostram que o Deno suporta recursos do ES2020 como <strong>Promise.allSettled()</strong> e a palavra-chave <strong>globalThis</strong>. Os módulos <strong>ECMAScript</strong> são o padrão, com os módulos <strong>CommonJS</strong> não suportados, a menos que você use a biblioteca de compatibilidade.</p>\n<p>O TypeScript é suportado como uma linguagem de primeira classe no Deno, o que significa que funciona imediatamente: não é necessário instalar ferramentas adicionais para transpilar para o JavaScript primeiro. Obviamente, o mecanismo V8 não oferece suporte nativo ao TypeScript, por isso o Deno ainda está transpilando o código, mas tudo isso é transparente para você como desenvolvedor.</p>\n<p>Também não consegui encontrar menção de qual versão do TypeScript Deno v1.0.1 usa, mas suporta encadeamento opcional e coalescência nula (mas não campos de classe privada) que o chamariam de TS 3.7.</p>\n<h3>APIs</h3>\n<p>Deno e Node expõem suas próprias APIs aos desenvolvedores, permitindo-nos escrever programas que podem realmente fazer coisas úteis, como ler e gravar arquivos, e enviar e receber solicitações de rede.</p>\n<h3>NodeJS</h3>\n<p>Quando o Node foi lançado pela primeira vez, não havia suporte interno para <a href=\"/promise-javascript-guia-completo/\">Promises</a>. Como resultado disso, a maioria das APIs para operações assíncronas foi gravada para receber um retorno de chamada:</p>\n<pre><code><span class=\"token keyword\">const</span> fs <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fs'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nfs<span class=\"token punctuation\">.</span><span class=\"token function\">readFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">'leia.txt'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> data</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Tratamento do erro</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// Casso contrário, trate os dados..</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>Embora os desenvolvedores do Node agora tenham acesso ás <a href=\"/promise-javascript-guia-completo/\">Promises</a> e à sintaxe assíncrona as APIs ainda esperam retornos de chamada para manter a compatibilidade com versões anteriores.</p>\n<h3>Deno</h3>\n<p>A API do <a href=\"https://youtu.be/Z-mGgOz5NEA\" target=\"_blank\" rel=\"noopener\">Deno</a> foi projetada para aproveitar os recursos modernos do JavaScript. Todos os métodos assíncronos retornam promessas. O Deno também suporta e aguarda scripts de nível superior, o que significa que você pode usar e aguardar em seu script principal sem precisar envolvê-lo em uma função assíncrona.</p>\n<pre><code><span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> Deno<span class=\"token punctuation\">.</span><span class=\"token function\">readFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">'leia.txt'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// manipular os dados</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// trate os erros</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>A equipe de desenvolvimento também tomou a decisão de usar os padrões da Web sempre que possível, o que significa que eles implementaram APIs do navegador onde é prático fazê-lo. Deno fornece o objeto global <strong>window</strong> e APIs como <strong>addEventListener</strong> e <strong>fetch</strong>. Ter acesso a <strong>fetch</strong> é particularmente bom, pois no Node você teria que preencher isso ou usar uma biblioteca de terceiros.</p>\n<h3>Módulo de Compatibilidade</h3>\n<p>O Deno fornece uma camada de compatibilidade com o objetivo de permitir a reutilização de pacotes existentes. Ainda não está completo, mas atualmente suporta o carregamento de módulos CommonJS via <strong>require()</strong>, entre outras coisas.</p>\n<h3>Gerenciamento de Pacotes</h3>\n<p>O gerenciamento de pacotes é uma área em que Deno representa um afastamento radical da maneira de fazer as coisas como o Node. Como ainda é cedo para Deno, resta saber se sua abordagem será vantajosa.</p>\n<h3>NodeJS</h3>\n<p>Como você deve saber, o Node vem com seu próprio gerenciador de pacotes chamado <strong>npm</strong>, que é usado para instalar e gerenciar pacotes de terceiros. O npm é usado principalmente com o registro on-line do npm , onde a maioria dos pacotes de terceiros disponíveis estão listados.</p>\n<p>Quando você usa o npm para instalar um pacote em seu projeto, um arquivo chamado <strong>package.json</strong> e é usado para especificar o nome do pacote e o intervalo de versão aceitável. O pacote em si (mais todos os pacotes dos quais depende) são baixados para pasta <strong>node_modules</strong> dentro do seu projeto.</p>\n<h3>Deno</h3>\n<p>Deno acaba com a necessidade de um gerenciador de pacotes. Em vez disso, os pacotes são vinculados diretamente por meio de uma URL:</p>\n<pre><code><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Response <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"https://deno.land/std@0.53.0/http/servidor.ts\"</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>Na primeira execução do seu código, o Deno busca e compila todas as dependências. Eles são armazenados em cache no sistema de arquivos, separadamente do seu projeto, para que as execuções subsequentes sejam muito mais rápidas.</p>\n<p>Semelhante ao arquivo <strong>package-lock.json</strong> do npm , o Deno permite especificar um arquivo de bloqueio que será usado para garantir que apenas as dependências que correspondem à versão exata que você importou originalmente serão usadas</p>\n<h3>Pacotes de Terceiros</h3>\n<p>Uma linguagem pode prosperar ou morrer dependendo muito do seu ecossistema, pois a produtividade depende de não ter que reinventar a roda! Aqui, parece que o Node atualmente tem vantagem.</p>\n<h3>NodeJS</h3>\n<p>O Node possui um amplo e variado ecossistema de bibliotecas e pacotes disponíveis. Nos 11 anos desde seu lançamento, mais de um milhão de pacotes foram registrados no registro npm. Obviamente, a qualidade pode variar muito e muitos não são mais mantidos ativamente, mas ainda é uma grande vantagem para os desenvolvedores do Node.</p>\n<h3>Deno</h3>\n<p>Como vimos na seção anterior, Deno está tentando ativamente evitar a necessidade de um gerenciador de pacotes ou registro, permitindo que os scripts importem módulos diretamente de qualquer URL pública. Obviamente, é difícil importar pacotes se você não souber o que há por aí; portanto, o site da Deno mantém uma lista de módulos de terceiros compatíveis . Até o momento, existem mais de 642 <strong>módulos</strong> na lista.</p>\n<h3>Biblioteca Padrão do Deno</h3>\n<p>Uma maneira pela qual Deno tenta melhorar a experiência do desenvolvedor é fornecendo uma biblioteca padrão de auxiliares e utilitários para tarefas comuns. Todos os módulos são auditados pelos desenvolvedores principais para garantir código confiável e de alta qualidade. Existem módulos para processar argumentos da linha de comando e colorir a saída do terminal - ambos disponíveis apenas como pacotes de terceiros para o Node.</p>\n<h2>Segurança</h2>\n<p><img src=\"/uploads/2020/07/segurança-300x300.png\" alt=\"\"></p>\n<p>Talvez uma das melhorias mais elogiadas de Deno sobre o Node seja o sistema de permissões. Vamos ver o porquê.</p>\n<h3>NodeJS</h3>\n<p>O tempo de execução do Node é muito permissivo, permitindo o acesso total do código à rede e ao sistema de arquivos do computador. Existe o potencial de código de terceiros causar estragos em seu sistema, se desmarcado.</p>\n<h3>Deno</h3>\n<p>Melhorar o modelo de segurança é algo que Ryan Dahl especificamente se propôs a fazer ao projetar o Deno. Por padrão, todo o código é executado em um ambiente seguro de sandbox. Isso impede que o código tenha acesso a coisas como sistema de arquivos, rede e variáveis ​​de ambiente, a menos que o acesso seja concedido especificamente com um argumento da linha de comando.</p>\n<pre><code># Allow script to make network requests\ndeno run <span class=\"token operator\">--</span>allow<span class=\"token operator\">-</span>net servidor<span class=\"token punctuation\">.</span>ts\n</code></pre>\n<p>Melhor ainda, ao permitir acesso de leitura ou gravação ao sistema de arquivos ou à rede, você pode fornecer uma lista de permissões. Isso significa que você pode restringir o acesso de leitura / gravação de um programa Deno à datapasta do projeto , por exemplo, limitando qualquer dano malicioso em potencial.</p>\n<h3>Deno: Pilhas Incluídas</h3>\n<p>Antes de terminarmos, eu só queria falar sobre mais uma coisa. Se você der uma olhada na seção de ferramentas do manual , notará que o Deno nos fornece alguns recursos interessantes de bônus! A seguir, são apresentadas ferramentas integradas para tornar a experiência do desenvolvedor um pouco mais agradável:</p>\n<ul>\n<li><strong>bundler</strong>: agrupa um script especificado e suas dependências em um único arquivo;</li>\n<li><strong>debugger</strong>: permite depurar seus programas Deno com o Chrome Devtools, o VS Code e outras ferramentas (nota: o Node também vem com um depurador);</li>\n<li><strong>inspetor de dependência</strong>: executar isso em um módulo ES listará todas as dependências em uma árvore;</li>\n<li><strong>gerador de documentação</strong>: analisa anotações JSDoc em um determinado arquivo e gera documentação;</li>\n<li><strong>formatador</strong>: formata automaticamente os códigos JavaScript e TypeScript;</li>\n<li><strong>test runner</strong>: você pode usá-lo para testar seu código JS e TS, em conjunto com o módulo de asserções na biblioteca padrão;</li>\n<li><strong>linter</strong>: um linter de código (atualmente instável) para ajudar a detectar possíveis problemas em seus programas.</li>\n</ul>\n<h2>Conclusões</h2>\n<p>O objetivo deste artigo não é defender Node ou Deno, mas comparar e contrastar os dois. Agora você deve entender as semelhanças entre os dois tempos de execução e, talvez mais importante, as diferenças.</p>\n<p>Deno apresenta algumas vantagens particulares aos desenvolvedores, incluindo um sistema robusto de permissões e suporte TypeScript de primeira classe. As decisões de projeto e as ferramentas internas adicionais visam fornecer um ambiente produtivo e uma boa experiência para o desenvolvedor.</p>\n<p>O Node, por outro lado, tem um ecossistema maciço e bem estabelecido ao seu redor, que já faz mais de uma década. Isso, junto com a infinidade de documentação e tutoriais disponíveis, provavelmente torna o Node.js uma aposta segura por algum tempo.</p>\n<p>Eu se fosse você não largaria tudo para se dedicar 100% ao Deno, ainda é muito mais muito cedo para ter essa atitude, claro isso pode mudar, mas prossiga seus estudos com NodeJS vale muito a pena.</p>\n<h3>Recomendações</h3>\n","date":"2020-07-15T00:00:00.000Z","readingTime":8,"title":"Deno VS Node.JS: Veja as Vantagens e Desvantagens","categories":["nodejs"],"tags":["backend","deno","desvantagens","javascript","modulos","node","nodejs","npm","programador","seguranca","vantagens"],"description":"Quando o [Deno](https//youtu.be/Z-mGgOz5NEA) foi anunciado gerou bastante interesse na comunidade JavaScript, fiz até um vídeo lá no meu canal do Youtube explicando o que era esse tal de [Deno](https//youtu.be/Z-mGgOz5NEA). Existe muitas semelhanças entre as duas plataformas. No entanto, também existem diferenças importantes, o que significa que você não pode simplesmente substituir um pelo outro.","imgArticle":"/thumbnail-article/deno-vs-nodejs.png","imgHome":"/thumbnail-home/deno-vs-nodejs.png"},{"slug":"flexbox-como-centralizar-elementos","content":"<p>O Flexbox é um módulo do CSS que ajuda a posicionar elementos HTML na tela. A centralização horizontal e vertical é uma delas. A centralização do Flexbox resolve problemas comuns de alinhamento que você pode encontrar ao trabalhar com o modelo de CSS box tradicional. Ele permite centralizar itens em seu contêiner horizontal e verticalmente com apenas algumas linhas de código CSS.</p>\n<h2>Layouts Flexbox com base em linha e coluna</h2>\n<p><img src=\"/uploads/2020/07/flexbox-banner-1024x709.png\" alt=\"flexbox\"></p>\n<p>O Flexbox é um módulo de layout unidimensional, o que significa que seus layouts são baseados em linhas ou colunas. Você pode definir a direção do layout usando a propriedade <strong><em>flex-direction</em></strong> que você precisa usar no container flex. Pode levar quatro valores: linha, linha inversa, coluna e coluna reversa. É assim que as quatro direções flexíveis diferentes são exibidas na tela:</p>\n<p>Layout flexível baseado em linha (padrão):</p>\n<pre><code><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span> <span class=\"token constant\">HTML</span> <span class=\"token operator\">--</span><span class=\"token operator\">></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>container<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>item<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>item<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>item<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>       \n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token comment\">/* CSS */</span>\n<span class=\"token punctuation\">.</span>container <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">display</span><span class=\"token operator\">:</span> flex<span class=\"token punctuation\">;</span>\n    flex<span class=\"token operator\">-</span>direction<span class=\"token operator\">:</span> row<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><img src=\"/uploads/2020/07/layou-01-1.png\" alt=\"flexbox\"></p>\n<p>Figura 01</p>\n<p>Layout flexbox baseado em linhas invertidas:</p>\n<pre><code><span class=\"token punctuation\">.</span>container <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">display</span><span class=\"token operator\">:</span> flex<span class=\"token punctuation\">;</span>\n    flex<span class=\"token operator\">-</span>direction<span class=\"token operator\">:</span> row<span class=\"token operator\">-</span>reverse<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><img src=\"/uploads/2020/07/layout-02.png\" alt=\"flexbox\"></p>\n<p>Figura 02</p>\n<p>Layout flexbox baseado em coluna:</p>\n<pre><code><span class=\"token punctuation\">.</span>container <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">display</span><span class=\"token operator\">:</span> flex<span class=\"token punctuation\">;</span>\n    flex<span class=\"token operator\">-</span>direction<span class=\"token operator\">:</span> column<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><img src=\"/uploads/2020/07/layout-03-1.png\" alt=\"flexbox\"></p>\n<p>Figura 03</p>\n<p>Layout flexbox baseado em coluna invertida:</p>\n<pre><code><span class=\"token punctuation\">.</span>container <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">display</span><span class=\"token operator\">:</span> flex<span class=\"token punctuation\">;</span>\n    flex<span class=\"token operator\">-</span>direction<span class=\"token operator\">:</span> column<span class=\"token operator\">-</span>reverse<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><img src=\"/uploads/2020/07/layout-04.png\" alt=\"flexbox\"></p>\n<p>Figura 04</p>\n<p>Nas ilustrações acima, você pode ver os layouts <strong><em>flexbox</em></strong> de linha única, pois não alteramos o valor padrão da propriedade <strong><em>flex-wrap</em></strong>, que é <em><strong>agorarap</strong></em>. Portanto, se você deseja exibir os itens em mais de uma linha ou coluna, adicione o flex-wrap: wrap; regra para o contêiner flex também.</p>\n<h2>Como Funciona a Centralização</h2>\n<p>De fato, o flexbox não usa os conceitos de centralização “horizontal” e “vertical”. Em vez disso, funciona com os eixos principal e cruzado, que na tela se parecem com centralização horizontal e vertical. A direção dos eixos principal e transversal depende do valor da propriedade de direção flexível mencionada acima .</p>\n<p>Nos layouts flexbox baseados em linhas ( linha e linha inversa ), o eixo principal é executado na direção horizontal, enquanto o eixo transversal é vertical. Por outro lado, nos layouts flexbox baseados em colunas ( coluna e coluna inversa ), o eixo principal é executado verticalmente, enquanto o eixo transversal é horizontal. Se você estiver interessado em saber como os eixos do flexbox funcionam, <a href=\"/programador-fullstack-8-semanas\">consulte esse treinamento onde você vai aprender tudo isso e muito mais</a>.</p>\n<p>Quando falamos sobre centralização do flexbox, falamos sobre dois tipos de centralização:</p>\n<ul>\n<li>Centralização ao longo do eixo principal (também chamado de eixo de bloco);</li>\n<li>Centralização ao longo do eixo transversal (também chamado de eixo embutido).</li>\n</ul>\n<p>Se você deseja um item flexível perfeitamente centralizado, é necessário centralizá-lo ao longo dos dois eixos.</p>\n<h3>Centralizar pelo Eixo Principal</h3>\n<p>Você precisa usar a propriedade <strong><em>justify-content</em></strong> para centralizar itens no flexbox ao longo do eixo principal. Seu valor padrão é <strong><em>flex-start</em></strong>, que alinha todos os itens dentro do <strong><em>contêiner flex</em></strong> ao início do eixo principal. Se você quiser centralizar os itens, precisará usá-lo com o valor central .</p>\n<p>No caso de layouts baseados em linhas, o seguinte código CSS centraliza os itens horizontalmente (como aqui, o eixo principal também é executado horizontalmente):</p>\n<pre><code><span class=\"token punctuation\">.</span>container <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">display</span><span class=\"token operator\">:</span> flex<span class=\"token punctuation\">;</span>\n    flex<span class=\"token operator\">-</span>direction<span class=\"token operator\">:</span> row<span class=\"token punctuation\">;</span>\n    justify<span class=\"token operator\">-</span>content<span class=\"token operator\">:</span> center<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><img src=\"/uploads/2020/07/layout-05.png\" alt=\"flexbox\"></p>\n<p>Figura 05</p>\n<p>E, no caso de layouts baseados em colunas, a mesma propriedade justify-content alinha os itens verticalmente (como aqui, o eixo principal é executado verticalmente):</p>\n<pre><code><span class=\"token punctuation\">.</span>container <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">display</span><span class=\"token operator\">:</span> flex<span class=\"token punctuation\">;</span>\n    flex<span class=\"token operator\">-</span>direction<span class=\"token operator\">:</span> column<span class=\"token punctuation\">;</span>\n    justify<span class=\"token operator\">-</span>content<span class=\"token operator\">:</span> center<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><img src=\"/uploads/2020/07/layout-06.png\" alt=\"flexbox\"></p>\n<p>figura 06</p>\n<p>Tal como nos exemplos acima, que têm-se centrado os itens de flex, as fileiras-reverso e de coluna inversa instruções trabalham da mesma maneira como linha e coluna. Isso ocorre porque o centro do eixo principal está à mesma distância dos pontos inicial e final.</p>\n<p>No entanto, observe que se você deseja usar a propriedade justify-content com outro valor, como flex-end, os layouts resultantes parecerão diferentes quando as direções forem invertidas.</p>\n<h3>Centralizar pelo Eixo Transversal</h3>\n<p>Como o flexbox é um layout unidimensional, o eixo transversal tem uma função secundária. Os itens flexíveis fluem ao longo do eixo principal. O eixo transversal não altera a direção do fluxo, apenas ajusta os itens na tela. Existem três propriedades CSS que você pode usar para centralizar ao longo do eixo transversal:</p>\n<ul>\n<li>align-items para centralizar uma linha de todos os itens flexíveis;</li>\n<li>align-self para centralizar uma linha de um item flexível individual;</li>\n<li>align-content conteúdo para centralizar várias linhas de todos os itens flexíveis (essa propriedade funciona apenas quando itens flexíveis são agrupados em várias linhas).</li>\n</ul>\n<p>Agora, vamos ver como eles funcionam com os diferentes valores da propriedade <strong><em>flex-direction</em></strong>.</p>\n<h4>1 - Centralização de Eixo Cruzado de Linha Única</h4>\n<p>Você pode usar a propriedade <strong><em>align-items</em></strong> para alinhar itens ao longo do eixo transversal. Se você usá-lo junto com a propriedade <strong><em>center</em></strong>, ele centralizará os itens verticalmente quando a direção for linha ou reversa, e horizontalmente quando a direção for coluna ou reverso da coluna.</p>\n<p>É assim que os itens de centralização ao longo do eixo transversal se parecem nos layouts baseados em linhas:</p>\n<pre><code><span class=\"token punctuation\">.</span>container <span class=\"token punctuation\">{</span>    \n    <span class=\"token literal-property property\">display</span><span class=\"token operator\">:</span> flex<span class=\"token punctuation\">;</span>\n    flex<span class=\"token operator\">-</span>direction<span class=\"token operator\">:</span> row<span class=\"token punctuation\">;</span>\n    align<span class=\"token operator\">-</span>items<span class=\"token operator\">:</span> center<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>Como não alteramos o <strong><em>justify-content</em></strong>, o valor padrão é o <strong><em>flex-start</em></strong>. Dessa forma, os itens flexíveis são alinhados ao início do eixo principal (horizontal) e ao centro do eixo transversal (vertical):</p>\n<p><img src=\"/uploads/2020/07/layout-07-1.png\" alt=\"flexbox\"></p>\n<p>Figura 07</p>\n<p>Ao trabalhar com layouts baseados em colunas, você pode usar a propriedade <em><strong>align-items</strong></em> para centralizar itens flexíveis horizontalmente, pois nesse caso, o eixo transversal é executado horizontalmente. Em CSS:</p>\n<pre><code><span class=\"token punctuation\">.</span>container <span class=\"token punctuation\">{</span>    \n    <span class=\"token literal-property property\">display</span><span class=\"token operator\">:</span> flex<span class=\"token punctuation\">;</span>\n    flex<span class=\"token operator\">-</span>direction<span class=\"token operator\">:</span> column<span class=\"token punctuation\">;</span>\n    align<span class=\"token operator\">-</span>items<span class=\"token operator\">:</span> center<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>Aqui, a propriedade <strong><em>justify-content</em></strong> também permanece em seu valor padrão ( f<strong><em>lex-start</em></strong> ). Como nos layouts baseados em colunas, o eixo principal é o vertical, o <strong><em>flexbox</em></strong> alinha os itens ao topo do contêiner (o início do eixo principal), enquanto o centraliza horizontalmente seguindo a regra de alinhar itens: central.</p>\n<p><img src=\"/uploads/2020/07/layout-08-1.png\" alt=\"flexbox\"></p>\n<h4>2 - Centralização de Eixo Cruzado de Item Única</h4>\n<p>Você não pode apenas centralizar itens flexíveis em massa ao longo do eixo transversal, mas também optar por centralizar apenas um único item usando a propriedade CSS <em><strong>align-self</strong></em> que substitui os itens de alinhamento. Você precisa adicionar alinhamento aos itens flex individuais (em vez do contêiner flex) da seguinte maneira:</p>\n<pre><code><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span> <span class=\"token constant\">HTML</span> <span class=\"token operator\">--</span><span class=\"token operator\">></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>container<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>item<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>item center<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>item<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token comment\">/* CSS */</span>\n<span class=\"token punctuation\">.</span>container <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">display</span><span class=\"token operator\">:</span> flex<span class=\"token punctuation\">;</span>\n    flex<span class=\"token operator\">-</span>direction<span class=\"token operator\">:</span> row<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">.</span>center <span class=\"token punctuation\">{</span>\n    align<span class=\"token operator\">-</span>self<span class=\"token operator\">:</span> center<span class=\"token punctuation\">;</span>\n    <span class=\"token literal-property property\">background</span><span class=\"token operator\">:</span> magenta<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>Como você pode ver na captura de tela abaixo, ele centraliza o segundo item ao longo do eixo transversal (verticalmente, pois é um layout baseado em linhas). Ao mesmo tempo, o restante dos itens permanece no local padrão:</p>\n<p><img src=\"/uploads/2020/07/layout-09.png\" alt=\"flexbox\"></p>\n<p>O exemplo acima usa um layout flexbox baseado em linhas, mas o alinhar itens também funciona da mesma maneira no caso de layouts baseados em colunas.</p>\n<h4>3 - Centralização de Eixo Cruzado em várias linhas</h4>\n<p>O módulo de layout flexbox também permite centralizar várias linhas de itens ao longo do eixo transversal. A propriedade <strong><em>align-content</em></strong> permite distribuir o espaço ao redor dos itens quando eles se agrupam em várias linhas. É um pouco difícil entender a diferença entre alinhar itens e alinhar conteúdo, então vamos ver como eles se comparam.</p>\n<p>Quando você define <strong><em>flex-wrap</em></strong> para quebrar e centralizar apenas a propriedade <strong><em>align-items</em></strong>, é isso que você obtém:</p>\n<p><img src=\"/uploads/2020/07/layout-10.png\" alt=\"flexbox\"></p>\n<p>Embora os itens flexíveis de agrupamento estejam centralizados ao longo do eixo transversal (verticalmente), o espaço é distribuído igualmente entre eles. É isso que você pode alterar com a ajuda do <strong><em>align-content</em></strong> da seguinte maneira:</p>\n<pre><code><span class=\"token punctuation\">.</span>container <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">display</span><span class=\"token operator\">:</span> flex<span class=\"token punctuation\">;</span>\n    flex<span class=\"token operator\">-</span>direction<span class=\"token operator\">:</span> row<span class=\"token punctuation\">;</span>\n    flex<span class=\"token operator\">-</span>wrap<span class=\"token operator\">:</span> wrap<span class=\"token punctuation\">;</span>\n    align<span class=\"token operator\">-</span>items<span class=\"token operator\">:</span> center<span class=\"token punctuation\">;</span>\n    align<span class=\"token operator\">-</span>content<span class=\"token operator\">:</span> center<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>Como você pode ver abaixo, a propriedade <strong><em>align-content</em></strong> é responsável pela distribuição do espaço ao longo do eixo transversal. Como foi definido para o centro, os itens de várias linhas são &quot;puxados&quot; em direção ao centro do contêiner flexível, tanto quanto possível:</p>\n<p><img src=\"/uploads/2020/07/layout-11.png\" alt=\"\"></p>\n<p>Observe que o alinhamento de conteúdo só funciona quando há mais de uma linha de itens flexíveis. Portanto, você não precisa se preocupar com isso quando tiver apenas um ou alguns itens flexíveis.</p>\n<h4>Item flexbox perfeitamente Centralizados</h4>\n<p>Para criar um layout perfeitamente centralizado com o flexbox, você precisa centralizá-lo ao longo dos eixos principal e transversal. O caso de uso mais frequente é quando você centraliza um elemento dentro de outro. Com o flexbox, são apenas três regras CSS e funciona com qualquer tipo de elemento HTML, não apenas com divs:</p>\n<pre><code><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span> <span class=\"token constant\">HTML</span> <span class=\"token operator\">--</span><span class=\"token operator\">></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>container<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>item<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token comment\">/* CSS */</span>\n<span class=\"token punctuation\">.</span>container <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">display</span><span class=\"token operator\">:</span> flex<span class=\"token punctuation\">;</span>\n    justify<span class=\"token operator\">-</span>content<span class=\"token operator\">:</span> center<span class=\"token punctuation\">;</span>\n    align<span class=\"token operator\">-</span>items<span class=\"token operator\">:</span> center<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>Como não definimos um valor para a propriedade flex-direction , ele assume o padrão, que é a linha:</p>\n<p><img src=\"/uploads/2020/07/layou-12.png\" alt=\"\"></p>\n<p>Além de um único item, você também pode centralizar perfeitamente várias linhas de itens com o flexbox. Você precisa usar o seguinte CSS no caso de layouts baseados em linhas:</p>\n<pre><code><span class=\"token punctuation\">.</span>container <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">display</span><span class=\"token operator\">:</span> flex<span class=\"token punctuation\">;</span>\n    flex<span class=\"token operator\">-</span>wrap<span class=\"token operator\">:</span> wrap<span class=\"token punctuation\">;</span>\n    flex<span class=\"token operator\">-</span>direction<span class=\"token operator\">:</span> row<span class=\"token punctuation\">;</span>\n    justify<span class=\"token operator\">-</span>content<span class=\"token operator\">:</span> center<span class=\"token punctuation\">;</span>\n    align<span class=\"token operator\">-</span>items<span class=\"token operator\">:</span> center<span class=\"token punctuation\">;</span>\n    align<span class=\"token operator\">-</span>content<span class=\"token operator\">:</span> center<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><img src=\"/uploads/2020/07/layou-13.png\" alt=\"\"></p>\n<p>E é assim que o layout de várias linhas perfeitamente centralizado se parece quando a direção flexível está definida como coluna :</p>\n<pre><code><span class=\"token punctuation\">.</span>container <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">display</span><span class=\"token operator\">:</span> flex<span class=\"token punctuation\">;</span>\n    flex<span class=\"token operator\">-</span>wrap<span class=\"token operator\">:</span> wrap<span class=\"token punctuation\">;</span>\n    flex<span class=\"token operator\">-</span>direction<span class=\"token operator\">:</span> column<span class=\"token punctuation\">;</span>\n    justify<span class=\"token operator\">-</span>content<span class=\"token operator\">:</span> center<span class=\"token punctuation\">;</span>\n    align<span class=\"token operator\">-</span>items<span class=\"token operator\">:</span> center<span class=\"token punctuation\">;</span>\n    align<span class=\"token operator\">-</span>content<span class=\"token operator\">:</span> center<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><img src=\"/uploads/2020/07/layou-14-1.png\" alt=\"\"></p>\n<h2>Conclusão</h2>\n<p>A centralização do Flexbox permite centralizar qualquer tipo de elemento HTML dentro do contêiner. Adicionando a exibição: a regra flexível a um contêiner é útil quando você deseja centralizar itens horizontalmente, verticalmente ou ambos. A centralização do Flexbox é uma excelente solução para criar títulos, imagens, vídeos e galerias de produtos perfeitamente centralizados e muito mais.</p>\n<p>Existem muitas técnicas e ferramentas de CSS que podem facilitar sua vida. Para saber mais sobre eles, dê uma olhada nos nossos artigos sobre as 5 coisas que você deve saber sobre a especificação CSS ou consulte também nossa coleção dos melhores trechos de código flexbox .</p>\n<h3>Recomendações</h3>\n<p><a href=\"/react-guia-completo-para-testes/\">Mais artigos</a></p>\n","date":"2020-07-12T00:00:00.000Z","readingTime":11,"title":"Flexbox: Como Centralizar elementos","categories":["css"],"tags":["css","flexbox"],"description":"O Flexbox é um módulo do CSS que ajuda a posicionar elementos HTML na tela. A centralização horizontal e vertical é uma delas. A centralização do Flexbox resolve problemas comuns de alinhamento que você pode encontrar ao trabalhar com o modelo de CSS box tradicional. Ele permite centralizar itens em seu contêiner horizontal e verticalmente com apenas algumas linhas de código CSS.","imgArticle":"/thumbnail-article/css-flexbox.png","imgHome":"/thumbnail-home/css-flexbox.png"},{"slug":"react-guia-completo-para-testes","content":"<p>Neste artigo, apresentarei uma ferramenta de teste do React chamada <strong><em>Jest</em></strong>, juntamente com a popular biblioteca <em><strong>Enzyme</strong></em>, projetada para testar os componentes do React. Apresentarei as técnicas de teste do Jest, incluindo: execução de testes, teste de componentes do React, entre outros. Se você é novo no no mundo dos teste e quer saber como começar, este artigo lhe será muito útil porque começaremos com uma introdução ao teste. No final, você estará entendendo um pouco mais e testando aplicações escritas com React usando Jest e Enzyme.</p>\n<h2>Introdução</h2>\n<p><img src=\"/uploads/2020/07/man-pointing-on-laptop-screen-3981798-1024x682.jpg\" alt=\"react\"></p>\n<p>Figura 01: Teste com React</p>\n<p>Teste é uma revisão linha por linha de como seu código será executado. Um conjunto de testes para uma aplicação compreende vários bits de código para verificar se aplicação está sendo executado com êxito e sem erros. Os testes também são úteis quando são feitas atualizações no código. Após atualizar um trecho de código, você pode executar um teste para garantir que a atualização não quebre a funcionalidade já existente.</p>\n<h3>Por que Testa?</h3>\n<p>É bom entender por que estamos fazendo algo antes de fazê-lo. Então, por que testar e qual é o seu propósito?</p>\n<p>O primeiro objetivo do teste é impedir a regressão. Regressão é o reaparecimento de um bug que havia sido corrigido anteriormente. Faz com que um recurso pare de funcionar como pretendido após a ocorrência de um determinado evento;</p>\n<p>O teste garante a funcionalidade de componentes complexos e aplicativos modulares;</p>\n<p>Os testes são necessários para o desempenho efetivo de um aplicativo ou produto de software.</p>\n<p>O teste torna um aplicativo mais robusto e menos propenso a erros. É uma maneira de verificar se o seu código faz o que você quer que ele faça e se o seu aplicativo funciona conforme o planejado para seus usuários.</p>\n<p>Vamos examinar os tipos de teste e o que eles fazem.</p>\n<h3>TESTE DE UNIDADE</h3>\n<p>Nesse tipo de teste, unidades ou componentes individuais do software são testados. Uma unidade pode ser uma função, método, procedimento, módulo ou objeto individual. Um teste de unidade isola uma seção do código e verifica sua exatidão, a fim de validar que cada unidade do código do software tenha o desempenho esperado.</p>\n<p>No teste de unidade, procedimentos ou funções individuais são testados para garantir que eles estejam funcionando corretamente e todos os componentes são testados individualmente. Por exemplo, testar uma função ou se uma instrução ou loop em um programa está funcionando corretamente se enquadra no escopo do teste de unidade.</p>\n<h3>Teste de Componentes</h3>\n<p>O teste de componente verifica a funcionalidade de uma parte individual de um aplicativo. Os testes são realizados em cada componente isoladamente de outros componentes. Geralmente, os aplicativos React são compostos de vários componentes; portanto, o teste de componentes lida com o teste desses componentes individualmente.</p>\n<p>Por exemplo, considere um site que tenha páginas da web diferentes com muitos componentes. Cada componente terá seus próprios subcomponentes. Testar cada módulo sem considerar a integração com outros componentes é chamado de teste de componente.</p>\n<p>Testes como este no React requerem ferramentas mais sofisticadas. Portanto, precisaríamos de ferramentas Jest e, às vezes, mais sofisticadas, como Enzyme, que discutiremos brevemente mais adiante.</p>\n<h3>Teste Instantâneo</h3>\n<p>Um teste de captura instantânea garante que a interface do usuário (UI) de um aplicativo Web não seja alterada inesperadamente. Ele captura o código de um componente em um momento no tempo, para que possamos comparar o componente em um estado com qualquer outro estado possível.</p>\n<p>Aprenderemos sobre o teste de instantâneo em uma seção posterior.</p>\n<h3>Vantagens e Desvantagens</h3>\n<p>O teste é excelente e deve ser feito, mas possui vantagens e desvantagens.</p>\n<h4>Vantagens</h4>\n<ul>\n<li>Impede regressão inesperada;</li>\n<li>Ele permite que o desenvolvedor se concentre na tarefa atual, em vez de se preocupar com o passado;</li>\n<li>Ele permite a construção modular de um aplicativo que seria complexo demais para ser construído;</li>\n<li>Reduz a necessidade de verificação manual.</li>\n</ul>\n<h4>Desvantagens</h4>\n<ul>\n<li>Você precisa escrever mais código, além de depurar e manter;</li>\n<li>Falhas de teste não críticas podem fazer com que o aplicativo seja rejeitado em termos de integração contínua.</li>\n</ul>\n<h2>Introdução Ao Jest</h2>\n<p><img src=\"/uploads/2020/07/jest-1.png\" alt=\"React\"></p>\n<p>Figura 02: Jest - React</p>\n<p>O <a href=\"https://jestjs.io/en/\" target=\"_blank\" rel=\"noopener\">Jest</a> é uma estrutura de teste de JavaScript deliciosa, com foco na simplicidade. Pode ser instalado com <a href=\"https://www.npmjs.com/\" target=\"_blank\" rel=\"noopener\">npm</a> ou fio. O Jest se encaixa em uma categoria mais ampla de utilitários, conhecidos como corredores de teste . Funciona muito bem para aplicativos React, mas também funciona bem fora dos aplicativos React.</p>\n<p>A <a href=\"https://enzymejs.github.io/enzyme/\" target=\"_blank\" rel=\"noopener\">enzima</a> é uma biblioteca usada para testar os aplicativos <a href=\"/react-hooks-guia-completo-passo-a-passo/\">React</a>. Ele foi projetado para testar componentes e possibilita escrever asserções que simulam ações que confirmam se a interface do usuário está funcionando corretamente.</p>\n<p>Jest e Enzyme se complementam tão bem que, neste artigo, usaremos os dois.</p>\n<h3>Processo de Execução de um Teste com o Jest</h3>\n<p>Nesta seção, estaremos instalando o Jest e escrevendo testes. Se você é novo no React, recomendo usar o <a href=\"https://create-react-app.dev/\" target=\"_blank\" rel=\"noopener\">Create React App</a>, pois ele está pronto para uso e é enviado com o Jest.</p>\n<pre><code>npm init react<span class=\"token operator\">-</span>app my<span class=\"token operator\">-</span>app\n</code></pre>\n<p>Precisamos instalar o Enzyme **** e enzyme-adapter-react-16com react-test-renderer(o número deve ser baseado na versão do React que você está usando).</p>\n<pre><code>npm install <span class=\"token operator\">--</span>save<span class=\"token operator\">-</span>dev enzyme enzyme<span class=\"token operator\">-</span>adapter<span class=\"token operator\">-</span>react<span class=\"token operator\">-</span><span class=\"token number\">16</span> react<span class=\"token operator\">-</span>test<span class=\"token operator\">-</span>renderer\n</code></pre>\n<p>Agora que criamos nosso projeto com Jest e Enzyme, precisamos criar um setupTest.jsarquivo na srcpasta do projeto. O arquivo deve ficar assim:</p>\n<pre><code><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> configure <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"enzyme\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> Adapter <span class=\"token keyword\">from</span> <span class=\"token string\">\"enzyme-adapter-react-16\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">configure</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">adapter</span><span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Adapter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>Isso importa a enzima e configura o adaptador para executar nossos testes.</p>\n<p>Antes de continuar, vamos aprender algumas noções básicas. Algumas coisas importantes são muito usadas neste artigo e você precisará entendê-las.</p>\n<p>itou test Você passaria uma função para esse método e o executor de testes executaria essa função como um bloco de testes;</p>\n<p>describe Este método opcional é para agrupar qualquer número de itou testinstruções;</p>\n<p>expect Essa é a condição que o teste precisa passar. Ele compara o parâmetro recebido com o correspondente. Também oferece acesso a vários matchers que permitem validar coisas diferentes. Você pode ler mais sobre isso na documentação .</p>\n<p>mount Esse método renderiza o DOM completo, incluindo os componentes filhos do componente pai, nos quais estamos executando os testes;</p>\n<p>shallow Isso renderiza apenas os componentes individuais que estamos testando. Não processa componentes filho. Isso nos permite testar componentes isoladamente.</p>\n<h3>Criando Arquivo de Teste</h3>\n<p>Como o Jest sabe o que é um arquivo de teste e o que não é? A primeira regra é que qualquer arquivo encontrado em qualquer diretório com o nome __test__seja considerado um teste. Se você colocar um arquivo JavaScript em uma dessas pastas, o Jest tentará executá-lo quando você ligar para o Jest, para o bem ou para o mal. A segunda regra é que o Jest reconhecerá qualquer arquivo com o sufixo .spec.jsou .test.js. Ele pesquisará os nomes de todas as pastas e todos os arquivos em todo o seu repositório.</p>\n<p>Vamos criar nosso primeiro teste, para um miniaplicativo React criado para este tutorial. Você pode cloná-lo no <a href=\"https://github.com/daacode/react-jest\" target=\"_blank\" rel=\"noopener\">GitHub</a> . Execute npm installpara instalar todos os pacotes e, em seguida, npm startinicie o aplicativo. Verifique o README.mdarquivo para obter mais informações.</p>\n<p>Vamos abrir App.test.jspara escrever nosso primeiro teste. Primeiro, verifique se nosso componente de aplicativo é renderizado corretamente e se especificamos uma saída:</p>\n<pre><code><span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"renders without crashing\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">shallow</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">App</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"renders Account header\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> wrapper <span class=\"token operator\">=</span> <span class=\"token function\">shallow</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">App</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> welcome <span class=\"token operator\">=</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span>Display Active Users Account Details<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>wrapper<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span>welcome<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toEqual</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>No teste acima, o primeiro teste, with shallow, verifica se nosso componente de aplicativo é renderizado corretamente sem travar. Lembre-se de que o shallowmétodo renderiza apenas um único componente, sem componentes filhos.</p>\n<p>O segundo teste verifica se especificamos uma h1saída de tag &quot;Exibir conta de usuário ativo&quot; em nosso componente de aplicativo, com um correspondente Jest de toEqual.</p>\n<p>Agora, execute o teste:</p>\n<pre><code>npm run test \n<span class=\"token comment\">/* OR */</span>\nnpm test\n</code></pre>\n<p>A saída no seu terminal deve ser assim:</p>\n<pre><code> <span class=\"token constant\">PASS</span>  src<span class=\"token operator\">/</span>App<span class=\"token punctuation\">.</span>test<span class=\"token punctuation\">.</span>js\n  √ renders without <span class=\"token function\">crashing</span> <span class=\"token punctuation\">(</span>34ms<span class=\"token punctuation\">)</span>\n  √ renders Account <span class=\"token function\">header</span> <span class=\"token punctuation\">(</span>13ms<span class=\"token punctuation\">)</span>\n\nTest Suites<span class=\"token operator\">:</span> <span class=\"token number\">1</span> passed<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span> total\n<span class=\"token literal-property property\">Tests</span><span class=\"token operator\">:</span>       <span class=\"token number\">2</span> passed<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span> total\n<span class=\"token literal-property property\">Snapshots</span><span class=\"token operator\">:</span>   <span class=\"token number\">0</span> total\n<span class=\"token literal-property property\">Time</span><span class=\"token operator\">:</span>        <span class=\"token number\">11</span><span class=\"token punctuation\">.</span>239s<span class=\"token punctuation\">,</span> estimated 16s\nRan all test suites related to changed files<span class=\"token punctuation\">.</span>\n\nWatch Usage<span class=\"token operator\">:</span> Press w to show more<span class=\"token punctuation\">.</span>\n</code></pre>\n<p>Como você pode ver, nosso teste passou. Isso mostra que temos um conjunto de testes nomeado App.test.js, com dois testes bem-sucedidos quando o Jest foi executado. Falaremos sobre o teste de instantâneo mais tarde, e você também verá um exemplo de falha no teste.</p>\n<h4>Ignorando Ou Isolando Um Teste</h4>\n<p>Ignorar ou isolar um teste significa que, quando o Jest é executado, um teste marcado específico não é executado.</p>\n<pre><code>it<span class=\"token punctuation\">.</span><span class=\"token function\">skip</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"renders without crashing\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">shallow</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">App</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"renders Account header\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> wrapper <span class=\"token operator\">=</span> <span class=\"token function\">shallow</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">App</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> header <span class=\"token operator\">=</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span>Display Active Users Account Details<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>wrapper<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span>header<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toEqual</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>Nosso primeiro teste será ignorado porque usamos o skipmétodo para isolar o teste. Portanto, ele não será executado ou fará alterações em nosso teste quando o Jest for executado. Somente o segundo será executado. Você também pode usar it.only().</p>\n<p>É um pouco frustrante fazer alterações em um arquivo de teste e depois executar manualmente npm testnovamente. O Jest possui um bom recurso chamado modo de observação, que observa alterações no arquivo e executa testes de acordo. Para executar o Jest no modo de exibição, você pode executar npm test -- --watchou jest --watch. Eu também recomendaria deixar o Jest em execução na janela do terminal pelo restante deste tutorial.</p>\n<h4>Funções Mock</h4>\n<p>Um mock é uma duplicata convincente de um objeto ou módulo sem qualquer funcionamento interno real. Pode ter um pouquinho de funcionalidade, mas comparado à coisa real, é uma farsa. Pode ser criado automaticamente pelo Jest ou manualmente.</p>\n<p>Por que devemos zombar? A zombaria reduz o número de dependências - ou seja, o número de arquivos relacionados que precisam ser carregados e analisados ​​quando um teste é executado. Portanto, o uso de muitas zombarias faz com que os testes sejam executados mais rapidamente.</p>\n<p>As funções simuladas também são conhecidas como &quot;espiões&quot;, porque permitem espionar o comportamento de uma função chamada diretamente por algum outro código, em vez de apenas testar a saída.</p>\n<p>Há duas maneiras de simular uma função: criando uma função de simulação para usá-la no código de teste ou escrevendo uma simulação manual para substituir uma dependência de módulo.</p>\n<p>As zombarias manuais **** são usadas para remover a funcionalidade com dados simulados. Por exemplo, em vez de acessar um recurso remoto, como um site ou um banco de dados, convém criar uma simulação manual que permita usar dados falsos.</p>\n<p>Usaremos uma função simulada na próxima seção.</p>\n<h4>Testando Componentes do React</h4>\n<p>A seção combinará todo o conhecimento que adquirimos até o momento para entender como testar os componentes do React. O teste envolve garantir que a saída de um componente não tenha sido alterada inesperadamente para outra coisa. Construir componentes da maneira correta é de longe a maneira mais eficaz de garantir testes bem-sucedidos.</p>\n<p>Uma coisa que podemos fazer é testar os adereços dos componentes - especificamente, testar se os adereços de um componente estão sendo passados ​​para outro. O Jest e a API Enzyme nos permitem criar uma função simulada para simular se objetos estão sendo transmitidos entre componentes.</p>\n<p>Temos que passar os props da conta de usuário do Appcomponente principal para o Accountcomponente. Precisamos fornecer detalhes da conta do usuário Accountpara renderizar a conta ativa dos usuários. É aqui que a zombaria é útil, permitindo testar nossos componentes com dados falsos.</p>\n<p>Vamos criar um mock para os useradereços:</p>\n<pre><code><span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Adeneye David\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">email</span><span class=\"token operator\">:</span> <span class=\"token string\">\"david@gmail.com\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">username</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Dave\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>Criamos uma função de simulação manual em nosso arquivo de teste e a envolvemos nos componentes. Digamos que estamos testando um grande banco de dados de usuários. Não é aconselhável acessar o banco de dados diretamente de nosso arquivo de teste. Em vez disso, criamos uma função simulada, que nos permite usar dados falsos para testar nosso componente.</p>\n<pre><code><span class=\"token function\">describe</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"accepts user account props\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> wrapper <span class=\"token operator\">=</span> <span class=\"token function\">mount</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Account</span></span> <span class=\"token attr-name\">user</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>user<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>wrapper<span class=\"token punctuation\">.</span><span class=\"token function\">props</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toEqual</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"contains users account email\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> wrapper <span class=\"token operator\">=</span> <span class=\"token function\">mount</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Account</span></span> <span class=\"token attr-name\">user</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>user<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> value <span class=\"token operator\">=</span> wrapper<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"p\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">text</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toEqual</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"david@gmail.com\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>Temos dois testes acima e usamos uma describecamada que leva o componente a ser testado. Ao especificar os props e valores que esperamos que sejam aprovados no teste, podemos prosseguir.</p>\n<p>No primeiro teste, verificamos se os objetos que passamos para o componente montado são iguais aos objetos simulados que criamos acima.</p>\n<p>Para o segundo teste, passamos os acessórios do usuário para o Accountcomponente montado . Em seguida, verificamos se podemos encontrar o</p>\n<p>elemento que corresponde ao que temos no Accountcomponente. Quando executamos o conjunto de testes, você verá que o teste é executado com êxito.</p>\n<p>Também podemos testar o estado do nosso componente. Vamos verificar se o estado da mensagem de erro é igual a nulo:</p>\n<pre><code><span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"renders correctly with no error message\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> wrapper <span class=\"token operator\">=</span> <span class=\"token function\">mount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>wrapper<span class=\"token punctuation\">.</span><span class=\"token function\">state</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"error\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toEqual</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>Neste teste, verificamos se o estado do erro de nosso componente é igual a nulo, usando um toEqual()correspondente. Se houver uma mensagem de erro em nosso aplicativo, o teste falhará quando executado.</p>\n<p>Na próxima seção, veremos como testar os componentes React com o teste de instantâneo, outra técnica incrível.</p>\n<h4>Teste Rápido</h4>\n<p>O teste de captura instantânea captura o código de um componente em um momento, a fim de compará-lo a um arquivo de referência instantâneo armazenado ao lado do teste. É usado para acompanhar as alterações na interface do usuário de um aplicativo.</p>\n<p>A representação de código real de uma captura instantânea é um arquivo JSON, e esse JSON contém um registro da aparência do componente quando a captura instantânea foi feita. Durante um teste, o Jest compara o conteúdo desse arquivo JSON com a saída do componente durante o teste. Se combinarem, o teste passa; caso contrário, o teste falha.</p>\n<p>Para converter um wrapper Enzyme em um formato compatível com o teste de captura instantânea Jest, precisamos instalar enzyme-to-json:</p>\n<pre><code>npm install <span class=\"token operator\">--</span>save<span class=\"token operator\">-</span>dev enzyme<span class=\"token operator\">-</span>to<span class=\"token operator\">-</span>json\n</code></pre>\n<p>Vamos criar nosso teste de instantâneo. Quando o executamos pela primeira vez, o instantâneo do código desse componente será composto e salvo em uma nova __snapshots__pasta no srcdiretório</p>\n<pre><code><span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"renders correctly\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> tree <span class=\"token operator\">=</span> <span class=\"token function\">shallow</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">App</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token function\">toJson</span><span class=\"token punctuation\">(</span>tree<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toMatchSnapshot</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>Quando o teste acima for executado com êxito, o componente atual da interface do usuário será comparado ao existente.</p>\n<p>Agora, vamos executar o teste:</p>\n<pre><code>npm run test\n</code></pre>\n<p>Quando o conjunto de testes for executado, um novo instantâneo será gerado e salvo na __snapshots__pasta. Quando executamos um teste posteriormente, o Jest verifica se os componentes correspondem ao instantâneo.</p>\n<p>Conforme explicado na seção anterior, esse shallowmétodo do pacote Enzyme é usado para renderizar um único componente e nada mais. Não renderiza componentes filhos. Em vez disso, fornece uma boa maneira de isolar o código e obter melhores informações durante a depuração. Outro método, denominado mount, é usado para renderizar o DOM completo, incluindo os componentes filhos do componente pai, nos quais estamos executando os testes.</p>\n<p>Também podemos atualizar nosso instantâneo. Vamos fazer algumas alterações em nosso componente para que nosso teste falhe, o que acontecerá porque o componente não corresponde mais ao que temos no arquivo de instantâneo. Para fazer isso, vamos alterar a<br>\ntag em nosso componente de<br>\nLoading…<br>\npara Fetching Users…<br>\n. Quando o teste for executado, é isso que obteremos no terminal:</p>\n<pre><code> <span class=\"token constant\">FAIL</span>  src<span class=\"token operator\">/</span>App<span class=\"token punctuation\">.</span>test<span class=\"token punctuation\">.</span><span class=\"token function\">js</span> <span class=\"token punctuation\">(</span><span class=\"token number\">30</span><span class=\"token punctuation\">.</span>696s<span class=\"token punctuation\">)</span>\n  × renders <span class=\"token function\">correctly</span> <span class=\"token punctuation\">(</span>44ms<span class=\"token punctuation\">)</span>\n\n  ● renders correctly\n\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>received<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toMatchSnapshot</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    Snapshot name<span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">renders correctly\n1\n\n    - Snapshot\n    + Received\n\n      \n        \n          Display Active Users Account Details\n        \n        \n    - Loading...\n    +     Fetching Users...\n        \n      \n\n       7 | it(\"renders correctly\", ()\n=> {\n       8 |   const wrapper = shallow();\n    >  9 |   expect(toJson(wrapper)).toMatchSnapshot();\n         |                           ^      10 | });\n      11 |\n      12 | /* it(\"renders without crashing\", () => {\n\n      at Object. (src/App.test.js:9:27)\n\n › 1 snapshot failed.\nSnapshot Summary\n › 1 snapshot failed from 1 test suite. Inspect your code changes or press </span><span class=\"token template-punctuation string\">`</span></span>u` to update them<span class=\"token punctuation\">.</span>\n\nTest Suites<span class=\"token operator\">:</span> <span class=\"token number\">1</span> failed<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span> total\n<span class=\"token literal-property property\">Tests</span><span class=\"token operator\">:</span>       <span class=\"token number\">1</span> failed<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span> total\n<span class=\"token literal-property property\">Snapshots</span><span class=\"token operator\">:</span>   <span class=\"token number\">1</span> failed<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span> total\n<span class=\"token literal-property property\">Time</span><span class=\"token operator\">:</span>        <span class=\"token number\">92</span><span class=\"token punctuation\">.</span>274s\nRan all test suites related to changed files<span class=\"token punctuation\">.</span>\n\nWatch Usage<span class=\"token operator\">:</span> Press w to show more<span class=\"token punctuation\">.</span>\n</code></pre>\n<p>Se queremos que nosso teste seja aprovado, alteramos o teste para o estado anterior ou atualizamos o arquivo de captura instantânea. Na linha de comando, o Jest fornece instruções sobre como atualizar o instantâneo. Primeiro, pressione wna linha de comando para mostrar mais e, em seguida, pressione upara atualizar o instantâneo.</p>\n<pre><code>› Press u to update failing snapshots<span class=\"token punctuation\">.</span>\n</code></pre>\n<p>Quando pressionamos upara atualizar o instantâneo, o teste será aprovado.</p>\n<h2>Conclusão</h2>\n<p>Espero que você tenha gostado de trabalhar neste tutorial. Aprendemos algumas técnicas de teste Jest usando a biblioteca de testes Enzyme. Também apresentei o processo de execução de um teste, teste de componentes do React, zombaria e teste de instantâneo. Se você tiver alguma dúvida, deixe-a na seção de comentários abaixo e teremos prazer em responder a todas e solucionar quaisquer problemas com você.</p>\n<h3>Recomendações</h3>\n","date":"2020-07-08T00:00:00.000Z","readingTime":18,"title":"React: Guia completo para testa suas aplicações","categories":["react"],"tags":["alisson-suassuna","componente-react","componentes","jest","react","react-dom","react-teste","tipscode"],"description":"Neste artigo, apresentarei uma ferramenta de teste do React chamada Jest, juntamente com a popular biblioteca Enzyme, projetada para testar os componentes do React. Apresentarei as técnicas de teste do Jest, incluindo execução de testes, teste de componentes do React, entre outros. Se você é novo no no mundo dos teste e quer saber como começar, este artigo lhe será muito útil porque começaremos com uma introdução ao teste. No final, você estará entendendo um pouco mais e testando aplicações escritas com React usando Jest e Enzyme.","imgArticle":"/thumbnail-article/react-guia-completo-teste.png","imgHome":"/thumbnail-home/react-guia-completo-teste.png"}],"count":83},"Navigation/0-0-4-0-0":{"expanded":false,"persistent":false},"Icon1/0-0-4-0-0-0-0-0-0-1-0":{"persistent":false},"LeadForm/0-0-4-0-1-1-0-0":{"loading":false,"persistent":false}},"page":{"image":"/image-1200x630.png","status":200,"locale":"pt-BR","title":"TipsCode - TipsCode","description":"TipsCode Descomplicando a Tecnologia"}}