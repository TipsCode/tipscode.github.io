{"instances": {"application":{},"n-0-0-0-0":{},"n-0-0-0-1":{},"n-0-0-0-2":{},"n-0-0-4/artigos/4":{"articles":[{"slug":"criando-um-jogo-em-javascript-mini-curso","content":"<p>É com muito orgulho que apresento a você o meu Mini-Curso Construindo Jogo em JavaScript totalmente GRATUÍTO onde vamos desenvolver juntos passo a passo, linha a linha um jogo chamado Flappy Bird.<\/p>\n<h3>Veja o jogo finalizado<\/h3>\n<p>Criando um jogo em javascript<\/p>\n<p><img src=\"/uploads/2020/04/Flappy-bird-final-1024x670.png\" alt=\"Criando um jogo em javascript\"><\/p>\n<p>Figura 01 - Criando um jogo em javascript<\/p>\n<h3>Mini-Curso Construindo seu Jogo em (JavaScript Puro)<\/h3>\n<p>Clique no botão inscreva-se agora, e receba o mini-curso no seu E-MAIL totalmente Grátis agora mesmo...<\/p>\n<p><a href=\"/mini-curso-construindo-seu-jogo-em-javascript/\">Inscreva-se agora<\/a><\/p>\n<h3>Veja o vídeo de lançamento do mini-curso<\/h3>\n<p>Criando um jogo em javascript<\/p>\n<p>&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/ZuqixZLiP3E&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;/iframe&gt;<\/p>\n<p>O Mini-curso Construindo seu Jogo em JavaScript está organizando em 6 aulas, e você que é INCIANTE tem total condição em fazer esse mini-curso, pois me esforcei bastante para explicar tudo linha a linha, passo a passo, foram horas e horas de gravações e de edição, então aproveite e venha aprender a programar comigo.<\/p>\n<h3>Conteúdos adicionais recomendados<\/h3>\n<p>Criando um jogo em javascript<\/p>\n<p>Saiba tudo sobre <a href=\"/arrow-functions-sintaxe-facil-em-javascript/\">arrow functions<\/a><\/p>\n<p><a href=\"/a-evolucao-das-ferramentas-javascript-moderno/\">A evolução das ferramentas JavaScript<\/a><\/p>\n<p>&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/l0UZ-OqN-20&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;/iframe&gt;<\/p>\n","date":"2020-04-11T00:00:00.000Z","readingTime":0,"title":"Criando um jogo em Javascript, HTML5 e CSS3","description":"É com muito orgulho que apresento a você o meu Mini-Curso Construindo Jogo em JavaScript totalmente GRATUÍTO onde vamos desenvolver juntos passo a passo, linha a linha um jogo chamado Flappy Bird.","imgArticle":"/thumbnail-article/criando-jogo-com-javascript.png","imgHome":"/thumbnail-home/criando-jogo-com-javascript.png"},{"slug":"arrow-functions-sintaxe-facil-em-javascript","content":"<p>As arrow functions foram introduzidas no ES6 como uma nova sintaxe para escrever funções JavaScript. Esse recurso economiza tempo dos desenvolvedores e simplificam o escopo das funções.<\/p>\n<h3>Mini-Curso: Construindo Jogo em JavaScript (GRATUITO)<\/h3>\n<p>Neste mini-curso você vai aprender a construir um jogo do ZERO, passo a passo, linha a linha, usando JavaScript puro, HTML5 e CSS3 e o melhor 100% Grátis. FAÇA SUA INSCRIÇÃO AGORA MESMO.<\/p>\n<p><a href=\"https://bit.ly/mini-curso-criando-game-js\" target=\"_blank\" rel=\"noopener\">Inscreva-se agora<\/a><\/p>\n<h3>O que é Arrow Functions?<\/h3>\n<p>Arrow Functions<\/p>\n<p><img src=\"/uploads/2019/12/Perguntas-para-artigos-300x182.jpg\" alt=\"Arrow Functions\n\"><\/p>\n<p>Figura 01 - Arrow Functions<\/p>\n<p>As arrow functions - também chamadas de funções de &quot;seta gorda&quot;, do CoffeeScript ( uma linguagem transcompilada ) - são uma sintaxe mais concisa para escrever expressões de função. Eles utilizam um novo token =&gt;, que parece uma flecha gorda. As arrow functions são anônimas e alteram a maneira como as funções são vinculadas a palavra reservada this.<\/p>\n<p>As arrow functions tornam nosso código mais conciso e simplificam o escopo da função e a palavra - chave this . São mini-funções de uma linha que funcionam como Lambdas em outras linguagens como C # ou Python. Ao usar as arrow functions, evitamos digitar a palavra-chave function e a palavra-chave return (essas palavras-chaves estão implícitas nas arrow functions) e colchetes.<\/p>\n<h3>Usando as Arrow Functions?<\/h3>\n<p>Arrow Functions<\/p>\n<p>Há várias formas de se escrever uma arrow functions. Abordaremos os comuns aqui para você começar. Vamos transforma funções normais que escrevemos no dia-a-dia em arrow functions.<\/p>\n<pre><code><span class=\"token comment\">// ES5<\/span>\n<span class=\"token keyword\">var<\/span> <span class=\"token function-variable function\">multiplicacao<\/span> <span class=\"token operator\">=<\/span> <span class=\"token keyword\">function<\/span><span class=\"token punctuation\">(<\/span><span class=\"token parameter\">x<span class=\"token punctuation\">,<\/span> y<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">{<\/span>\n  <span class=\"token keyword\">return<\/span> x <span class=\"token operator\">*<\/span> y\n<span class=\"token punctuation\">}<\/span>\n\n<span class=\"token comment\">// ES6 (Arrow Functions)<\/span>\n<span class=\"token keyword\">const<\/span> <span class=\"token function-variable function\">multiplicacao<\/span> <span class=\"token operator\">=<\/span> <span class=\"token punctuation\">(<\/span><span class=\"token parameter\">x<span class=\"token punctuation\">,<\/span> y<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token operator\">=><\/span> <span class=\"token punctuation\">{<\/span> <span class=\"token keyword\">return<\/span> x <span class=\"token operator\">*<\/span> y<span class=\"token punctuation\">}<\/span>\n<\/code><\/pre>\n<p>O exemplo da arrow functions acima permite que um desenvolvedor obtenha o mesmo resultado com menos linhas de código e aproximadamente metade da digitação.<\/p>\n<p>Parênteses não são necessários se apenas uma expressão estiver presente. O exemplo anterior também pode ser escrito dessa forma:<\/p>\n<pre><code><span class=\"token keyword\">const<\/span> <span class=\"token function-variable function\">multiplicacao<\/span> <span class=\"token operator\">=<\/span> <span class=\"token punctuation\">(<\/span><span class=\"token parameter\">x<span class=\"token punctuation\">,<\/span> y<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token operator\">=><\/span> x <span class=\"token operator\">*<\/span> y\n<\/code><\/pre>\n<h4>Sintaxe básica com Parâmetro<\/h4>\n<p>Parênteses são opcionais quando apenas um parâmetro está presente<\/p>\n<pre><code><span class=\"token comment\">// ES5<\/span>\n<span class=\"token keyword\">var<\/span> <span class=\"token function-variable function\">fraseSplitterExs5<\/span> <span class=\"token operator\">=<\/span> <span class=\"token keyword\">function<\/span> <span class=\"token function\">fraseSplitter<\/span><span class=\"token punctuation\">(<\/span><span class=\"token parameter\">frase<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">{<\/span>\n  <span class=\"token keyword\">return<\/span> frase<span class=\"token punctuation\">.<\/span><span class=\"token function\">split<\/span><span class=\"token punctuation\">(<\/span><span class=\"token string\">' '<\/span><span class=\"token punctuation\">)<\/span>\n<span class=\"token punctuation\">}<\/span>\n\n<span class=\"token comment\">// ES6<\/span>\n<span class=\"token keyword\">const<\/span> <span class=\"token function-variable function\">fraseSplitterEs6<\/span> <span class=\"token operator\">=<\/span> <span class=\"token parameter\">frase<\/span> <span class=\"token operator\">=><\/span> frase<span class=\"token punctuation\">.<\/span><span class=\"token function\">split<\/span><span class=\"token punctuation\">(<\/span><span class=\"token string\">\"\"<\/span><span class=\"token punctuation\">)<\/span>\n\nconsole<span class=\"token punctuation\">.<\/span><span class=\"token function\">log<\/span><span class=\"token punctuation\">(<\/span><span class=\"token function\">fraseSplitterEs6<\/span><span class=\"token punctuation\">(<\/span><span class=\"token string\">\"ES6 é muito bom\"<\/span><span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token comment\">// [\"ES6\", \"muito bom\"]<\/span>\n<\/code><\/pre>\n<h4>Sem Parâmetro<\/h4>\n<p>Parênteses são necessários quando nenhum parâmetro está presente.<\/p>\n<pre><code><span class=\"token comment\">//ES5<\/span>\n<span class=\"token keyword\">var<\/span> <span class=\"token function-variable function\">docLogEs5<\/span> <span class=\"token operator\">=<\/span> <span class=\"token keyword\">function<\/span> <span class=\"token function\">docLog<\/span><span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">{<\/span>\n    console<span class=\"token punctuation\">.<\/span><span class=\"token function\">log<\/span><span class=\"token punctuation\">(<\/span>document<span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">;<\/span>\n<span class=\"token punctuation\">}<\/span><span class=\"token punctuation\">;<\/span>\n\n<span class=\"token comment\">//ES6<\/span>\n<span class=\"token keyword\">var<\/span> <span class=\"token function-variable function\">docLogEs6<\/span> <span class=\"token operator\">=<\/span> <span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token operator\">=><\/span> <span class=\"token punctuation\">{<\/span> console<span class=\"token punctuation\">.<\/span><span class=\"token function\">log<\/span><span class=\"token punctuation\">(<\/span>document<span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">;<\/span> <span class=\"token punctuation\">}<\/span><span class=\"token punctuation\">;<\/span>\n<span class=\"token function\">docLogEs6<\/span><span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">;<\/span> <span class=\"token comment\">// #document... &lt;html> ….<\/span>\n<\/code><\/pre>\n<h4>Sem Parâmetro<\/h4>\n<p>Arrow functions, como expressões de função, podem ser usadas para retornar uma expressão literal de objeto. A única ressalva é que o corpo precisa estar entre parênteses, a fim de distinguir entre um bloco e um objeto (os quais usam colchetes).<\/p>\n<pre><code><span class=\"token comment\">//ES5<\/span>\n<span class=\"token keyword\">var<\/span> <span class=\"token function-variable function\">setNomeIdsEs5<\/span> <span class=\"token operator\">=<\/span> <span class=\"token keyword\">function<\/span> <span class=\"token function\">setNomeIds<\/span><span class=\"token punctuation\">(<\/span><span class=\"token parameter\">id<span class=\"token punctuation\">,<\/span> nome<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">{<\/span>\n  <span class=\"token keyword\">return<\/span> <span class=\"token punctuation\">{<\/span>\n    <span class=\"token literal-property property\">id<\/span><span class=\"token operator\">:<\/span> id<span class=\"token punctuation\">,<\/span>\n    <span class=\"token literal-property property\">nome<\/span><span class=\"token operator\">:<\/span> nome\n  <span class=\"token punctuation\">}<\/span><span class=\"token punctuation\">;<\/span>\n<span class=\"token punctuation\">}<\/span><span class=\"token punctuation\">;<\/span>\n\n<span class=\"token comment\">// ES6<\/span>\n<span class=\"token keyword\">var<\/span> <span class=\"token function-variable function\">setNomeIdsEs6<\/span> <span class=\"token operator\">=<\/span> <span class=\"token punctuation\">(<\/span><span class=\"token parameter\">id<span class=\"token punctuation\">,<\/span> nome<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token operator\">=><\/span> <span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">{<\/span> <span class=\"token literal-property property\">id<\/span><span class=\"token operator\">:<\/span> id<span class=\"token punctuation\">,<\/span> <span class=\"token literal-property property\">nome<\/span><span class=\"token operator\">:<\/span> nome <span class=\"token punctuation\">}<\/span><span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">;<\/span>\n\nconsole<span class=\"token punctuation\">.<\/span><span class=\"token function\">log<\/span><span class=\"token punctuation\">(<\/span><span class=\"token function\">setNameIdsEs6<\/span> <span class=\"token punctuation\">(<\/span><span class=\"token number\">2<\/span><span class=\"token punctuation\">,<\/span> <span class=\"token string\">\"Alisson\"<\/span><span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">;<\/span>   <span class=\"token comment\">// Object {id: 2, nome: \"Alisson\"}<\/span>\n<\/code><\/pre>\n<h4>Situações usando as Arrow Functiond<\/h4>\n<p>Agora que abordamos as sintaxes básicas, vamos ver como as funções de seta são usadas.<\/p>\n<p>Um caso de uso comum para arrow functions é a manipulação de arrays. É comum que você precise mapear ou reduzir um array. Exemplo:<\/p>\n<pre><code><span class=\"token keyword\">const<\/span> celulares<span class=\"token operator\">=<\/span> <span class=\"token punctuation\">[<\/span>\n  <span class=\"token punctuation\">{<\/span> <span class=\"token literal-property property\">nome<\/span><span class=\"token operator\">:<\/span><span class=\"token string\">'iphone'<\/span><span class=\"token punctuation\">,<\/span> <span class=\"token literal-property property\">preco<\/span><span class=\"token operator\">:<\/span><span class=\"token number\">649<\/span> <span class=\"token punctuation\">}<\/span><span class=\"token punctuation\">,<\/span>\n  <span class=\"token punctuation\">{<\/span> <span class=\"token literal-property property\">nome<\/span><span class=\"token operator\">:<\/span><span class=\"token string\">'Galaxy S6'<\/span><span class=\"token punctuation\">,<\/span> <span class=\"token literal-property property\">preco<\/span><span class=\"token operator\">:<\/span><span class=\"token number\">576<\/span> <span class=\"token punctuation\">}<\/span><span class=\"token punctuation\">,<\/span>\n  <span class=\"token punctuation\">{<\/span> <span class=\"token literal-property property\">nome<\/span><span class=\"token operator\">:<\/span><span class=\"token string\">'Galaxy Note 5'<\/span><span class=\"token punctuation\">,<\/span> <span class=\"token literal-property property\">preco<\/span><span class=\"token operator\">:<\/span><span class=\"token number\">489<\/span> <span class=\"token punctuation\">}<\/span>\n<span class=\"token punctuation\">]<\/span><span class=\"token punctuation\">;<\/span>\n<\/code><\/pre>\n<p>Poderíamos criar um array de objetos com apenas os nomes ou preços fazendo isso no ES5:<\/p>\n<pre><code><span class=\"token comment\">// ES5<\/span>\n<span class=\"token keyword\">var<\/span> precos <span class=\"token operator\">=<\/span> celulares<span class=\"token punctuation\">.<\/span><span class=\"token function\">map<\/span><span class=\"token punctuation\">(<\/span><span class=\"token keyword\">function<\/span><span class=\"token punctuation\">(<\/span><span class=\"token parameter\">celular<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">{<\/span>\n  <span class=\"token keyword\">return<\/span> celular<span class=\"token punctuation\">.<\/span>preco<span class=\"token punctuation\">;<\/span>\n<span class=\"token punctuation\">}<\/span><span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">;<\/span>\n\nconsole<span class=\"token punctuation\">.<\/span><span class=\"token function\">log<\/span><span class=\"token punctuation\">(<\/span>precos<span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">;<\/span> <span class=\"token comment\">// [649, 576, 489]<\/span>\n<\/code><\/pre>\n<p>Agora usando a arrow functions:<\/p>\n<pre><code><span class=\"token comment\">// ES6<\/span>\n<span class=\"token keyword\">const<\/span> precos <span class=\"token operator\">=<\/span> celulares<span class=\"token punctuation\">.<\/span><span class=\"token function\">map<\/span><span class=\"token punctuation\">(<\/span><span class=\"token parameter\">celular<\/span> <span class=\"token operator\">=><\/span> celular<span class=\"token punctuation\">.<\/span>preco<span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">;<\/span>\nconsole<span class=\"token punctuation\">.<\/span><span class=\"token function\">log<\/span><span class=\"token punctuation\">(<\/span>precos<span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">;<\/span> <span class=\"token comment\">// [649, 576, 489]<\/span>\n<\/code><\/pre>\n<p>Outros exemplos usando agora o método filter:<\/p>\n<pre><code><span class=\"token keyword\">const<\/span> array <span class=\"token operator\">=<\/span> <span class=\"token punctuation\">[<\/span><span class=\"token number\">1<\/span><span class=\"token punctuation\">,<\/span> <span class=\"token number\">2<\/span><span class=\"token punctuation\">,<\/span> <span class=\"token number\">3<\/span><span class=\"token punctuation\">,<\/span> <span class=\"token number\">4<\/span><span class=\"token punctuation\">,<\/span> <span class=\"token number\">5<\/span><span class=\"token punctuation\">,<\/span> <span class=\"token number\">6<\/span><span class=\"token punctuation\">,<\/span> <span class=\"token number\">7<\/span><span class=\"token punctuation\">,<\/span> <span class=\"token number\">8<\/span><span class=\"token punctuation\">,<\/span> <span class=\"token number\">9<\/span><span class=\"token punctuation\">,<\/span> <span class=\"token number\">10<\/span><span class=\"token punctuation\">,<\/span> <span class=\"token number\">11<\/span><span class=\"token punctuation\">,<\/span> <span class=\"token number\">12<\/span><span class=\"token punctuation\">,<\/span> <span class=\"token number\">13<\/span><span class=\"token punctuation\">,<\/span> <span class=\"token number\">14<\/span><span class=\"token punctuation\">,<\/span> <span class=\"token number\">15<\/span><span class=\"token punctuation\">]<\/span><span class=\"token punctuation\">;<\/span>\n\n<span class=\"token comment\">// ES5<\/span>\n<span class=\"token keyword\">var<\/span> divisivelPorTresEs5<span class=\"token operator\">=<\/span> array<span class=\"token punctuation\">.<\/span><span class=\"token function\">filter<\/span><span class=\"token punctuation\">(<\/span><span class=\"token keyword\">function<\/span> <span class=\"token punctuation\">(<\/span><span class=\"token parameter\">v<\/span><span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">{<\/span>\n  <span class=\"token keyword\">return<\/span> v <span class=\"token operator\">%<\/span> <span class=\"token number\">3<\/span> <span class=\"token operator\">===<\/span> <span class=\"token number\">0<\/span><span class=\"token punctuation\">;<\/span>\n<span class=\"token punctuation\">}<\/span><span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">;<\/span>\n\n<span class=\"token comment\">// ES6<\/span>\n<span class=\"token keyword\">const<\/span> divisivelPorTresEs6 <span class=\"token operator\">=<\/span> array<span class=\"token punctuation\">.<\/span><span class=\"token function\">filter<\/span><span class=\"token punctuation\">(<\/span><span class=\"token parameter\">v<\/span> <span class=\"token operator\">=><\/span> v <span class=\"token operator\">%<\/span> <span class=\"token number\">3<\/span> <span class=\"token operator\">===<\/span> <span class=\"token number\">0<\/span><span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">;<\/span>\n\nconsole<span class=\"token punctuation\">.<\/span><span class=\"token function\">log<\/span><span class=\"token punctuation\">(<\/span>divisivelPorTresEs6<span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">;<\/span> <span class=\"token comment\">// [3, 6, 9, 12, 15]<\/span>\n<\/code><\/pre>\n<h4>Promises e retornos de chamadas<\/h4>\n<h3>Mini-Curso: Construindo Jogo em JavaScript (GRATUITO)<\/h3>\n<p>Neste mini-curso você vai aprender a construir um jogo do ZERO, passo a passo, linha a linha, usando JavaScript puro, HTML5 e CSS3 e o melhor 100% Grátis. FAÇA SUA INSCRIÇÃO AGORA MESMO.<\/p>\n<p><a href=\"https://bit.ly/mini-curso-criando-game-js\" target=\"_blank\" rel=\"noopener\">Inscreva-se agora<\/a><\/p>\n<p>O código que faz uso de retornos de chamada assíncronos ou promessas geralmente contém muitas palavras-chaves como function e return. Ao usar promises, essas expressões de função serão usadas para encadeamento. Aqui está um exemplo simples:<\/p>\n<pre><code><span class=\"token comment\">// ES5<\/span>\n<span class=\"token function\">aAsync<\/span><span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">.<\/span><span class=\"token function\">then<\/span><span class=\"token punctuation\">(<\/span><span class=\"token keyword\">function<\/span><span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">{<\/span>\n  <span class=\"token function\">returnbAsync<\/span><span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">;<\/span>\n<span class=\"token punctuation\">}<\/span><span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">.<\/span><span class=\"token function\">then<\/span><span class=\"token punctuation\">(<\/span><span class=\"token keyword\">function<\/span><span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">{<\/span>\n  <span class=\"token function\">returncAsync<\/span><span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">;<\/span>\n<span class=\"token punctuation\">}<\/span><span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">.<\/span><span class=\"token function\">done<\/span><span class=\"token punctuation\">(<\/span><span class=\"token keyword\">function<\/span><span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">{<\/span>\n  <span class=\"token function\">finish<\/span><span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">;<\/span>\n<span class=\"token punctuation\">}<\/span><span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">;<\/span>\n<\/code><\/pre>\n<p>Este código é simplificado e, sem dúvida, mais fácil de ler usando as arrow functions:<\/p>\n<pre><code><span class=\"token comment\">// ES6<\/span>\n<span class=\"token function\">aAsync<\/span><span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">.<\/span><span class=\"token function\">then<\/span><span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token operator\">=><\/span> <span class=\"token function\">bAsync<\/span><span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">.<\/span><span class=\"token function\">then<\/span><span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token operator\">=><\/span> <span class=\"token function\">cAsync<\/span><span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">.<\/span><span class=\"token function\">done<\/span><span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token operator\">=><\/span> finish<span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">;<\/span>\n<\/code><\/pre>\n<p>As arrow funtions também devem simplificar o código NodeJS carregado de retorno de chamada.<\/p>\n<p>O outro benefício do uso das arrow functions com promises / retornos de chamada é que reduz a confusão em torno da palavra-chave this. No código com várias funções aninhadas, pode ser difícil acompanhar e lembrar de vincular o this em um contexto correto. No ES5, você pode usar soluções alternativas, como o método ( que é lento ) ou criar um fechamento usando ..bind var self = this;<\/p>\n<p>Como as arrow funtions permitem manter o escopo do chamador dentro da função, você não precisa criar fechamentos ou usar o bind.self = this.<\/p>\n<p>Sem as funções Arrow, o código da promise seria escrito assim:<\/p>\n<pre><code><span class=\"token comment\">// ES5<\/span>\n<span class=\"token class-name\">API<\/span><span class=\"token punctuation\">.<\/span>prototype<span class=\"token punctuation\">.<\/span><span class=\"token function-variable function\">get<\/span> <span class=\"token operator\">=<\/span> <span class=\"token keyword\">function<\/span><span class=\"token punctuation\">(<\/span><span class=\"token parameter\">resource<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">{<\/span>\n  <span class=\"token keyword\">var<\/span> self <span class=\"token operator\">=<\/span> <span class=\"token keyword\">this<\/span><span class=\"token punctuation\">;<\/span>\n  <span class=\"token keyword\">return<\/span> <span class=\"token keyword\">new<\/span> <span class=\"token class-name\">Promise<\/span><span class=\"token punctuation\">(<\/span><span class=\"token keyword\">function<\/span><span class=\"token punctuation\">(<\/span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,<\/span> reject<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">{<\/span>\n    http<span class=\"token punctuation\">.<\/span><span class=\"token function\">get<\/span><span class=\"token punctuation\">(<\/span>self<span class=\"token punctuation\">.<\/span>uri <span class=\"token operator\">+<\/span> resource<span class=\"token punctuation\">,<\/span> <span class=\"token keyword\">function<\/span><span class=\"token punctuation\">(<\/span><span class=\"token parameter\">data<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">{<\/span>\n      <span class=\"token function\">resolve<\/span><span class=\"token punctuation\">(<\/span>data<span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">;<\/span>\n    <span class=\"token punctuation\">}<\/span><span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">;<\/span>\n  <span class=\"token punctuation\">}<\/span><span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">;<\/span>\n<span class=\"token punctuation\">}<\/span><span class=\"token punctuation\">;<\/span>\n<\/code><\/pre>\n<p>Veja como esse mesmo código ficaria usando as arrow functions:<\/p>\n<pre><code><span class=\"token comment\">// ES6<\/span>\n<span class=\"token class-name\">API<\/span><span class=\"token punctuation\">.<\/span>prototype<span class=\"token punctuation\">.<\/span><span class=\"token function-variable function\">get<\/span> <span class=\"token operator\">=<\/span> <span class=\"token keyword\">function<\/span><span class=\"token punctuation\">(<\/span><span class=\"token parameter\">resource<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">{<\/span>\n  <span class=\"token keyword\">return<\/span> <span class=\"token keyword\">new<\/span> <span class=\"token class-name\">Promise<\/span><span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">(<\/span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,<\/span> reject<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token operator\">=><\/span> <span class=\"token punctuation\">{<\/span>\n    http<span class=\"token punctuation\">.<\/span><span class=\"token function\">get<\/span><span class=\"token punctuation\">(<\/span><span class=\"token keyword\">this<\/span><span class=\"token punctuation\">.<\/span>uri <span class=\"token operator\">+<\/span> resource<span class=\"token punctuation\">,<\/span> <span class=\"token keyword\">function<\/span><span class=\"token punctuation\">(<\/span><span class=\"token parameter\">data<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">{<\/span>\n      <span class=\"token function\">resolve<\/span><span class=\"token punctuation\">(<\/span>data<span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">;<\/span>\n    <span class=\"token punctuation\">}<\/span><span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">;<\/span>\n  <span class=\"token punctuation\">}<\/span><span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">;<\/span>\n<span class=\"token punctuation\">}<\/span><span class=\"token punctuation\">;<\/span>\n<\/code><\/pre>\n<p>Você pode usar expressões de função se precisar de this funções dinâmicas e de arrow functions para um léxico this.<\/p>\n<h3>Armadilhas das Arrow Functions<\/h3>\n<p><img src=\"/uploads/2020/04/armadilha-300x159.png\" alt=\"Arrow Functions\"><\/p>\n<p><strong>Figura 02 - Armadilhas<\/strong><\/p>\n<p>As arrow funtions trazem uma sintaxe de função útil para o ECMAScript, mas, como em qualquer novo recurso, elas vêm com suas próprias armadilhas e truques.<\/p>\n<p>As opiniões dos desenvolvedores variam em quase tudo, incluindo arrow functions. Por essa questão, aqui estão algumas coisas que você deve observar ao usar as arrow functions.<\/p>\n<p>Como mencionado anteriormente, a palavra-chave this funciona de maneira diferente nas arrow functions. Os métodos call (), apply () e bind () não alteram o valor do this. (De fato, o valor de this dentro de uma função simplesmente não pode ser alterado; será o mesmo valor de quando a função foi chamada.) Se você precisar vincular a um valor diferente, precisará usar uma expressão de função.<\/p>\n<h4>Construtores<\/h4>\n<p>As arrow functions não podem ser usadas como construtores, como outras funções. Não os use para criar objetos semelhantes como faria com outras funções. Se você tentar usar new com uma arrow function, ocorrerá um erro. As arrow functions, como funções internas (também conhecidas como métodos), não possuem uma propriedade de protótipo ou outros métodos internos. Como os construtores geralmente são usados para criar objetos semelhantes a classes em JavaScript, você deve usar as novas classes ES6<\/p>\n<h4>Geradores<\/h4>\n<p>As arrow functions são projetadas para serem leves e não podem ser usadas como geradores . Usar a palavra-chave yield no ES6 gerará um erro. Use os geradores ES6 .<\/p>\n<h4>Objeto Argumentos<\/h4>\n<h3>Mini-Curso: Construindo Jogo em JavaScript (GRATUITO)<\/h3>\n<p>Neste mini-curso você vai aprender a construir um jogo do ZERO, passo a passo, linha a linha, usando JavaScript puro, HTML5 e CSS3 e o melhor 100% Grátis. FAÇA SUA INSCRIÇÃO AGORA MESMO.<\/p>\n<p><a href=\"https://bit.ly/mini-curso-criando-game-js\" target=\"_blank\" rel=\"noopener\">Inscreva-se agora<\/a><\/p>\n<p>As arrow functions não possuem variável local, assim arguments como outras funções. O objeto de argumentos é um objeto de array que permite que os desenvolvedores descubram e acessem dinamicamente os argumentos de uma função. Isso é útil porque as funções JavaScript podem receber um número ilimitado de argumentos. As funções de seta não possuem esse objeto.<\/p>\n<h4>Quando devo usar as Arrow Functions?<\/h4>\n<p><img src=\"/uploads/2020/04/perguntas-png-2.png\" alt=\"\"><\/p>\n<p>Figura 03 - Onde devemos usar?<\/p>\n<p>O recurso da arrow function foi um grande passo para a linguagem javascript, veja alguns cenários que é interessante fazer uso desse recurso incrível do ES6:<\/p>\n<ul>\n<li>Use function no escopo global e para propriedades Object.prototype;<\/li>\n<li>Use class para construtores de objetos;<\/li>\n<li>Use arrrow em qualquer outro lugar.<\/li>\n<\/ul>\n<p>Os recursos do Es6 como as arrow functios, let e const , provavelmente se tornarão padrão, a menos que expressões ou declarações de função sejam necessárias. As arrow functions são poderosas, concisas e os desenvolvedores as amam. Talvez seja hora de você começar a usá-los!<\/p>\n<h3>Conclusões<\/h3>\n<p>Sentir a necessidade de escrever esse artigo pois ainda vejo muitos desenvolvedores com dúvidas sobre esse recurso tão legal da linguagem JavaScript, caso eu tenha deixado passa algo por favor deixa aqui nos comentários. Até a próxima.<\/p>\n<h3>Links importantes<\/h3>\n<h5>DO ZERO A PROGRAMADOR<\/h5>\n<p>FULL STACK JAVASCRIPT (REACT + NODEJS)<\/p>\n<p>Nesse super treinamento você vai aprender de forma totalmente prática através de aulas, exercícios e projetos a programação web Javascript focada no mercado de trabalho.<\/p>\n<p><a href=\"/programador-fullstack-8-semanas\">Inscreva-se agora<\/a><\/p>\n<p><a href=\"/a-evolucao-das-ferramentas-javascript-moderno/\">A evolução das ferramentas javascript: Uma linguagem moderna<\/a>  <br>\n<a href=\"/10-tecnicas-do-git-que-vocce-precisa-conhecer/\">Aprenda a utilizar o Git<\/a><\/p>\n<h4>Canal do Youtube<\/h4>\n<p>Arrow Functions<\/p>\n<p>&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/ZuqixZLiP3E&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;/iframe&gt;<\/p>\n","date":"2020-04-07T00:00:00.000Z","readingTime":12,"title":"Arrow Functions: Uma sintaxe concisa em JavaScript","tags":["arrow","arrow-function","arrow-functions","arrow-functions-es6","arrow-functions-javascript","arrow-functions-js","arrow-functions-tutorial","easy-arrow-functions","es6-arrow-functions","fat-arrow","fat-arrow-functions","function","functions","javascript-arrow-function","javascript-arrow-function-tutorial","javascript-arrow-functions","javascript-arrow-functions-explained","javascript-arrow-functions-vs-function","javascript-functions","js-arrow-functions"],"description":"As arrow functions foram introduzidas no ES6 como uma nova sintaxe para escrever funções JavaScript. Esse recurso economiza tempo dos desenvolvedores e simplificam o escopo das funções.","imgArticle":"/thumbnail-article/arrow-function.png","imgHome":"/thumbnail-home/arrow-function.png"},{"slug":"a-evolucao-das-ferramentas-javascript-moderno","content":"<p>O código-fonte das aplicações escritas em JavaScript é tradicionalmente “difícil de entender”, devido ao código ser espalhado pelos arquivos JavaScript, HTML e CSS, além de eventos e dados que fluem por vários caminhos não intuitivos. Como todos os softwares, o ambiente de desenvolvimento JavaScript inclui empacotadores, gerenciadores de pacotes, sistemas de controle de versão e ferramentas de teste. Cada um destes requer alguma curva de aprendizado.<\/p>\n<p>Inconsistências e incompatibilidades entre navegadores historicamente exigiram que vários ajustes e casos especiais fossem espalhados pelo código, e muitas vezes a correção de um bug em um navegador quebra algo em outro navegador. Como resultado, as equipes de desenvolvimento lutam para criar e manter aplicativos de grande escala e alta qualidade, enquanto a demanda pelo que eles fazem aumenta, especialmente no nível de aplicações corporativas em que o impacto nos negócios substituiu “Quantas linhas de código você estabeleceu? &quot;<br>\nPara lidar com essa complexidade, a comunidade de código aberto e as empresas comerciais criaram vários frameworks e bibliotecas, mas esses frameworks e bibliotecas se tornaram cada vez mais complicadas à medida que adicionam mais e mais recursos na tentativa de facilitar o desenvolvimento do programador. Ainda assim, frameworks e bibliotecas oferecem vantagens significativas aos desenvolvedores e também podem organizar e até reduzir a complexidade.<\/p>\n<p>Este artigo discute alguns dos frameworks e bibliotecas mais populares que foram criadas para aliviar o ônus de escrever código de interface do usuário (UI) complexo e aplicações corporativas, especialmente aplicações com uso intenso de dados, podem se beneficiar do uso desses frameworks e componentes de interface do usuário para fornecer aplicações mais rápido, com melhor qualidade e ainda assim permanecer dentro do orçamento de qualquer empresa de desenvolvimento.<\/p>\n<h3>A complexidade do Desenvolvimento Web Moderno<\/h3>\n<p>ferramentas JavaScript<\/p>\n<p><img src=\"/uploads/2020/04/Complexidade.png\" alt=\"ferramentas JavaScript\"><\/p>\n<p>Figura 01: Complexidade - <strong>ferramentas JavaScript<\/strong><\/p>\n<p>Andrew S. Tanenbaum, o inventor do Minix (um precursor do Linux frequentemente usado para criar novos chips e sistemas de computador), disse uma vez 1 : &quot;O bom dos padrões é que você tem muitos por onde escolher&quot;. Os navegadores seguiram vários padrões, mas não todos, e muitos seguiram seu próprio caminho.<\/p>\n<p>Foi aí que o problema começou a chamada &quot;Guerras dos navegadores&quot;. Como cada navegador exibiu os dados desses sites pode ser bem diferente. As incompatibilidades de navegador ainda existem hoje, e pode-se dizer que elas são um pouco piores porque a Web ficou móvel.<\/p>\n<p>Desenvolver no mundo de hoje significa ser o mais compatível possível com o maior número possível de navegadores da Web, incluindo dispositivos móveis e tablets.<\/p>\n<h4>Dispositivos Móveis<\/h4>\n<p><strong>ferramentas JavaScript<\/strong><\/p>\n<p>Aprender Java Android (Android) pode ser difícil se o desenvolvedor não tiver uma base boa com a linguagem. Para a Apple iOS, o Objective C é um mashup da linguagem de programação C e do Smalltalk, que é diferente, mas não totalmente estranho aos desenvolvedores de C ++. (Afinal, os conceitos orientados a objetos são semelhantes.) Mas, dada a vinda de (Apple) Swift e um novo paradigma, “programação orientada a protocolos”, o Objetivo C tem um futuro questionável.<\/p>\n<p>Por outro lado, o mundo JavaScript, por meio das <strong>ferramentas JavaScript<\/strong> e técnicas como React Native ou Progressive Web Apps, permite o desenvolvimento de aplicativos de múltiplas plataformas que se parecem com aplicativos nativos e têm desempenho. Da perspectiva dos negócios, uma empresa pode obter várias vantagens usando apenas um conjunto de <strong>ferramentas JavaScript<\/strong> para criar aplicativos Web e móveis sofisticados.<\/p>\n<p>O mundo JavaScript é particularmente rico em funcionalidades e em pacotes disponíveis. O número é impressionante. O número de tecnologias-chave que ajudam os desenvolvedores a criar aplicações mais rapidamente também é grande, mas a taxa de alteração nesse campo causa o que é chamado de &quot;rotatividade do JavaScript&quot; ou apenas rotatividade. Por exemplo, quando o Angular passou da versão 1 para 2 (e novamente de 3 para 4), as incompatibilidades exigiram um tempo de transferência grave. Até abraçarmos os padrões emergentes de Web Components , nem tudo interoperará com todo o resto.<\/p>\n<p>Uma coisa que se pode dizer é que o investimento em tecnologias antigas não apoiadas por padrões pode limitar a carreira, portanto, a importância dos padrões ECMA e ECMAScript, bem como a aderência a padrões de design mais ou menos comuns (a maioria da programação ainda é, até dia, manutenção do código existente em vez de novas e novas arquiteturas). Usar padrões de design comumente usados, como Model-View-Controller (MVC), Model-View-Viewmodel (MVVM) e Flux, significa que seu código pode ser modificado e mantido mais facilmente do que se você inventar um paradigma totalmente novo.<\/p>\n<p>Ter grandes ecossistemas e usar as <strong>ferramentas JavaScript<\/strong> mais populares, robustas e bem suportadas é uma estratégia comprovada ano após ano para produzir resultados positivos para a empresa e a carreira do desenvolvedor, e ter bibliotecas comuns ou padrão da indústria significa que você pode encontrar colegas de equipe para ajudar com o desenvolvimento e teste. As modernas metodologias de desenvolvimento exigem praticamente o uso de estruturas, bibliotecas reutilizáveis e APIs e componentes bem projetados.<\/p>\n<h3>Frameworks e Bibliotecas Modernas e Populares<\/h3>\n<p>ferramentas JavaScript<\/p>\n<p>O <a href=\"https://insights.stackoverflow.com/survey/2018/#overview\" target=\"_blank\" rel=\"noopener\">Stack Overflow<\/a> , um site de desenvolvedores incrivelmente popular usado para perguntas e respostas (# 57 de acordo com Alexa em janeiro de 2019), rastreia uma grande quantidade de dados sobre a popularidade de várias tecnologias e se tornou uma fonte essencial para desenvolvedores. Sua pesquisa mais recente continuou mostrando a incrível popularidade das bibliotecas e frameworks JavaScript: <strong>ferramentas JavaScript<\/strong>.<\/p>\n<p><a href=\"https://levelup.gitconnected.com/a-recap-of-frontend-development-in-2018-715724c9441d\" target=\"_blank\" rel=\"noopener\"><img src=\"/uploads/2020/04/Estatistica.png\" alt=\"ferramentas JavaScript \"><\/a><\/p>\n<p>Figura 02 - Downloads NPM de Bibliotecas de Front-End Populares. (Fonte)<\/p>\n<p>De acordo com o Stack Overflow, com base no tipo de tags atribuído às perguntas, os oito principais tópicos mais discutidos no site são JavaScript, Java, C #, PHP, Android, Python, jQuery e HTML - e não linguagens C, C ++ ou mais exóticas como Ocaml ou Haskell. Se você estiver criando sites, é muito provável que deseje usar tecnologias populares, porque o número de produtos de código aberto e comerciais / suportados oferece a capacidade de codificar e testar mais rapidamente, resultando em um tempo mais rápido para mercado.<\/p>\n<p>O que isso significa para os desenvolvedores é que o mundo das <strong>ferramentas JavaScript<\/strong> continua a liderar todos os outros no número de desenvolvedores e, embora tecnologias mais antigas como o jQuery ainda sejam populares, claramente React e Angular são importantes e continuam crescendo. O recém-chegado, Vue, também está se tornando cada vez mais popular.<\/p>\n<h3>Angular, React ou Vue - qual escolher?<\/h3>\n<p>ferramentas JavaScript<\/p>\n<p><img src=\"/uploads/2020/04/Escolhas.png\" alt=\"ferramentas JavaScript\"><\/p>\n<p>Figura 03 - Qual escolher? - <strong>ferramentas JavaScript<\/strong><\/p>\n<p>Angular Vs React Vs Vue - existem muitas ferramentas de código aberto. Adicione a isso bibliotecas como Backbone.js e centenas de outras. Como os desenvolvedores podem atualizar seus conhecimentos com a quantidade de opções que temos atualmente no mercado? Qual deles você deveria escolher? Até certo ponto, essa decisão é escolher editores de texto: é uma escolha pessoal, é ferozmente defendida e, no final, cada um pode realmente funcionar para você.<\/p>\n<p>Se a sua principal preocupação é a popularidade em relação as <strong>ferramentas JavaScript<\/strong>, para que você não aprenda um ambiente de programação complicado e rico apenas para ver o apoio murchar, o React está claramente &quot;ganhando&quot;, como mostra a linha de tendência de longo prazo. Mas a popularidade é apenas um atributo em uma longa lista de fatores importantes de decisão.<\/p>\n<p><a href=\"https://medium.com/@davisonpro/react-js-vs-angular-7a7bed92b5f6\" target=\"_blank\" rel=\"noopener\"><img src=\"/uploads/2020/04/Estatista-de-escolha.png\" alt=\"ferramentas JavaScript\"><\/a><\/p>\n<p>Figura 04 - Popularidade (Fonte) - <strong>ferramentas JavaScript<\/strong><\/p>\n<p>Vamos fazer uma rápida analise de cada um deles, para que você possa ter um panorama geral.<\/p>\n<h4>React<\/h4>\n<p><strong>Melhor para<\/strong>: sites que possuem muitos dados dinâmicos e desejam um desempenho muito alto.<\/p>\n<h3>DO ZERO A PROGRAMADOR FULL STACK JAVASCRIPT (React + NodeJS)<\/h3>\n<p>Você sabe por que muitos programadores e programadoras DESISTEM enquanto outros têm SUCESSO? CLIQUE NO BOTÃO SAIBA MAIS E descubra!!<\/p>\n<p><a href=\"/programador-fullstack-8-semanas\">Saiba mais<\/a><\/p>\n<p><img src=\"/uploads/2020/04/React-300x269.png\" alt=\"ferramentas JavaScript \"><\/p>\n<p>React - <strong>ferramentas JavaScript<\/strong><\/p>\n<p>React é a biblioteca JavaScript mais popular . Desenvolvido e de código aberto pelo Facebook em 2013, rapidamente se tornou importante para o desenvolvimento de grandes aplicações Web que envolvem manipulação dinâmica de dados. A grande força do React vem quando os desenvolvedores precisam criar aplicações complexas e querem modularizá-los para que as peças possam ser reutilizadas. O React, por sua própria natureza, possui vantagens de desempenho (consulte o guia <a href=\"https://www.youtube.com/watch?v=h03og1netf0&amp;t=1s\" target=\"_blank\" rel=\"noopener\">primeiros passos com React<\/a> ” para obter mais informações sobre como o React usa DOMs virtuais) e permite que os desenvolvedores escrevam em JSX. O React é especialmente adequado para manipulação de dados em tempo real. O Instagram e o WhatsApp, dois aplicativos da Web extremamente populares, usam o React.<\/p>\n<h5>Vantagens:<\/h5>\n<p><strong>ferramentas JavaScript<\/strong><\/p>\n<ul>\n<li><strong>Fácil de aprender<\/strong>. O React possui uma sintaxe relativamente simples e muito HTML. Por outro lado, o Angular requer uma curva de aprendizado acentuada e o aprendizado de TypeScript (digitação forte). O React funciona com HTML, CSS3 e outras ferramentas familiares e fáceis de aprender;<\/li>\n<li><strong>React é uma biblioteca JavaScript, não um framework<\/strong>. Isso significa que ele fornece um método declarativo de definição dos componentes da interface do usuário. Também pode ser facilmente integrado a outras bibliotecas;<\/li>\n<li><strong>Separe as camadas de dados e apresentação<\/strong>. O React fornece separação de camadas de dados e apresentação e suporta padrões de design MVC, MVVM e Flux;<\/li>\n<li><strong>Ligação DOM. Os desenvolvedores não precisam vincular elementos DOM à funcionalidade<\/strong>. O React lida com isso dividindo a ligação em várias áreas do código. O React também inclui o conceito de um DOM virtual, e apenas os itens que foram alterados são atualizados e exibidos ao usuário;<\/li>\n<li><strong>Componentes reutilizáveis<\/strong>. O React fornece a capacidade de reutilizar componentes de código de qualquer nível a qualquer momento. Isso economiza muito tempo durante o desenvolvimento e facilita o desenvolvimento de atualizações pelos desenvolvedores. Qualquer alteração feita em um componente não afeta outros;<\/li>\n<li><strong>Fluxo de dados unidirecional<\/strong>. React utiliza ligação de dados descendente. Isso ajuda a garantir que quaisquer alterações feitas na estrutura infantil não afetem seus pais. Isso torna o código mais estável e tudo o que o desenvolvedor precisa fazer para alterar um objeto é modificar seu estado e aplicar atualizações. React reforça o fluxo de dados de cima para baixo;<\/li>\n<li><strong>Fluxo de dados unidirecional<\/strong>. React utiliza ligação de dados descendente. Isso ajuda a garantir que quaisquer alterações feitas na estrutura infantil não afetem seus pais. Isso torna o código mais estável e tudo o que o desenvolvedor precisa fazer para alterar um objeto é modificar seu estado e Interoperar com outros componentes . O React pode ser usado com um componente View do Angular ou de outro framework, porque não o vincula a uma pilha de tecnologia específica;<\/li>\n<li><strong>Motor de busca amigável<\/strong>. O React pode ser executado no servidor e o DOM virtual será retornado e renderizado no navegador como uma página da Web comum;<\/li>\n<li><strong><a href=\"https://www.youtube.com/watch?v=i5r9le1kuYA&amp;t=3s\" target=\"_blank\" rel=\"noopener\">Suporta programação Funcional<\/a><\/strong>. O React pode usar bibliotecas de gerenciamentos de estado, por exemplo o Redux.<\/li>\n<\/ul>\n<h5>Desvantagens:<\/h5>\n<p><strong>ferramentas JavaScript<\/strong><\/p>\n<ul>\n<li><strong>A React continua a evoluir<\/strong>. Os desenvolvedores precisam continuar aprendendo e acompanhar as mudanças do React;<\/li>\n<li><strong>JSX pode ser difícil<\/strong>. O React usa ativamente o JSX, permitindo uma mistura de HTML com JavaScript. Embora o JSX possa proteger o código contra injeções de hackers, ele envolve complexidade e uma curva de aprendizado;<\/li>\n<li><strong>React não é uma estrutura completa<\/strong>. A integração dessa biblioteca à cadeia de ferramentas de um desenvolvedor (por exemplo, uma estrutura de suporte ao MVC) precisa ser feita pelo desenvolvedor;<\/li>\n<li><strong>Documentação<\/strong>. Uma das queixas mais frequentes contra o React é a falta de documentação oficial.<\/li>\n<\/ul>\n<h4>Angular<\/h4>\n<p><strong>Melhor para<\/strong>: desenvolvedores que não desejam se incomodar com a integração de bibliotecas em outros frameworks.<\/p>\n<p><img src=\"/uploads/2020/04/Angular.png\" alt=\"ferramentas JavaScript \"><\/p>\n<p>Angular - <strong>ferramentas JavaScript<\/strong><\/p>\n<p>Angular, ou no passado AngularJS, é mais antigo que React e é o segundo mais popular em nossa análise. Foi criado e mantido pelo Google e desenvolvido para atender à necessidade de uma estrutura completa que poderia lidar com aplicações de página única. Uma aplicação de página única (SPA) é uma aplicação Web ou site que atualiza informações e dados reescrevendo dinamicamente à página atual em vez de carregar novas páginas inteiras de um servidor. Portanto, a aplicação se parece mais com um aplicativo de PC de mesa, mas também funciona bem em dispositivos móveis, se projetado corretamente. Todo o código é carregado com um único carregamento de página ou somente páginas parciais são carregadas dinamicamente quando a página é atualizada. O Angular pode ter uma curva de aprendizado relativamente longa, pois é realmente um framework de desenvolvimento completo, mas o próprio Angular não contém componentes de interface do usuário.<\/p>\n<h5>Vantagens:<\/h5>\n<p><strong>ferramentas JavaScript<\/strong><\/p>\n<ul>\n<li><strong>Aplicações de páginas únicas (SPAs)<\/strong>. Angular foi projetado para esse mesmo cenário;<\/li>\n<li><strong>Aplicações Web progressivos (PWAs)<\/strong>. Se você deseja criar aplicativos que se parecem com aplicativos nativos em dispositivos móveis, tablets ou computadores, a Angular possui isso;<\/li>\n<li><strong>Enquadramento em grande escala<\/strong>. O desenvolvedor não precisa integrar o Angular em seu próprio framework e ferramentas MVC. Também suporta padrão de design Flux;<\/li>\n<li><strong>Documentação<\/strong>. Ao contrário de muitas tecnologias da Web, o Angular possui uma extensa documentação com muitos vídeos do YouTube disponíveis. Isso ajuda a diminuir a curva de aprendizado;<\/li>\n<li><strong>API e DOM Universal TransferState<\/strong>. Com esse novo design, o código pode ser compartilhado entre o servidor e o cliente, o que pode melhorar o desempenho;<\/li>\n<li><strong>Otimizador de compilação<\/strong>. Como um bom compilador de otimização, isso remove todo o código de tempo de execução desnecessário, reduzindo o tamanho do aplicativo e melhorando o desempenho;<\/li>\n<li><strong>Ganchos do roteador<\/strong>. Os ciclos do roteador agora podem ser rastreados desde o início das proteções em execução até a ativação ser concluída;<\/li>\n<li><strong>Ligação de dados bidirecional e MVVM (Model-View-View-Model)<\/strong>. A ligação bidirecional minimiza o risco de erros e permite um comportamento singular do aplicativo. Para padrões de design do MVVM, ele tem a capacidade de permitir que os desenvolvedores trabalhem separadamente na mesma seção do aplicativo com o mesmo conjunto de dados;<\/li>\n<li><strong>O Google apoia o Angular<\/strong>. Assim como o Facebook usa o React, o Google usa e continua desenvolvendo o Angular. Também é usado pelo Google Adwords, portanto é provável que haja suporte a longo prazo.<\/li>\n<\/ul>\n<h5>Desvantagens:<\/h5>\n<p><strong>ferramentas JavaScript<\/strong><\/p>\n<ul>\n<li><strong>Sintaxe complexa<\/strong>. Angular pode ser complicado e não se encaixa no estilo de escrever código de todo programador;<\/li>\n<li><strong>Curva de aprendizado grande<\/strong>. O Angular pode ser difícil de aprender, embora a documentação e a ajuda on-line disponíveis até certo ponto ajudem a atenuá-lo;<\/li>\n<li><strong>Difícil compatibilidade com versões anteriores<\/strong>. Mover aplicativos angulares para versões mais recentes pode demorar um pouco, pois a transferência pode ser difícil devido a alterações de versão;<\/li>\n<li><strong>Alta rotatividade de JavaScript<\/strong>. Como o Google e o mundo de código aberto estão melhorando constantemente o Angular, o desenvolvedor precisa acompanhar as novas versões ou correr o risco de desenvolver aplicativos que exigirão portabilidade significativa no futuro, caso precisem ser alterados.<\/li>\n<\/ul>\n<h4>VueJS<\/h4>\n<p><strong>Melhor para:<\/strong> desenvolvedores com aplicações simples e uma menor curva de aprendizado.<\/p>\n<p><img src=\"/uploads/2020/04/vuejs-300x259.png\" alt=\"ferramentas JavaScript \"><\/p>\n<p>Vue - <strong>ferramentas JavaScript<\/strong><\/p>\n<p>O Vue é como se fosse aquele garoto novo do quarteirão e que está ganhando popularidade em um ritmo extraordinário na vizinhança, pois é esse é o Vue. Entre novembro de 2016 e outubro de 2017, uma estimativa de (downloads no npm) mostra o Vue crescendo a uma taxa ridiculamente alta de 13.933,4%, mas os números absolutos de downloads mostram o React em mais de 7 milhões de downloads em outubro de 2017 em comparação aos quase 900.000 do Vue, com o Angular no meio em mais de 2 milhões de downloads a partir do npm. Curiosamente, esse framework e bibliotecas JavaScript continuam a crescer em ritmo crescente. A fonte desses dados é <a href=\"https://npmcharts.com/\" target=\"_blank\" rel=\"noopener\">npm-stat<\/a>.<\/p>\n<p>O Vue encontra um meio termo entre o framework completo e &quot;apenas uma biblioteca&quot;. As funções não essenciais, como roteamento, gerenciamento de estado, cadeias de ferramentas de construção e a CLI são externas, mas todas são mantidas oficialmente, bem documentadas e projetadas para trabalharem juntas. No entanto, você não precisa usá-los todos. O Angular impõe uma certa estrutura sobre como o código é organizado, enquanto o Vue não.<\/p>\n<p>De acordo com o notável desenvolvedor <a href=\"https://jsreport.io/how-is-react-different-from-vue/\" target=\"_blank\" rel=\"noopener\">John Hannah<\/a> - <strong>ferramentas JavaScript<\/strong><\/p>\n<blockquote>\n<p>React e Vue são bastante semelhantes, embora existam algumas diferenças importantes…. Isso faz sentido, já que Evan You, o desenvolvedor do Vue, usou o React como uma de suas inspirações. Eles são muito mais parecidos do que são, digamos, Angular. Na documentação do Vue, vemos que o React e o Vue:<\/p>\n<p>• Utilize um DOM virtual por razões de desempenho;<br>\n• Forneça componentes de exibição reativos e compossíveis;<br>\n• Mantenha o foco na biblioteca principal, com preocupações como roteamento e gerenciamento de estado global manipulados pelas bibliotecas complementares.<\/p>\n<p><a href=\"https://jsreport.io/how-is-react-different-from-vue/\" target=\"_blank\" rel=\"noopener\">John Hannah<\/a><\/p>\n<\/blockquote>\n<p>Como o React, o Vue enfatiza o desempenho, mas, sendo menor, é mais fácil aprender inicialmente<\/p>\n<h5>Vantagens:<\/h5>\n<p><strong>ferramentas JavaScript<\/strong><\/p>\n<ul>\n<li><strong>Fácil de aprender<\/strong>. Usa modelos em vez de JSX. Esses modelos são extensões de HTML, não JavaScript;<\/li>\n<li><strong>Estilo mais simples<\/strong>. O estilo é por meio de tags de estilo ou CSS, com o padrão sendo tags de estilo mais simples;<\/li>\n<li><strong>Gestão do Estado, roteamento<\/strong>, etc. Isso é tratado por bibliotecas externas, (mas mantidas coerentemente). Não impõe uma organização / design de código rígido;<\/li>\n<li><strong>Suporta muitos padrões de design<\/strong>. Não impõe um padrão de design a você, mas o Vue pode suportar MVC ou Flux.<\/li>\n<\/ul>\n<h5>Desvantagens:<\/h5>\n<p><strong>ferramentas JavaScript<\/strong><\/p>\n<ul>\n<li>Ecossistema muito menor. React e Angular, sendo mais maduros, têm ecossistemas muito maiores que o Vue;<\/li>\n<li>Menos rotatividade de JavaScript. O Vue é uma framework, e os desenvolvedores procuram manter sempre atualizado.<\/li>\n<\/ul>\n<h3>Tabela de Visualização<\/h3>\n<p>ferramentas JavaScript<\/p>\n<p>A programação não é apenas uma profissão desafiadora, é uma busca intensamente pessoal e baseada na linguagem que requer pessoas inteligentes - pessoas quase sempre sob enormes pressões de horários e recursos. A seleção de quais <strong>ferramentas JavaScript<\/strong> usar é, como dissemos, intensamente pessoal e geralmente reflete como os desenvolvedores pensam sobre os problemas. Em resumo, é um negócio orientado para as pessoas e geralmente um “esporte de equipe” (daí a necessidade de ferramentas como o Assembla para gerenciar o código-fonte em muitos projetos e muitas pessoas).<\/p>\n<p>Essa tabela de visualização rápida pode ser mais útil para você do que uma análise técnica das <strong>ferramentas JavaScript<\/strong>, porque divide essas três tecnologias em como elas afetam a capacidade de uma pessoa de realmente fazer o trabalho e fornece uma classificação lado a lado. Essas classificações são uma questão de opinião e podem mudar com base na familiaridade do desenvolvedor, estilo de codificação, tipo de padrões de design que eles usam, disponibilidade de outras pessoas ao seu redor que possam fornecer ajuda e orientação e, provavelmente, uma centena de outros fatores.<\/p>\n<p><img src=\"/uploads/2020/04/tabela-de-views.png\" alt=\"ferramentas JavaScript \"><\/p>\n<p>Figura 05 - Tabela de Views <a href=\"https://medium.com/@davisonpro/react-js-vs-angular-7a7bed92b5f6\" target=\"_blank\" rel=\"noopener\">Fonte<\/a><\/p>\n<h3>Os Gigantes - por que reinventar<\/h3>\n<p>ferramentas JavaScript<\/p>\n<p>O desenvolvimento com <strong>ferramentas JavaScript<\/strong> sofisticadas, bibliotecas reutilizáveis e, especialmente, widgets de componentes de UI requer tempo valioso e tempo é dinheiro. O ônus de procurar e juntar diferentes ferramentas livres e de código-fonte aberto (FOSS) pode ser caro e demorado e pode resultar em decepção, pois algumas ferramentas podem ser incompatíveis ou exigir camadas adicionais.<\/p>\n<p>Hoje, os principais indicadores de desempenho mudaram a respeito das <strong>ferramentas JavaScript<\/strong>. A batida implacável dos CIOs e chefes de desenvolvimento não é para linhas de código, o número de pontos de função entregues e outras métricas de engenharia. Eles deram lugar aos objetivos de negócios e, como é assim que os CIOs e cada vez mais CTOs estão sendo medidos, os desenvolvedores também são medidos pelo impacto nos negócios. Esses objetivos de negócios agora incluem reduções de lucro e custo decorrentes de maiores eficiências; geralmente incluem também o tempo de comercialização (TTM, ou o tempo para o DevOps implantar uma solução funcional), barreiras mais baixas à entrada (LBE, começando com ferramentas abertas e código-fonte aberto ou usando downloads gratuitos de avaliação para prototipar) e custo total de propriedade (TCO - quanto essa tecnologia me custará a curto e longo prazo?).<\/p>\n<h3>DO ZERO A PROGRAMADOR FULL STACK JAVASCRIPT (React + NodeJS)<\/h3>\n<p>Você sabe por que muitos programadores e programadoras DESISTEM enquanto outros têm SUCESSO? CLIQUE NO BOTÃO SAIBA MAIS E descubra!!<\/p>\n<p><a href=\"/programador-fullstack-8-semanas\">Saiba mais<\/a><\/p>\n<p>Como resultado, os desenvolvedores estão se tornando mais estratégicos no que é importante para eles - se conscientizando e se alinhando às estratégias de negócios de seus empregadores. Porém, mais do que isso, a fasquia foi aumentada: agora celular, telefone, tablet, PC de mesa, até decodificadores e televisores inteligentes são alvos em potencial para a implantação das ferramentas JavaScript.<\/p>\n<p>Felizmente, existem soluções: a adoção de uma bom framework ou conjunto de bibliotecas pode economizar tempo, dinheiro, esforço, angústia do desenvolvedor e proporcionar um futuro brilhante. Por exemplo, adotar React, Angular ou Vue como base dos esforços de desenvolvimento de uma pessoa oferece vários benefícios, e esses benefícios podem ser selecionados com base nos requisitos e circunstâncias.<\/p>\n<p>O uso de widgets de UI de plataforma cruzada robustos e bem testados, como Sencha Ext JS , ExtReact ou ExtAngular, pode economizar muitos meses por pessoa ao encontrar o que você precisa usar, codificação e tempo de teste. O Sencha garante que todos esses elementos funcionem com a grande maioria dos navegadores da Web, e fazer com que sua aplicação Web funcione nas plataformas Android e iOS sem mais esforço pode evitar que você precise aprender outras linguagens difíceis e complicados. Basta usar o JavaScript.<\/p>\n<p>Para preservar a escolha do desenvolvedor, é bem possível combinar e combinar componentes de interface do usuário de produtos comerciais de código aberto e <a href=\"https://www.sencha.com/\" target=\"_blank\" rel=\"noopener\">Sencha<\/a>. No entanto, o aumento da produtividade vem de encontrar tudo o que você precisa de um fornecedor, reduzindo o tempo de pesquisa de um desenvolvedor.<\/p>\n<h3>Conclusões - ferramentas JavaScript<\/h3>\n<p>ferramentas JavaScript<\/p>\n<p>Bom ficamos por aqui, espero que esse artigo lhe ajude, deu um trabalhão fazer hehe, compartilhe com seus amigos e colegas programadores e programadoras, lembre-se que a escolha de usa tecnologia Y o B é sua ok, esse artigo teve como objetivo apenas trazer alguns dados para que você tenha alguma base na hora de escolhe qual é as ferramentas JavaScript é melhor para seu cenário. Até a próxima.<\/p>\n<p><strong>ferramentas JavaScript -<\/strong> Leia também:<\/p>\n<p><a href=\"/10-tecnicas-do-git-que-vocce-precisa-conhecer/\">10 técnicas sobre o Git<\/a><\/p>\n<p><a href=\"/3-atualizacoes-javascript-voce-precisa-conhece/\">3 Atualizações do JavaScript que vão te levar para o próximo nível<\/a><\/p>\n<p>Assista nosso último vídeo publicado em nosso canal do Youtube: COMO TRABALHAR REMOTAMENTE: 5 DICAS PARA AUMENTAR SUA PRODUTIVIDADE. <strong>ferramentas JavaScript<\/strong><\/p>\n<p>https://www.youtube.com/watch?v=sCEnknD5Tso&amp;t=5s<\/p>\n<p><strong>ferramentas JavaScript<\/strong><\/p>\n","date":"2020-04-01T00:00:00.000Z","readingTime":17,"title":"A evolução das ferramentas JavaScript: Uma linguagem Moderna","tags":["alisson-suassuna","ativar-javascript","ativar-javascript-no-chrome","aula-curso-de-javascript","carrinho-de-ferramentas","como-ativar-o-javascript","como-desativar-o-javascript","desativar-javascript","ferramenta","ferramentas","ferramentas-de-desenvolvimento","ferramentas-desenvolvedores-web","ferramentas-mobile","ferramentas-online","ferramentas-para-desenvolvedor","ferramentas-para-programadores","ferramentas-web-developer","javascript","tipscode","top-5-ferramentas"],"description":"O código-fonte das aplicações escritas em JavaScript é tradicionalmente “difícil de entender”, devido ao código ser espalhado pelos arquivos JavaScript, HTML e CSS, além de eventos e dados que fluem por vários caminhos não intuitivos. Como todos os softwares, o ambiente de desenvolvimento JavaScript inclui empacotadores, gerenciadores de pacotes, sistemas de controle de versão e ferramentas de teste. Cada um destes requer alguma curva de aprendizado.","imgArticle":"/thumbnail-article/a-evolucao-das-ferramentas-javascript-uma-linguagem-moderna.png","imgHome":"/thumbnail-home/a-evolucao-das-ferramentas-javascript-uma-linguagem-moderna.png"},{"slug":"10-tecnicas-do-git-que-vocce-precisa-conhecer","content":"<p>Neste artigo vamos falar sobre as técnicas básicas do Git com as quais você deve estar familiarizado para trabalhar com versionamento em seu projeto. Listei em uma ordem que você seguiria logicamente para contribuir com um repositório, pois a importância de cada etapa é fundamental. Vamos agora a lista.<\/p>\n<h3>1 - Clonagem<\/h3>\n<p>Técnicas do Git<\/p>\n<p>Se você usou o <strong><em>Git<\/em><\/strong> para projetos pessoais, pode ter inicializado um projeto do zero e adicionado a ele com o tempo. Quando você está trabalhando em uma base de código existente, a primeira etapa é clonar a base de código no sistema local. Isso permite que você trabalhe na sua cópia do repositório sem qualquer interferência de outras alterações.<\/p>\n<p>Para clonar um repositório, execute o <strong><em>git clone<\/em><\/strong> comando, seguido pelo caminho para o repositório:<\/p>\n<pre><code>git clone <span class=\"token operator\">/<\/span>path<span class=\"token operator\">/<\/span>to<span class=\"token operator\">/<\/span>repo\n<\/code><\/pre>\n<p>Se sua fonte não residir no mesmo sistema, você pode fazer o SSH para um sistema remoto e clonar também:<\/p>\n<pre><code>git clone username@remote_system_ip<span class=\"token operator\">:<\/span><span class=\"token operator\">/<\/span>path<span class=\"token operator\">/<\/span>to<span class=\"token operator\">/<\/span>repo<span class=\"token operator\">/<\/span>on<span class=\"token operator\">/<\/span>remote\n<\/code><\/pre>\n<p>Se você estiver clonando de uma fonte na Internet, basta adicionar o URL:<\/p>\n<pre><code>git clone https<span class=\"token operator\">:<\/span><span class=\"token operator\">/<\/span><span class=\"token operator\">/<\/span>github<span class=\"token punctuation\">.<\/span>com<span class=\"token operator\">/<\/span>sdaityari<span class=\"token operator\">/<\/span>my_git_project<span class=\"token punctuation\">.<\/span>git\n<\/code><\/pre>\n<p>Sempre que você estiver clonando um repositório, poderá <a href=\"https://git-scm.com/book/en/v2/Git-on-the-Server-The-Protocols\" target=\"_blank\" rel=\"noopener\">escolher vários protocolos<\/a> para se conectar à fonte. No exemplo do GitHub acima, usei o https protocolo.<\/p>\n<h3>2 - Gerenciando controles remotos no Git<\/h3>\n<p>Técnicas do Git<\/p>\n<p>Depois de clonar seu repositório, ele ainda mantém um ponteiro para a fonte. Este ponteiro é um exemplo de controle remoto do Git. Um controle remoto é um ponteiro para outra cópia do mesmo repositório. Quando você clona um repositório, origin é automaticamente criado um ponteiro que aponta para a fonte.<\/p>\n<p>Você pode verificar uma lista de controles remotos em um repositório executando o seguinte comando:<\/p>\n<pre><code>git remove <span class=\"token operator\">-<\/span>v\n<\/code><\/pre>\n<p>Para adicionar um controle remoto, você pode usar o comando <strong><em>git remote add<\/em><\/strong> exemplo:<\/p>\n<pre><code>git remote add remote_name remote_address\n<\/code><\/pre>\n<p>Você pode remover um controle remoto usando o comando <strong><em>git remote remove<\/em><\/strong> exemplo:<\/p>\n<pre><code>git remote remove remote_name\n<\/code><\/pre>\n<p>Se você deseja alterar o endereço de um controle remoto, pode usar comando <strong><em>set-urlcomando<\/em><\/strong> exemplo:<\/p>\n<pre><code>git remote set<span class=\"token operator\">-<\/span>url remote_name new_remote_address\n<\/code><\/pre>\n<h3>3 - Ramificações do Git<\/h3>\n<p>Técnicas do Git<\/p>\n<p>A maior vantagem do Git sobre outros sistemas de controle de versão é o poder de suas ramificações. Antes de abordar o essencial da ramificação, você deve estar se perguntando o que é uma ramificação. Uma ramificação é um ponteiro para uma consolidação no seu repositório, que por sua vez aponta para seu predecessor. Portanto, um ramo representa uma lista de confirmações em ordem cronológica. Ao criar uma ramificação, você efetivamente cria apenas um novo ponteiro para uma confirmação. No entanto, em essência, representa um novo caminho independente de desenvolvimento.<\/p>\n<p>Se você está trabalhando em seu próprio projeto, talvez nunca tenha usado ramificações conscientemente. Por padrão, o Git usa a master ramificação para desenvolvimento. Quaisquer novas confirmações são adicionadas a essa ramificação.<br>\nA ramificação é necessária para o Git bifurcar linhas de trabalho em um projeto. Ao mesmo tempo, pode haver muitos desenvolvedores trabalhando em uma variedade de problemas diferentes. Idealmente, esses problemas são trabalhados em diferentes ramificações para garantir a separação lógica do novo código até a revisão e mesclagem.<\/p>\n<p>Para verificar uma lista de ramificações e a ramificação ativa atual, execute o seguinte comando:<\/p>\n<pre><code>git branch\n<\/code><\/pre>\n<p>Para criar uma nova ramificação, execute o seguinte comando:<\/p>\n<pre><code>git branch new_branch\n<\/code><\/pre>\n<p>Mesmo que o Git crie uma nova ramificação, observe que sua ramificação ativa ainda é a antiga. Para iniciar o desenvolvimento em uma nova ramificação, execute o seguinte:<\/p>\n<pre><code>git checkuot new_branch\n<\/code><\/pre>\n<p>Para criar uma nova ramificação e alterar essa ramificação ativa, execute o seguinte comando:<\/p>\n<pre><code>git checkout <span class=\"token operator\">-<\/span>b new_branch\n<\/code><\/pre>\n<p>Para renomear a ramificação atual, execute o seguinte comando:<\/p>\n<pre><code>git branch <span class=\"token operator\">-<\/span>m new_renamed_branch\n<\/code><\/pre>\n<p>Use a opção -D para remover uma ramificação:<\/p>\n<pre><code>git branch <span class=\"token operator\">-<\/span><span class=\"token constant\">D<\/span> new_renamed_branch\n<\/code><\/pre>\n<p>Caso você queira se aprofunda no assunto acesse <a href=\"https://git-scm.com/docs/git-branch/pt_BR\" target=\"_blank\" rel=\"noopener\">ramificações do Git<\/a><\/p>\n<h3>4 - Atualize seu repositório local: mesclando<\/h3>\n<p>Técnicas do Git<\/p>\n<p>Enquanto verificamos o básico da ramificação no Git, a próxima etapa lógica é mesclar uma ramificação em sua ramificação base quando você terminar de trabalhar em um problema. Para mesclar uma ramificação, execute o seguinte comando:<\/p>\n<pre><code>git checkout base_branch\ngit merge new_branch\n<\/code><\/pre>\n<p>Embora possa parecer um processo fácil, a mesclagem é o processo que consome mais tempo no Git, pois pode gerar conflitos. Isso pode lhe trazer certas dores de cabeça.<\/p>\n<h3>5 - Lidar com Conflitos<\/h3>\n<p>Técnicas do Git<\/p>\n<p>Imagine que você está trabalhando em um arquivo em uma nova ramificação. Depois de confirmar as alterações, você solicita que o Git mescle seu novo ramo com o ramo base. No entanto, a mesma parte do mesmo arquivo na ramificação base foi atualizada desde que você criou a nova ramificação. Como o Git decide quais mudanças manter e quais descartar?<\/p>\n<p>O Git sempre tenta não perder nenhum dado no processo de mesclagem. Se as alterações no mesmo arquivo foram feitas em diferentes partes do arquivo, você pode fugir mantendo os dois conjuntos de alterações. No entanto, se o Git não conseguir decidir quais alterações manter, isso gera um conflito.<\/p>\n<p>Quando um conflito é gerado, a execução git status no seu repositório mostra uma lista de arquivos que foram modificados nos dois ramos que estão sendo mesclados. Se você abrir qualquer arquivo com um conflito, perceberá o seguinte conjunto de linhas:<\/p>\n<pre><code><span class=\"token operator\">&lt;&lt;<\/span><span class=\"token operator\">&lt;&lt;<\/span><span class=\"token operator\">&lt;&lt;<\/span><span class=\"token operator\">&lt;&lt;<\/span> <span class=\"token constant\">HEAD<\/span>\n<span class=\"token operator\">...<\/span>\n<span class=\"token operator\">...<\/span>\n<span class=\"token operator\">===<\/span><span class=\"token operator\">===<\/span><span class=\"token operator\">==<\/span>\n<span class=\"token operator\">...<\/span>\n<span class=\"token operator\">...<\/span>\n<span class=\"token operator\">>>><\/span><span class=\"token operator\">>>><\/span><span class=\"token operator\">>><\/span> new_branch\n<\/code><\/pre>\n<p>A parte do arquivo entre <strong><em>&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD<\/em><\/strong> e <strong><em>========<\/em><\/strong> contém o código presente na ramificação base. As linhas de código entre <strong><em>========<\/em><\/strong> e <strong><em>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; new_branch<\/em><\/strong> estão presentes na <strong><em>new_branch<\/em><\/strong> ramificação. O desenvolvedor que está mesclando o código tem a responsabilidade de decidir qual parte do código (ou uma mistura de ambas as partes) deve ser incluída na mesclagem. Depois de editado, remova os três conjuntos de linhas mostrados, salve o arquivo e confirme as alterações.<\/p>\n<h3>Do ZERO a PROGRAMADOR<\/h3>\n<p>FULL STACK JAVASCRIPT (React + NodeJS)<\/p>\n<p>Nesse super treinamento você vai aprender de forma totalmente prática através de aulas, exercícios e projetos a programação web Javascript focada no mercado de trabalho.<\/p>\n<p>Está rolando um super DESCONTO DE 40% por tempo limitado!<\/p>\n<p><a href=\"/programador-fullstack-8-semanas\">Saiba Mais!<\/a><\/p>\n<h3>6 - Sincronize as alterações com o Controle Remoto<\/h3>\n<p>Técnicas do Git<\/p>\n<p>Embora tenhamos discutido como confirmar o código em novas ramificações e mesclá-lo com a ramificação base, agora vamos ver como você pode sincronizar o código com o controle remoto. Antes de poder publicar suas alterações no controle remoto, é necessário atualizar sua cópia local do repositório para dar conta de quaisquer alterações que possam ter ocorrido desde sua última atualização. Para atualizar as alterações do controle remoto, execute o seguinte comando:<\/p>\n<pre><code>git pull remote remote_branch<span class=\"token operator\">:<\/span>local_branch\n<\/code><\/pre>\n<p>O comando <strong><em>git pull<\/em><\/strong> primeiro baixa os dados do controle remoto e depois se funde com a ramificação local, conforme especificado no comando. Também podem surgir conflitos ao extrair alterações de um controle remoto. Nesse caso, a última linha em um arquivo de conflito conteria, em <strong><em>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; commit_hash<\/em><\/strong> vez de <strong><em>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; new_branch<\/em><\/strong>, onde <strong><em>commit_hash<\/em><\/strong> estaria o hash de identificação para o commit sendo adicionado à sua ramificação.<\/p>\n<p>Para publicar alterações no controle remoto após mesclar com o código mais recente do controle remoto, use o comando <strong><em>git push<\/em><\/strong>:<\/p>\n<pre><code>git push remote local_branch<span class=\"token operator\">:<\/span>remote_branch\n<\/code><\/pre>\n<h3>7 - Git na nuvem: bifurcação<\/h3>\n<p>Técnicas do Git<\/p>\n<p>Se você vai está em equipe que trabalha na nuvem ou vai trabalhar, você precisará entender um conceito adicional chamado fork. Uma bifurcação é uma cópia do repositório central da nuvem sob seu nome de usuário. Você tem acesso de gravação ao seu fork, que é um local seguro para fazer alterações sem afetar o repositório original.<\/p>\n<p>Isso afeta a própria etapa técnica que cobri acima. Você clona seu fork, para que o origin repositório local aponte para o fork na nuvem. Como você obtém as atualizações do repositório mais recente? Você precisa adicionar manualmente um controle remoto upstream, que aponte para o repositório original.<\/p>\n<p>Embora você possa publicar facilmente alterações no seu fork, como você aceita o novo código no repositório original? Isso nos leva ao próximo passo.<\/p>\n<h3>8 - Revisões de código por meio de solicitações pull<\/h3>\n<p>Técnicas do Git<\/p>\n<p>Uma solicitação pull é uma solicitação para mesclar código de uma ramificação para outra. É um conceito desenvolvido desde que os serviços em nuvem para o Git se tornaram populares. Uma solicitação de recebimento resume a comparação entre as duas ramificações em questão e inicia uma discussão entre o desenvolvedor e os administradores da organização.<\/p>\n<p><img src=\"/uploads/2020/03/github-tipscode.png\" alt=\"Técnicas do Git\"><\/p>\n<p><strong><em>Figura 01 - Técnicas do Git<\/em><\/strong><\/p>\n<p>Uma revisão de código pode culminar em mais alterações antes de poder ser mesclada. Quando os administradores estão satisfeitos com as alterações, eles podem ser mesclados com o repositório.<\/p>\n<h3>9 - Conheça os fluxos de trabalho do Git<\/h3>\n<p>Técnicas do Git<\/p>\n<p>Quando você está trabalhando sozinho em um único projeto, provavelmente está usando apenas uma única ramificação. Sem saber, você está aderindo ao fluxo de trabalho centralizado, onde todas as alterações são feitas em uma única ramificação.<\/p>\n<p>O próximo fluxo de trabalho mais complexo é o fluxo de trabalho de ramificação de recursos, em que uma única ramificação é atribuída a cada recurso ou correção de bug. Nenhum desenvolvimento acontece diretamente nas filiais <strong><em>master<\/em><\/strong> ou <strong><em>development<\/em><\/strong>.<\/p>\n<p>Um fluxo de trabalho Git que abrange uma ampla variedade de situações é o fluxo de trabalho Gitflow. Possui ramificações separadas para desenvolvimento, recursos, lançamentos e hotfixes.<\/p>\n<h3>10 - Manipule arquivos grandes: Git LFS<\/h3>\n<p>Técnicas do Git<\/p>\n<p>Embora o Git faça um ótimo trabalho no manuseio de arquivos de texto, ele não consegue rastrear alterações nos arquivos binários e executáveis. Embora você possa adicionar esses arquivos ao Git, isso pode levar a um tamanho de repositório grande, com um aumento no número de confirmações.<\/p>\n<h3>Do ZERO a PROGRAMADOR<\/h3>\n<p>FULL STACK JAVASCRIPT (React + NodeJS)<\/p>\n<p>Nesse super treinamento você vai aprender de forma totalmente prática através de aulas, exercícios e projetos a programação web Javascript focada no mercado de trabalho.<\/p>\n<p>Está rolando um super DESCONTO DE 40% por tempo limitado!<\/p>\n<p><a href=\"/programador-fullstack-8-semanas\">Saiba Mais!<\/a><\/p>\n<p>A solução é usar o <a href=\"https://git-lfs.github.com/\" target=\"_blank\" rel=\"noopener\">Git Large File Storage<\/a>, que lida com arquivos binários grandes por meio do Git. Essa ferramenta armazena esses arquivos na nuvem e os substitui por ponteiros de texto.<\/p>\n<h3>Conclusão<\/h3>\n<p>Técnicas do Git<\/p>\n<p>Bom galera, espero que esse conteúdo ajudo vocês a entender bem essa ferramenta fantástica que você como programador tem a OBRIGAÇÃO aprender, pois qualquer empresa por menor que seja irá utilizar.<\/p>\n<h4>Recomendação de mais conteúdos<\/h4>\n<p>Técnicas do Git<\/p>\n<p><a href=\"/6-ferramentas-primordiais-para-desenvolvedores/\">6 Ferramentas primordiais para Desenvolvedores<\/a><\/p>\n<p><a href=\"/6-ferramentas-primordiais-para-desenvolvedores/\">3 Atualizações JavaScript que você precisa conhecer para mudar de nível<\/a><\/p>\n","date":"2020-03-28T00:00:00.000Z","readingTime":8,"title":"10 Técnicas do Git que Você precisa conhecer","tags":["brasil","ciencias-da-computacao","e-so-tecnica","git","gitup-g3-duo","gitup-git2","palestra-tecnica-do-cisl","programar-do-zero","software","tecnicas","tecnicas-de-programacao","tecnicas-do-git","tecnicas-operacionais"],"description":"Neste artigo vamos falar sobre as técnicas básicas do Git com as quais você deve estar familiarizado para trabalhar com versionamento em seu projeto. Listei em uma ordem que você seguiria logicamente para contribuir com um repositório, pois a importância de cada etapa é fundamental. Vamos agora a lista.","imgArticle":"/thumbnail-article/10-tecnicas-git.png","imgHome":"/thumbnail-home/10-tecnicas-git.png"},{"slug":"10-principais-ferramentas-bibliotecas-do-vuejs","content":"<p>Ferramentas e Bibliotecas do VueJS. A popularidade do Vue continua crescendo cada dia mais e está sendo adotado rapidamente por muitos desenvolvedores, e as ferramentas do Vue.js estão surgindo em todos os lugares. Isso não é sem razão: a curva de aprendizado superficial do Vue, a estrutura clara orientada por funcionalidade e a excelente documentação facilitam a busca por iniciantes e os desenvolvedores mais experientes trocam de outros frameworks, como React ou Angular.<\/p>\n<p>Se você é um desenvolvedor do Vue , mais cedo ou mais tarde, encontrará algumas ferramentas e bibliotecas fundamentais que se destacam da multidão. Usá-los aumentará sua produtividade como desenvolvedor do Vue e fará você se mais profissional.<\/p>\n<p>Essa é uma lista das ferramentas e bibliotecas mais notáveis ​que você deve conhecer e eventualmente usar em seus projetos Vue.js. Ao contrário de muitos outros artigos disponíveis, que listam apenas as bibliotecas de componentes da interface do usuário, essa compilação explora uma mistura muito mais ampla de ferramentas, bibliotecas e plugins no ecossistema Vue.<\/p>\n<p>Selecionamos com base na utilidade, eficácia e exclusividade - e não na popularidade ou classificação por estrelas do GitHub.<\/p>\n<p>Sem mais delongas vamos conhecer a primeira entre as 10:<\/p>\n<h3>1 - Vue CLI<\/h3>\n<p>Bibliotecas do VueJS<\/p>\n<p><img src=\"/uploads/2020/03/Vue-CLI.png\" alt=\"Bibliotecas do VueJS\"><\/p>\n<p>Figura 01: Vue CLI<\/p>\n<p>Parece que ter algum tipo de ferramenta CLI é uma obrigação para todos os frameworks de construções de aplicações em JavaScript atualmente. Vue não é exceção. O <a href=\"https://cli.vuejs.org/\" target=\"_blank\" rel=\"noopener\">Vue CLI<\/a> é um conjunto completo de ferramentas para o rápido desenvolvimento em Vue. Além do scaffolding usual do projeto, ele permite que você experimente novas ideias, mesmo sem criar um projeto completo, usando seu recurso de prototipagem instantânea.<\/p>\n<p>Por padrão, o Vue CLI oferece suporte para as principais ferramentas e tecnologias de desenvolvimento web, como Babel, TypeScript, ESLint, PostCSS, PWA, Jest, Mocha, Cypress e Nightwatch. Isso é possível graças ao seu extensível sistema de plugins. Isso significa que a comunidade pode criar e compartilhar plug-ins reutilizáveis ​​para necessidades comuns.<\/p>\n<p>Mas a cereja no topo do bolo é a poderosa GUI (Vue UI, que vem com a CLI), que permite criar seu projeto facilmente e, em seguida, configurá-lo e gerenciá-lo ao longo do caminho, sem a necessidade de ejeção.<\/p>\n<h3>2 - VuePress<\/h3>\n<p>Bibliotecas do VueJS<\/p>\n<p><img src=\"/uploads/2020/03/VuePress.png\" alt=\"Bibliotecas do VueJS\"><\/p>\n<p>O próximo grande participante no ecossistema do Vue é o <a href=\"https://v1.vuepress.vuejs.org/\" target=\"_blank\" rel=\"noopener\">VuePress,<\/a> um gerador de site estático alimentado pela Vue. Inicialmente criado como uma ferramenta para escrever documentação técnica, agora é um CMS, compacto e poderoso. Desde a versão 1.x, ele oferece ótimos recursos de blog e um poderoso sistema de plugins. Ele vem com um tema padrão (adaptado à documentação técnica), mas você também pode criar temas personalizados ou usar uma opção pré-fabricada da comunidade.<\/p>\n<p>No VuePress, você escreve o conteúdo no Markdown, que é transformado em arquivos HTML estáticos pré-renderizados. Depois que esses arquivos são carregados, seu site é executado como um aplicativo de página única, desenvolvido com o Vue, o Vue Router e o Webpack.<\/p>\n<p>Um dos principais benefícios do VuePress é que você pode incluir o código ou componentes do Vue nos arquivos do Markdown. Isso proporciona grande poder e flexibilidade, pois você pode desenvolver seu site quase como um aplicativo Vue comum, com todos os benefícios resultantes disso.<\/p>\n<h3>3 - Gridsome<\/h3>\n<p>Bibliotecas do VueJS<\/p>\n<p><img src=\"/uploads/2020/03/Gridsome.png\" alt=\"Bibliotecas do VueJS\"><\/p>\n<p>O <a href=\"https://gridsome.org/\" target=\"_blank\" rel=\"noopener\">Gridsome<\/a> tem muitas semelhanças com o VuePress, mas é preciso uma abordagem diferente e muito poderosa ao lidar com fontes de dados. Ele permite que você conecte e use muitos tipos diferentes de dados em seu aplicativo, que são unificados em uma camada do GraphQL. Basicamente, o Gridsome usa o Vue para funcionalidade de front-end e o GraphQL para gerenciamento de dados. A maneira como isso funciona pode ser resumida nas três etapas a seguir:<\/p>\n<p>Você fornece conteúdo nos formatos de dados Markdown, JSON, YAML ou CVS ou importa-o de um CMS como WordPress ou Drupal;<\/p>\n<p>O conteúdo é transformado na camada GraphQL, que fornece gerenciamento de dados centralizado. Em seguida, você usa esses dados para criar sua aplicação com o Vue;<\/p>\n<p>Você implanta arquivos HTML pré-renderizados em hosts da Web estáticos ou CDNs, como Netlify, Amazon S3, Now.sh, Surge.sh, etc.<\/p>\n<p>Existem algumas práticas recomendadas excelentes fornecidas pelo Gridsome, como divisão de código, otimização de ativos, imagens progressivas e pré-busca de links. Portanto, o Gridsome é rápido e também pronto para PWA e amigável para SEO.<\/p>\n<h3>4 - VueX<\/h3>\n<p>Bibliotecas do VueJS<\/p>\n<p><img src=\"/uploads/2020/03/VueX-1024x497.png\" alt=\"Bibliotecas do VueJS\"><\/p>\n<p>O gerenciamento de estado é um dos principais problemas que os desenvolvedores encontram na construção de aplicações web. Para resolver isso, o Vue oferece um sistema de gerenciamento de estado o <a href=\"https://vuex.vuejs.org/\" target=\"_blank\" rel=\"noopener\">Vuex<\/a>. Ele serve como um armazenamento centralizado para todos os componentes em uma aplicação, onde o estado só pode ser alterado de forma previsível. O store é um objeto especial dividido em quatro partes:<\/p>\n<p><strong>state<\/strong> - É um objeto que armazena os dados do aplicativo;<\/p>\n<p><strong>getters<\/strong> - É um objeto que contém métodos usados ​​para abstrair o acesso ao estado;<\/p>\n<p><strong>mutations<\/strong> - É um objeto que contém métodos que afetam diretamente o estado<\/p>\n<p><strong>actions<\/strong> - É um objeto que contém métodos usados ​​para acionar mutações e executar código assíncrono<\/p>\n<p>A store também pode ser dividida em módulos para melhor manutenção.<\/p>\n<h3>5 - Nuxt<\/h3>\n<p>Bibliotecas do VueJS<\/p>\n<p><img src=\"/uploads/2020/03/Nuxt-1024x409.png\" alt=\"Bibliotecas do VueJS\"><\/p>\n<h3>DO ZERO A PROGRAMADOR FULL STACK JAVASCRIPT (React + NodeJS)<\/h3>\n<p>Você sabe por que muitos programadores desistem enquanto outro têm SUCESSO? CLICA AQUI NO BOTÃO SAIBA MAIS E DESCUBRA.<\/p>\n<p><a href=\"/programador-fullstack-8-semanas\">Saibaa mais<\/a><\/p>\n<p>Quando se trata de usar a renderização do lado do servidor (SSR), o <a href=\"https://nuxtjs.org/\" target=\"_blank\" rel=\"noopener\">Nuxt<\/a> é o caminho habitual. O Nuxt é uma estrutura simples e direta para a construção de aplicações universais. Também é modular, portanto, você pode usar apenas os módulos necessários para o seu aplicativo.<\/p>\n<p>Com o Nuxt, você pode criar aplicações renderizados pelo servidor (SSR), aplicações de página única (SPA), aplicações Web progressivos (PWA) ou apenas usá-lo como um gerador de site estático.<\/p>\n<p>Em resumo, o Nuxt poupa você do trabalho tedioso de estruturar e otimizar suas aplicações, proporcionando uma experiência de desenvolvimento simplificada e mais agradável.<\/p>\n<h3>6 - Vuetify<\/h3>\n<p>Bibliotecas do VueJS<\/p>\n<p><img src=\"/uploads/2020/03/VuetiFy-1024x439.png\" alt=\"\"><\/p>\n<p><a href=\"https://vuetifyjs.com/en/\" target=\"_blank\" rel=\"noopener\">O Vuetify<\/a> é uma das maiores bibliotecas de componentes de interface do usuário existentes. Ele oferece um grande conjunto de componentes criados (80+) com base nas especificações do Material Design, o suficiente para quase todas as necessidades de aplicativos.<\/p>\n<p>Você pode usá-lo para criar aplicações SSR, SPAs, PWAs e aplicativos móveis. Você pode iniciar novos aplicativos ou adicioná-los a aplicativos existentes. Oferece temas gratuitos e premium, mas você também pode criar seus próprios. Ele também fornece um sistema para escolher e escolher apenas os componentes em uso, reduzindo drasticamente o tamanho final do seu aplicativo.<\/p>\n<p>Todos os componentes do Vuetify estão muito bem documentados e são fornecidos exemplos claros.<\/p>\n<h3>7 - Quasar<\/h3>\n<p>Bibliotecas do VueJS<\/p>\n<p><img src=\"/uploads/2020/03/Quasar-1024x491.png\" alt=\"Bibliotecas do VueJS\"><\/p>\n<p>Quasar é a versão JavaScript da filosofia Java &quot;escreva uma vez, execute em qualquer lugar&quot;. É uma estrutura universal, alimentada por Vue, que permite escrever aplicativos para diferentes plataformas com a mesma base de código. SPAs, PWAs, aplicativos SSR, aplicativos móveis híbridos ou aplicativos de desktop multiplataforma, você escolhe!<\/p>\n<p>Possui excelente documentação e um conjunto massivo de componentes projetados com desempenho e capacidade de resposta. O Quasar integra as melhores práticas (redução de HTML / CSS / JS, bloqueio de cache, shaking de árvores, mapeamento de origem, divisão de código com carregamento lento, transpilação ES6, quebra de código, acessibilidade) por padrão, para que você possa se concentrar principalmente nos recursos do seu aplicativo. Ele também fornece uma ferramenta CLI para andaimes sem esforço de novos projetos.<\/p>\n<h3>8 - StoryBook<\/h3>\n<p>Bibliotecas do VueJS<\/p>\n<p><img src=\"/uploads/2020/03/StoryBook-1024x479.png\" alt=\"\"><\/p>\n<p>O Vue é um framework principalmente baseada em componentes, portanto, escrever componentes bons e eficientes é crucial para todo desenvolvedor de aplicações. O <a href=\"https://storybook.js.org/\" target=\"_blank\" rel=\"noopener\">Storybook<\/a> pode ser muito útil. Ele permite que você desenvolva, gerencie e teste componentes da interface do usuário em um ambiente isolado e fácil de usar. A ferramenta permite que os desenvolvedores criem componentes independentemente do aplicativo principal e os mostrem interativamente em um ambiente de desenvolvimento isolado, sem se preocupar com dependências e requisitos específicos do aplicativo.<\/p>\n<p>O Storybook fornece muitos complementos, além de uma API flexível para personalizar seu livro de histórias conforme necessário. Você também pode exportar como um aplicativo Web estático e implantar seu projeto em qualquer servidor HTTP.<\/p>\n<h3>9 - Vue Apollo<\/h3>\n<p>Bibliotecas do VueJS<\/p>\n<p><img src=\"/uploads/2020/03/Vue-Apollo.png\" alt=\"Bibliotecas do VueJS\"><\/p>\n<p>Ultimamente há muito burburinho no GraphQL. Portanto, se você já está familiarizado com ele e deseja integrá-lo ao Vue, tente o <a href=\"https://vue-apollo.netlify.com/\" target=\"_blank\" rel=\"noopener\">Vue Apollo<\/a>. Esta biblioteca torna o uso do Vue e GraphQL / Apollo juntos, suave e agradável.<\/p>\n<h3>10 - Eagle.JS<\/h3>\n<p>Bibliotecas do VueJS<\/p>\n<p><a href=\"https://github.com/zulko/eagle.js/\" target=\"_blank\" rel=\"noopener\">Eagle.js<\/a> é um sistema de apresentação de slides poderoso, flexível e exclusivo, construído com o Vue. Permite criar componentes, slides e estilos fáceis de reutilizar nas suas apresentações. Ele também suporta animações, temas e widgets interativos, ótimos para fazer demonstrações na web. O Eagle.js possui uma API simples e hackável, para que você tenha a verdadeira liberdade de criar as apresentações de slides que deseja.<\/p>\n<h3>Bônus: 5 ferramentas e bibliotecas mais notáveis do Vue<\/h3>\n<p>Bibliotecas do VueJS<\/p>\n<h3>DO ZERO A PROGRAMADOR FULL STACK JAVASCRIPT (React + NodeJS)<\/h3>\n<p>Você sabe por que muitos programadores desistem enquanto outro têm SUCESSO? CLICA AQUI NO BOTÃO SAIBA MAIS E DESCUBRA.<\/p>\n<p><a href=\"/programador-fullstack-8-semanas\">Saibaa mais<\/a><\/p>\n<p>Aqui está um bônus para você que ficou até agora: outras cinco ferramentas e bibliotecas que merecem sua atenção.<\/p>\n<p><a href=\"https://github.com/vuejs/vue-devtools\" target=\"_blank\" rel=\"noopener\">O Vue DevTools<\/a> é uma excelente extensão de navegador para depurar aplicativos Vue e Vuex;<\/p>\n<p><a href=\"https://github.com/vuejs/vue-test-utils\" target=\"_blank\" rel=\"noopener\">O Vue Test Utils<\/a> é uma coleção de utilitários úteis para testar os componentes do Vue.<\/p>\n<p><a href=\"https://github.com/vuejs/vue-router\" target=\"_blank\" rel=\"noopener\">O Vue Router<\/a> é o roteador oficial do Vue.<\/p>\n<p><a href=\"https://vue-native.io/\" target=\"_blank\" rel=\"noopener\">O Vue Native<\/a> é um framework JavaScript para aplicativos móveis, semelhante ao React Native.<\/p>\n<p><a href=\"https://weex.apache.org/\" target=\"_blank\" rel=\"noopener\">O Weex<\/a> é um framework para a criação de aplicativos móveis com modernas tecnologias da web, incluindo o Vue.<\/p>\n<h3>Conteúdo complementar<\/h3>\n<p>Bibliotecas do VueJS<\/p>\n<p>https://www.youtube.com/watch?v=dKh8Jc_XgSU<\/p>\n<p>Artigo sugerido: <a href=\"/3-atualizacoes-javascript-voce-precisa-conhece/\">3 Atualizações do JavaScript<\/a><\/p>\n<h3>Conclusão<\/h3>\n<p>Bibliotecas do VueJS<\/p>\n<p>Agora você tem as ferramentas necessárias para criar projetos incríveis, não importa o que sejam: sites, aplicativos, bibliotecas, plugins. Pega essas ferramentas e construa seus projetos.<\/p>\n<p>Como todo ser humano, estou limitado ao meu conhecimento e preferências pessoais, e há uma chance de eu ter perdido uma ferramenta ou biblioteca importante. Então coloca nos comentários aqui alguma que esqueci.<\/p>\n","date":"2020-03-24T00:00:00.000Z","readingTime":8,"title":"10 Principais Ferramentas e Bibliotecas do VueJS","description":"Ferramentas e Bibliotecas do VueJS. A popularidade do Vue continua crescendo cada dia mais e está sendo adotado rapidamente por muitos desenvolvedores, e as ferramentas do Vue.js estão surgindo em todos os lugares. Isso não é sem razão a curva de aprendizado superficial do Vue, a estrutura clara orientada por funcionalidade e a excelente documentação facilitam a busca por iniciantes e os desenvolvedores mais experientes trocam de outros frameworks, como React ou Angular.","imgArticle":"/thumbnail-article/10-ferramentas-bibliotecas.png","imgHome":"/thumbnail-home/10-ferramentas-bibliotecas.png"},{"slug":"9-ferramentas-uteis-para-trabalhar-com-react","content":"<p>O React é uma coleção de ferramentas e bibliotecas independentes entre si. As muitas ferramentas garantem muita liberdade, porque você pode procurar as melhores para o trabalho em questão. No React, existem muitas maneiras de resolver um problema, portanto, conhecer mais do que algumas ferramentas é uma boa ideia. Existem ferramentas que são melhores em certos problemas do que em outros, tudo depende do contexto. Abaixo está uma lista de ferramentas que considero úteis em um projeto React, algumas são mais recentes que outras e algumas resolvem um problema específico ao trabalhar com o React - mas todas são muito úteis.<\/p>\n<h3>Do ZERO a Programador FullStack.<\/h3>\n<p>Neste treinamento você vai aprender tudo o que você precisa saber para se tornar um programador full stack javascript completo.<\/p>\n<p><a href=\"/programador-fullstack-8-semanas\">QUERO ME INSCREVER AGORA<\/a><\/p>\n<p>Para cada ferramenta, fornecerei um breve resumo com informações básicas antes de mergulhar um pouco mais nas coisas legais que ela pode fazer. Lembre-se de que todas essas ferramentas estão sujeitas a alterações.<\/p>\n<h3>1 - create-react-app<\/h3>\n<p>Ferramentas úteis para trabalhar com React<\/p>\n<ul>\n<li>Site: <a href=\"https://create-react-app.dev/\" target=\"_blank\" rel=\"noopener\">https://create-react-<\/a><a href=\"https://create-react-app.dev/\" target=\"_blank\" rel=\"noopener\">app.dev/<\/a><\/li>\n<li>Repositório: <a href=\"https://github.com/facebook/create-react-app\" target=\"_blank\" rel=\"noopener\">https://github.com/facebook/<\/a><a href=\"https://github.com/facebook/create-react-app\" target=\"_blank\" rel=\"noopener\">create-react-a<\/a><a href=\"https://github.com/facebook/create-react-app\" target=\"_blank\" rel=\"noopener\">pp<\/a><\/li>\n<li>Estrelas no GitHub: mais de 60.000<\/li>\n<li>Desenvolvedor: Facebook<\/li>\n<li>Colaboradores: mais de 600<\/li>\n<\/ul>\n<p>Uma ótima maneira de começar um projeto React é através do Create-React-App. Essa ferramenta abstrai grande parte das ferramentas React em uma única dependência. Ferramentas como Webpack, Babel e ESList estão seguras. Você pode iniciar um projeto React inteiro com um único comando. A ferramenta gera um conjunto mínimo de arquivos para que você possa se concentrar no aplicativo.<\/p>\n<p>Por exemplo, para iniciar uma aplicação usando o npx:<\/p>\n<pre><code>npx create<span class=\"token operator\">-<\/span>react<span class=\"token operator\">-<\/span>app <span class=\"token punctuation\">[<\/span>nome <span class=\"token keyword\">do<\/span> projeto<span class=\"token punctuation\">]<\/span>\n<\/code><\/pre>\n<p>A execução do comando acima criará um diretório e gerará todos os arquivos necessários para sua aplicação. O comando instala dependências transitivas sem intervenção. Não há arquivos de configuração complicados, apenas o mínimo necessário para criar seu aplicativo.<\/p>\n<p>As atualizações são encapsuladas por um único pacote NPM. Não é necessário mexer com o webpack com os recursos mais recentes. Você pode atualizar o Create React App com um único comando quando novas versões forem enviadas. Para atualizar, instale o <strong><em>react-scripts@latestpacote NPM.<\/em><\/strong><\/p>\n<p>Dentro da pasta do projeto, você pode encontrar comandos internos. A execução <em><strong>npm start<\/strong><\/em>, por exemplo, inicializa o aplicativo. Durante a execução, o aplicativo carrega todas as alterações feitas no código. À medida que você salva os arquivos do projeto, ele recarrega essas alterações no navegador. Quaisquer erros de compilação que ocorrerem aparecerão no console que executou o aplicativo.<\/p>\n<p>O Create React App está de olho na automação de testes. A execução <strong><em>npm test<\/em><\/strong> ativará o Jest e executará todos os testes em seu projeto. O comando executa um observador no modo interativo, para acompanhar as alterações no arquivo. Conforme você faz as alterações, o inspetor executa apenas os testes afetados. Certifique-se de nomear os arquivos de teste <strong><em>*.test.js<\/em><\/strong> para que o Jest possa buscá-los.<\/p>\n<p>Os desenvolvedores de JavaScript geralmente reclamam que a configuração de ferramentas modernas é difícil. Então, aqui está uma ferramenta que automatiza isso para você sem problemas.<\/p>\n<h4>Vantagens<\/h4>\n<p>Ferramentas úteis para trabalhar com React<\/p>\n<ul>\n<li>Comece com um único comando;<\/li>\n<li>Apenas uma única dependência;<\/li>\n<li>Nenhuma configuração necessária.<\/li>\n<\/ul>\n<h4>Desvantagens<\/h4>\n<p>Ferramentas úteis para trabalhar com React<\/p>\n<ul>\n<li>Nenhuma Renderização no Servidor<\/li>\n<\/ul>\n<h3>2 - Next.js<\/h3>\n<p>Ferramentas úteis para trabalhar com React<\/p>\n<ul>\n<li>Site: <a href=\"https://nextjs.org/\" target=\"_blank\" rel=\"noopener\">https://nextjs.org<\/a><a href=\"https://nextjs.org/\" target=\"_blank\" rel=\"noopener\">/<\/a><\/li>\n<li>Repositório: <a href=\"https://github.com/zeit/next.js/\" target=\"_blank\" rel=\"noopener\">https://github.com/zeit/next.js/<\/a><\/li>\n<li>Estrelas no GitHub: mais de 35.000<\/li>\n<li>Desenvolvedor: ZEIT<\/li>\n<li>Colaboradores: mais de 600<\/li>\n<\/ul>\n<p>O Next.js faz a renderização no lado do servidor por meio de uma aplicação React isomórfico. Não há configuração e leva pouco tempo para começar. Você obtém divisão de código, roteamento baseado em pasta, recarregamento de código ativo e renderização universal. A divisão de código carrega apenas os componentes necessários na página. O roteamento procura uma <strong><em>pages<\/em><\/strong> (pasta) no projeto e localiza o arquivo que corresponde à rota vinculada. O código recarrega os relógios para alterações de arquivos e recarrega partes do aplicativo. Isso é bom para desenvolvedores que gostam de ciclos rápidos de feedback entre alterações de código. A renderização acontece no cliente e no servidor porque o aplicativo é isomórfico. Isso permite a reutilização de código, porque o mesmo código que é executado no servidor também é executado no cliente.<\/p>\n<p>Para iniciar o Next.js execute o seguinte comando:<\/p>\n<pre><code>npm install <span class=\"token operator\">--<\/span>save next react react<span class=\"token operator\">-<\/span>dom\n<\/code><\/pre>\n<p>Certifique-se de criar uma pasta de projeto com um <strong><em>package.json<\/em><\/strong>. Neste arquivo escreva <strong><em>next builde next start scripts<\/em><\/strong>. Esses scripts são mapeados para executar os scripts executados por meio do NPM.<\/p>\n<p>Com o Next.js, você pode hospedar arquivos estáticos criando uma staticpasta. Tudo o que você coloca nesta pasta se torna um ativo estático no aplicativo. Isso permite a veiculação de ativos como imagens ou CSS.<\/p>\n<p>Você pode exportar o Next.js como páginas HTML estáticas para eliminar a renderização do servidor. Na pasta do projeto, <strong><em>next export<\/em><\/strong> gera páginas HTML estáticas que você pode hospedar em qualquer lugar. A exportação suporta quase todos os recursos, URLs dinâmicos, pré-busca, pré-carregamento e importações dinâmicas. Por padrão, não há configuração necessária. Ele gera arquivos HTML estáticos a partir do <strong><em>pages<\/em><\/strong> (diretório). O comando de exportação está dentro do <strong><em>package.json<\/em><\/strong>, então execute-o com <strong><em>npm run export.<\/em><\/strong> Os arquivos de exportação aparecerão no <strong><em>out<\/em><\/strong> diretório.<\/p>\n<h4>Vantagens<\/h4>\n<p>Ferramentas úteis para trabalhar com React<\/p>\n<ul>\n<li>Configuração zero com recursos avançados;<\/li>\n<li>app está pronto para produção sem problemas;<\/li>\n<li>opção HTML estática elimina a renderização do lado do servidor<\/li>\n<\/ul>\n<h4>Desvantagens<\/h4>\n<p>Ferramentas úteis para trabalhar com React<\/p>\n<ul>\n<li>Personalizar rotas pode ser meio complicado de fazer<\/li>\n<\/ul>\n<h3>3 - Redux<\/h3>\n<p>Ferramentas úteis para trabalhar com React<\/p>\n<ul>\n<li>Site: <a href=\"https://redux.js.org/\" target=\"_blank\" rel=\"noopener\">https://redux.js.org/<\/a><\/li>\n<li>Repositório: <a href=\"https://github.com/reduxjs/redux\" target=\"_blank\" rel=\"noopener\">https://github.com/r<\/a><a href=\"https://github.com/reduxjs/redux\" target=\"_blank\" rel=\"noopener\">eduxjs/redu<\/a><a href=\"https://github.com/reduxjs/redux\" target=\"_blank\" rel=\"noopener\">x<\/a><\/li>\n<li>Estrelas do GitHub: mais de 45.000<\/li>\n<li>Desenvolvedor: The Moon<\/li>\n<li>Colaboradores: mais de 700<\/li>\n<\/ul>\n<p>No React, é complicado passar muitos adereços e parâmetros de estado. Uma hierarquia de componentes pode ter muitos componentes. Um erro de parâmetro único em algum ponto da cadeia pode quebra toda a aplicação. Isso faz essa tarefa ser frustrante, quando a depuração de parâmetros tem muitos componentes.<\/p>\n<p>Uma solução melhor é abstrair isso por meio de uma máquina de estado. Redux é um contêiner de estado para aplicações em JavaScript. Todo o estado da aplicação entra em único local. Para mudar de estado, inicie uma ação e deixe os redutores lidarem com o resto. Pense no Redux como uma máquina de estado que modifica as mudanças de estado emitindo ações. O envio de ações é a única maneira de alterar o estado. Os redutores não mudam de estado, mas retornam apenas um novo objeto quando o estado é alterado. Isso faz do redutor uma função pura que mantém o aplicativo previsível. Os bugs costumam rastrear onde há comportamento imprevisível; portanto, os redutores eliminam esse problema.<\/p>\n<p>Redux é uma biblioteca autônoma que você pode usar em JavaScript. As bindings do React estão disponíveis para conectar com uma aplicação React com menos esforço. O disponibiliza o repositório Redux para o componente raiz. O connect é uma função que mapeia os estados para adereços para todos os componentes. A função de conexão alimenta os parâmetros necessários para que cada componente funcione.<\/p>\n<p>Em um aplicativo React típico, há um único componente raiz com uma loja. Pode haver uma hierarquia de lojas Redux que dividem a árvore de estados. É como React, onde um único componente raiz pode ter muitos componentes pequenos.<\/p>\n<p>Para configurar o Redux em um projeto React:<\/p>\n<pre><code>npm install <span class=\"token operator\">--<\/span>save redux react<span class=\"token operator\">-<\/span>redux\n<\/code><\/pre>\n<p>Certifique-se de tratar o Redux e o React-Redux como dependências separadas.<\/p>\n<h4>Vantagens<\/h4>\n<p>Ferramentas úteis para trabalhar com React<\/p>\n<ul>\n<li>Abrace a programação sonora com funções puras;<\/li>\n<li>Bindings estão disponíveis para React;<\/li>\n<li>Automatiza o gerenciamento de Estado.<\/li>\n<\/ul>\n<h4>Desvantagens<\/h4>\n<p>Ferramentas úteis para trabalhar com React<\/p>\n<ul>\n<li>Configurar do zro pode ser um pouco complicado<\/li>\n<\/ul>\n<h3>4 - Enzyme<\/h3>\n<p>Ferramentas úteis para trabalhar com React<\/p>\n<ul>\n<li>Site: <a href=\"https://enzymejs.github.io/enzyme/\" target=\"_blank\" rel=\"noopener\">https://enzymejs.github.io/enzyme/<\/a><\/li>\n<li>Repositório: <a href=\"https://github.com/enzymejs/enzyme\" target=\"_blank\" rel=\"noopener\">https://github.com/enzymejs/enzyme<\/a><\/li>\n<li>Estrelas do GitHub: mais de 15,000+<\/li>\n<li>Desenvolvedor: Airbnb<\/li>\n<li>Colaboradores: mais de 300<\/li>\n<\/ul>\n<p>O Enzyme é como o jQuery para testar os componentes do React. Você pode renderizar componentes rasos sem um navegador e sem um headless. Você pode percorrer, procurar componentes e fazer afirmações. Isso reduz o ciclo de feedback porque elimina o navegador. A renderização superficial é útil porque não vai mais do que um nível. Isso isola o teste em um único nível em uma hierarquia de componentes do React.<\/p>\n<p>A API da enziyme suporta a simulação de eventos. A <strong><em>simulate()<\/em><\/strong> função chama o manipulador de eventos em um único nó. Por exemplo, <strong><em>.simulate('click')<\/em><\/strong> chama <strong><em>onClick<\/em><\/strong><\/p>\n<p>O enzyma vem com um adaptador para cada versão do React. Portanto, <strong><em>enzyme-adapter-react-16<\/em><\/strong> funciona no React 16.4 ou superior. Para o React 16.3.0, use o <strong><em>enzyme-adapter-react-16.3<\/em><\/strong> adaptador. Para o Jest 15+, o Enzyme não precisa mais de nenhuma configuração especial. Para escrever testes, importe as funções React, Enzyme e o sistema em teste na parte superior.<\/p>\n<p>Exemplo em código:<\/p>\n<pre><code><span class=\"token keyword\">import<\/span> React <span class=\"token keyword\">from<\/span> <span class=\"token string\">'react'<\/span><span class=\"token punctuation\">;<\/span>\n<span class=\"token keyword\">import<\/span> <span class=\"token punctuation\">{<\/span> shallow <span class=\"token punctuation\">}<\/span> <span class=\"token keyword\">from<\/span> <span class=\"token string\">'enzyme'<\/span><span class=\"token punctuation\">;<\/span>\n\n<span class=\"token keyword\">import<\/span> Foo <span class=\"token keyword\">from<\/span> <span class=\"token string\">'../Foo'<\/span><span class=\"token punctuation\">;<\/span> <span class=\"token comment\">// system under test<\/span>\n\n<span class=\"token function\">describe<\/span><span class=\"token punctuation\">(<\/span><span class=\"token string\">'A killer test suite'<\/span><span class=\"token punctuation\">,<\/span> <span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token operator\">=><\/span> <span class=\"token punctuation\">{<\/span>\n  <span class=\"token function\">it<\/span><span class=\"token punctuation\">(<\/span><span class=\"token string\">'should shallow render without a browser'<\/span><span class=\"token punctuation\">,<\/span> <span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token operator\">=><\/span> <span class=\"token punctuation\">{<\/span>\n    <span class=\"token comment\">// arrange<\/span>\n    <span class=\"token keyword\">const<\/span> component <span class=\"token operator\">=<\/span> <span class=\"token function\">shallow<\/span><span class=\"token punctuation\">(<\/span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;<\/span><span class=\"token class-name\">Foo<\/span><\/span> <span class=\"token punctuation\">/><\/span><\/span><span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">;<\/span>\n\n    <span class=\"token comment\">// act<\/span>\n    <span class=\"token keyword\">const<\/span> result <span class=\"token operator\">=<\/span> component<span class=\"token punctuation\">.<\/span><span class=\"token function\">contains<\/span><span class=\"token punctuation\">(<\/span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;<\/span>div<\/span> <span class=\"token attr-name\">className<\/span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=<\/span><span class=\"token punctuation\">\"<\/span>foo<span class=\"token punctuation\">\"<\/span><\/span><span class=\"token punctuation\">><\/span><\/span>Bar<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/<\/span>div<\/span><span class=\"token punctuation\">><\/span><\/span><span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">;<\/span>\n\n    <span class=\"token comment\">// assert<\/span>\n    <span class=\"token function\">expect<\/span><span class=\"token punctuation\">(<\/span>result<span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">.<\/span><span class=\"token function\">toBe<\/span><span class=\"token punctuation\">(<\/span><span class=\"token boolean\">true<\/span><span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">;<\/span>\n  <span class=\"token punctuation\">}<\/span><span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">;<\/span>\n<span class=\"token punctuation\">}<\/span><span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">;<\/span>\n<\/code><\/pre>\n<h4>Vantagens<\/h4>\n<p>Ferramentas úteis para trabalhar com React<\/p>\n<ul>\n<li>Renderização superficial isola componentes do React;<\/li>\n<li>API rica para encontrar nós de interesse;<\/li>\n<li>Não há necessidade de um navegador sem headless.<\/li>\n<\/ul>\n<h4>Desvantagens<\/h4>\n<p>Ferramentas úteis para trabalhar com React<\/p>\n<ul>\n<li>Adaptadores podem ser perigosos a cada atualização do React<\/li>\n<\/ul>\n<h3>5 - ExtReact<\/h3>\n<p>Ferramentas úteis para trabalhar com React<\/p>\n<h3>Do ZERO a Programador FullStack.<\/h3>\n<p>Neste treinamento você vai aprender tudo o que você precisa saber para se tornar um programador full stack javascript completo.<\/p>\n<p><a href=\"/programador-fullstack-8-semanas\">QUERO ME INSCREVER AGORA<\/a><\/p>\n<ul>\n<li>Site: <a href=\"https://www.sencha.com/products/extreact/#overview\" target=\"_blank\" rel=\"noopener\">https://www.sencha.com/products/extreact/#overview<\/a><\/li>\n<li>Repositório: <a href=\"https://github.com/sencha/ext-react\" target=\"_blank\" rel=\"noopener\">https://github.com/sencha/ext-react<\/a><\/li>\n<li>Desenvolvedor: Sencha.<\/li>\n<\/ul>\n<p>O React oferece uma abordagem baseada em componentes para a criação de aplicações Web, mas o React por si só não inclui nenhum componente. O ExtReact oferece componentes pré-criados, como menus, grades, gráficos e formulários, para oferecer funcionalidade. A comunidade de código aberto é grande e há muitos componentes disponíveis; no entanto, combater os problemas de compatibilidade entre muitas bibliotecas de componentes e o React é assustador. Uma ideia melhor é reduzir o risco, obtendo o máximo de componentes de menos bibliotecas ou, na melhor das hipóteses, uma única biblioteca. O ExtReact oferece um conjunto mais completo de componentes em um pacote profissional e inclui suporte comercial.<\/p>\n<p>Para começar, você precisará do Node 8.11+, NPM 6+ e Java 8 &amp; 11. Com uma avaliação gratuita, você pode efetuar login no repositório do NPM em <a href=\"https://npm.sencha.com/\" target=\"_blank\" rel=\"noopener\">npm.sencha.com<\/a> . Instale o gerador de aplicativos com <strong><em>npm install -g @sencha/ext-react-gen<\/em><\/strong>. Em seguida, crie uma aplicação com ext-react-gen app [nome do projeto]. Vá para a pasta do projeto e execute um <strong><em>npm startaplicativo<\/em><\/strong> React para barebones.<\/p>\n<p>Importe os componentes ExtReact do <strong><em>ext-react<\/em><\/strong> pacote. Um componente pode vir com seus próprios dados. Muitos acessórios estão disponíveis com funcionalidade pré-criada. Por exemplo, <strong><em>onSelect<\/em><\/strong> informa ao <em><strong>List<\/strong><\/em> componente o que fazer ao clicar em um item da lista. Os classificadores estão disponíveis para classificar os itens da lista no componente.<\/p>\n<p>Por exemplo, vamos imagina que precisamos importar um List componente, em termos de código séria algo assim:<\/p>\n<pre><code><span class=\"token keyword\">import<\/span> React<span class=\"token punctuation\">,<\/span> <span class=\"token punctuation\">{<\/span> Component <span class=\"token punctuation\">}<\/span> <span class=\"token keyword\">from<\/span> <span class=\"token string\">'react'<\/span><span class=\"token punctuation\">;<\/span>\n<span class=\"token keyword\">import<\/span> <span class=\"token punctuation\">{<\/span> List <span class=\"token punctuation\">}<\/span> <span class=\"token keyword\">from<\/span> <span class=\"token string\">'@sencha/ext-modern'<\/span><span class=\"token punctuation\">;<\/span>\n\n<span class=\"token keyword\">export<\/span> <span class=\"token keyword\">default<\/span> <span class=\"token keyword\">class<\/span> <span class=\"token class-name\">BasicList<\/span> <span class=\"token keyword\">extends<\/span> <span class=\"token class-name\">Component<\/span> <span class=\"token punctuation\">{<\/span>\n  store <span class=\"token operator\">=<\/span> Ext<span class=\"token punctuation\">.<\/span><span class=\"token function\">create<\/span><span class=\"token punctuation\">(<\/span><span class=\"token string\">'Ext.data.Store'<\/span><span class=\"token punctuation\">,<\/span> <span class=\"token punctuation\">{<\/span>\n    <span class=\"token literal-property property\">autoLoad<\/span><span class=\"token operator\">:<\/span> <span class=\"token boolean\">true<\/span><span class=\"token punctuation\">,<\/span>\n    <span class=\"token literal-property property\">proxy<\/span><span class=\"token operator\">:<\/span> <span class=\"token punctuation\">{<\/span>\n      <span class=\"token literal-property property\">type<\/span><span class=\"token operator\">:<\/span> <span class=\"token string\">'rest'<\/span><span class=\"token punctuation\">,<\/span>\n      <span class=\"token literal-property property\">url<\/span><span class=\"token operator\">:<\/span> <span class=\"token string\">'data/people.json'<\/span>\n    <span class=\"token punctuation\">}<\/span><span class=\"token punctuation\">,<\/span>\n    <span class=\"token literal-property property\">sorters<\/span><span class=\"token operator\">:<\/span> <span class=\"token punctuation\">[<\/span><span class=\"token string\">'first_name'<\/span><span class=\"token punctuation\">]<\/span>\n  <span class=\"token punctuation\">}<\/span><span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">;<\/span>\n\n  <span class=\"token function-variable function\">tpl<\/span> <span class=\"token operator\">=<\/span> <span class=\"token parameter\">data<\/span> <span class=\"token operator\">=><\/span> <span class=\"token punctuation\">(<\/span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;<\/span>div<\/span><span class=\"token punctuation\">><\/span><\/span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;<\/span>div<\/span><span class=\"token punctuation\">><\/span><\/span><span class=\"token punctuation\">{<\/span>data<span class=\"token punctuation\">.<\/span>first_name<span class=\"token punctuation\">}<\/span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/<\/span>div<\/span><span class=\"token punctuation\">><\/span><\/span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/<\/span>div<\/span><span class=\"token punctuation\">><\/span><\/span>\n  <span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">;<\/span>\n\n  <span class=\"token function-variable function\">onSelect<\/span> <span class=\"token operator\">=<\/span> <span class=\"token punctuation\">(<\/span><span class=\"token parameter\">list<span class=\"token punctuation\">,<\/span> record<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token operator\">=><\/span> <span class=\"token punctuation\">{<\/span>\n    console<span class=\"token punctuation\">.<\/span><span class=\"token function\">log<\/span><span class=\"token punctuation\">(<\/span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`<\/span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${<\/span>record<span class=\"token punctuation\">.<\/span><span class=\"token function\">get<\/span><span class=\"token punctuation\">(<\/span><span class=\"token string\">'first_name'<\/span><span class=\"token punctuation\">)<\/span><span class=\"token interpolation-punctuation punctuation\">}<\/span><\/span><span class=\"token template-punctuation string\">`<\/span><\/span><span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">;<\/span>\n  <span class=\"token punctuation\">}<\/span><span class=\"token punctuation\">;<\/span>\n\n  <span class=\"token function\">render<\/span><span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">{<\/span>\n    <span class=\"token keyword\">return<\/span> <span class=\"token punctuation\">(<\/span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;<\/span><span class=\"token class-name\">List<\/span><\/span>\n        <span class=\"token attr-name\">shadow<\/span>\n        <span class=\"token attr-name\">itemTpl<\/span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=<\/span><span class=\"token punctuation\">{<\/span><span class=\"token keyword\">this<\/span><span class=\"token punctuation\">.<\/span>tpl<span class=\"token punctuation\">}<\/span><\/span>\n        <span class=\"token attr-name\">store<\/span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=<\/span><span class=\"token punctuation\">{<\/span><span class=\"token keyword\">this<\/span><span class=\"token punctuation\">.<\/span>store<span class=\"token punctuation\">}<\/span><\/span>\n        <span class=\"token attr-name\">onSelect<\/span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=<\/span><span class=\"token punctuation\">{<\/span><span class=\"token keyword\">this<\/span><span class=\"token punctuation\">.<\/span>onSelect<span class=\"token punctuation\">}<\/span><\/span>\n      <span class=\"token punctuation\">/><\/span><\/span>\n    <span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">;<\/span>\n  <span class=\"token punctuation\">}<\/span>\n<span class=\"token punctuation\">}<\/span>\n<\/code><\/pre>\n<p>O ExtReact oferece mais de 115 componentes de interface do usuário pré-criados com suporte comercial completo. Os componentes ExtReact são criados para uma integração perfeita durante a vida útil do aplicativo.<\/p>\n<h4>Vantagens<\/h4>\n<p>Ferramentas úteis para trabalhar com React<\/p>\n<ul>\n<li>Ampla variedade de componentes React pré-construídos;<\/li>\n<li>Menos dependências sobre as muitas opções de código aberto;<\/li>\n<li>Componentes profissionais com suporte comercial<\/li>\n<\/ul>\n<h4>Desvantagem<\/h4>\n<p>Ferramentas úteis para trabalhar com React<\/p>\n<ul>\n<li>Dependência em Java (kkkkkkkkkk, brincadeira. Java é uma linguagem muito bacana.)<\/li>\n<\/ul>\n<h3>6 - React Dev Tools<\/h3>\n<p>Ferramentas úteis para trabalhar com React<\/p>\n<ul>\n<li>Site: <a href=\"https://addons.mozilla.org/en-US/firefox/addon/react-devtools/\" target=\"_blank\" rel=\"noopener\">https://addons.mozilla.org/en-US/firefox/addon/react-devtools/<\/a><\/li>\n<li>Repositório: <a href=\"https://github.com/facebook/react-devtools\" target=\"_blank\" rel=\"noopener\">https://github.com/facebook/react-devtools<\/a><\/li>\n<li>Estrelas no GitHub: mais de 9.000<\/li>\n<li>Desenvolvedor: Facebook<\/li>\n<li>Colaboradores: mais de 100<\/li>\n<\/ul>\n<p>As Ferramentas do desenvolvedor do React permitem inspecionar os componentes do React diretamente no navegador. Ele pode inspecionar uma hierarquia de componentes, com adereços e estado. É fornecido como uma extensão do navegador para o Chrome e Firefox. O navegador Opera pode instalar a extensão do Chrome com a opção de extensões do Chrome ativadas. O ícone da extensão acende nos sites usando o React e diz para abrir as ferramentas do desenvolvedor.<\/p>\n<p>Nos aplicativos React, observe a guia React nas ferramentas do desenvolvedor. Clicar na guia mostra uma hierarquia de componentes e uma exibição em árvore será mostrada. Componentes com estado mostram um botão de recolhimento de árvore que tem uma cor diferente. Você pode navegar na árvore com as teclas de seta ou hjkl caso use o Vim. Clicar com o botão direito fornece opções como mostrar no painel de elementos, rolar para exibição ou mostrar código-fonte.<\/p>\n<p>O painel lateral fornece mais informações sobre cada componente. Ele permite que você faça alterações no navegador e destaca essas alterações. Você pode manipular adereços e estado, além de armazenar objetos como uma variável global.<\/p>\n<p>Use a barra de pesquisa para encontrar componentes pelo nome. Isso economiza seu tempo quando há muitos componentes em uma árvore. A barra de pesquisa suporta regex para fazer pesquisas precisas. Uma dica é encontrar o componente usando o inspetor DOM regular ou a guia Elementos. Escolha o elemento da página e mude para a guia Reagir. O componente é selecionado na árvore React. Clicar com o botão direito do mouse tem a opção de “Localizar o nó DOM”, que leva você de volta à guia regular.<\/p>\n<h4>Vantagens<\/h4>\n<p>Ferramentas úteis para trabalhar com React<\/p>\n<ul>\n<li>Ajuda a visualizar componentes React em uma árvore<\/li>\n<li>Manipular e depurar componentes<\/li>\n<li>Ferramentas de pesquisa úteis para localizar determinado componente<\/li>\n<\/ul>\n<h4>Desvantagens<\/h4>\n<p>Ferramentas úteis para trabalhar com React<\/p>\n<ul>\n<li>Complemento extra, mas oferece uma versão autônoma<\/li>\n<\/ul>\n<h3>7 - Redux Dev Tools<\/h3>\n<p>Ferramentas úteis para trabalhar com React<\/p>\n<ul>\n<li>Site: <a href=\"https://addons.mozilla.org/en-US/firefox/addon/reduxdevtools/\" target=\"_blank\" rel=\"noopener\">https://addons<\/a><a href=\"https://addons.mozilla.org/en-US/firefox/addon/reduxdevtools/\" target=\"_blank\" rel=\"noopener\">.<\/a><a href=\"https://addons.mozilla.org/en-US/firefox/addon/reduxdevtools/\" target=\"_blank\" rel=\"noopener\">mozilla.org/en-US/firefox/addon/reduxdevtools/<\/a><\/li>\n<li>Repositório: <a href=\"https://github.com/reduxjs/redux-devtools\" target=\"_blank\" rel=\"noopener\">https://github.com/reduxjs/redux-devtools<\/a><\/li>\n<li>Estrelas do GitHub: mais de 10.000<\/li>\n<li>Desenvolvedor: The Moon<\/li>\n<li>Colaboradores: mais de 70<\/li>\n<\/ul>\n<p>A Ferramentas do desenvolvedor Redux suportam hot reloading e ação de repetição. Trata-se de uma extensão do navegador, independente. O componente React está dentro do aplicativo host. A ferramenta permite inspecionar cada carga útil de estado e ação. Ou volte no tempo cancelando ações. Fazer alterações no código reavalia as ações marcadas como preparadas.<\/p>\n<p>Instale a extensão através da Chrome Web Store ou dos complementos da Mozilla. O componente React está disponível para navegadores que não suportam a extensão. Alterações no seu projeto são necessárias para usar a extensão. A extensão deve ser configurada na loja Redux, junto com as opções de extensão.<\/p>\n<p>Por exemplo, para configurar o Redux Developer Tools com opções:<\/p>\n<pre><code><span class=\"token keyword\">const<\/span> store <span class=\"token operator\">=<\/span> <span class=\"token function\">createStore<\/span><span class=\"token punctuation\">(<\/span>\n  window<span class=\"token punctuation\">.<\/span>__REDUX_DEVTOOLS_EXTENSION__ <span class=\"token operator\">&amp;&amp;<\/span> window<span class=\"token punctuation\">.<\/span><span class=\"token function\">__REDUX_DEVTOOLS_EXTENSION__<\/span><span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">{<\/span>\n    actionCreators<span class=\"token punctuation\">,<\/span>\n    <span class=\"token literal-property property\">trace<\/span><span class=\"token operator\">:<\/span> <span class=\"token boolean\">true<\/span><span class=\"token punctuation\">,<\/span>\n    <span class=\"token literal-property property\">traceLimit<\/span><span class=\"token operator\">:<\/span> <span class=\"token number\">5<\/span>\n  <span class=\"token punctuation\">}<\/span><span class=\"token punctuation\">)<\/span>\n<span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">;<\/span>\n<\/code><\/pre>\n<p>As ações disponíveis no Dispatcher são originadas pelo actionCreators. Esta é uma lista de funções de ações. Importe todas as ações de interesse do projeto para essa variável. Os rastreadores incluirão o rastreamento de pilha para cada ação despachada. Inspecionar o guia Rastreio permite clicar para acessar o código. O valor padrão para esta opção é falso. Um limite de rastreamento define os quadros máximos de pilha mostrados, o padrão é 10.<\/p>\n<p>A aplicação de qualquer middleware requer composeWithDevTools. Obtenha essa função do redux-devtools-extension pacote NPM. A applyMiddleware função entra nesta função como um parâmetro. Isso permite que a ferramenta dev funcione com o middleware.<\/p>\n<h4>Vantagens<\/h4>\n<p>Ferramentas úteis para trabalhar com React<\/p>\n<ul>\n<li>Ferramenta de passagem de tempo do estado da aplicação<\/li>\n<li>Mantém o controle de alterações de código com hot realoding<\/li>\n<li>Rastreios de pilha de depuração por ação<\/li>\n<\/ul>\n<h4>Desvantagens<\/h4>\n<p>Ferramentas úteis para trabalhar com React<\/p>\n<ul>\n<li>Configuração requer alterações no código do projeto<\/li>\n<\/ul>\n<h3>8 - Redux-immutable-state-invariant<\/h3>\n<p>Ferramentas úteis para trabalhar com React<\/p>\n<ul>\n<li>Site: <a href=\"https://www.npmjs.com/package/redux-immutable-state-invariant\" target=\"_blank\" rel=\"noopener\">https://www.npmjs.com/package/redux-immutable-state-invariant<\/a><\/li>\n<li>Repositório: <a href=\"https://github.com/leoasis/redux-immutable-state-invariant\" target=\"_blank\" rel=\"noopener\">https://github.com/leoasis/redux-immutable-state-invariant<\/a><\/li>\n<li>Estrelas no GitHub: mais de 700<\/li>\n<li>Desenvolvedor: leoasis<\/li>\n<li>Colaboradores: mais de 10<\/li>\n<\/ul>\n<p>O Redux-immutable-state-invariant é um middleware que gera um erro ao alterar o estado dentro ou entre despachantes. Os redutores assumem que os argumentos não mudam de estado. Toda vez que os redutores retornam o estado, ele deve ser um novo objeto. Uma boa prática é evitar o estado de mutação fora do redutor. Isso requer uma atenção a mais por parte do programado(a)r. Portanto, uma boa ideia é automatizar essa inspeção por meio de uma ferramenta.<\/p>\n<p>Redux-immutable-state-invariant é útil para detectar erros apenas durante o desenvolvimento. Ela faz muitas cópias de objetos para reforçar a imutabilidade. Isso significa alto consumo de memória, o que prejudica o desempenho da aplicação. Por esse motivo, não ative essa ferramenta na produção. Uma ideia é definir uma variável de ambiente <strong><em>NODE_ENV<\/em><\/strong>, por exemplo, para <strong><em>production<\/em><\/strong>.<\/p>\n<p>Para fazer uso desta biblioteca como um middleware:<\/p>\n<pre><code><span class=\"token keyword\">import<\/span> <span class=\"token punctuation\">{<\/span> applyMiddleware<span class=\"token punctuation\">,<\/span> createStore <span class=\"token punctuation\">}<\/span> <span class=\"token keyword\">from<\/span> <span class=\"token string\">'redux'<\/span><span class=\"token punctuation\">;<\/span>\n\n<span class=\"token keyword\">let<\/span> middleware <span class=\"token operator\">=<\/span> <span class=\"token punctuation\">[<\/span><span class=\"token punctuation\">]<\/span><span class=\"token punctuation\">;<\/span>\n\n<span class=\"token comment\">// Be sure to ONLY add this middleware in development!<\/span>\n<span class=\"token keyword\">if<\/span> <span class=\"token punctuation\">(<\/span>process<span class=\"token punctuation\">.<\/span>env<span class=\"token punctuation\">.<\/span><span class=\"token constant\">NODE_ENV<\/span> <span class=\"token operator\">!==<\/span> <span class=\"token string\">'production'<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">{<\/span>\n  middleware<span class=\"token punctuation\">.<\/span><span class=\"token function\">push<\/span><span class=\"token punctuation\">(<\/span><span class=\"token function\">require<\/span><span class=\"token punctuation\">(<\/span><span class=\"token string\">'redux-immutable-state-invariant'<\/span><span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">.<\/span><span class=\"token function\">default<\/span><span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">;<\/span>\n<span class=\"token punctuation\">}<\/span>\n\n<span class=\"token keyword\">const<\/span> store <span class=\"token operator\">=<\/span> <span class=\"token function\">createStore<\/span><span class=\"token punctuation\">(<\/span>\n  <span class=\"token function\">applyMiddleware<\/span><span class=\"token punctuation\">(<\/span><span class=\"token operator\">...<\/span>middleware<span class=\"token punctuation\">)<\/span>\n<span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">;<\/span>\n<\/code><\/pre>\n<p>Se você não está mudando de estado, a ferramenta desaparece. Mude o estado dentro ou entre despachantes e a ferramenta grita com uma mensagem de erro. Mantém você no seu melhor comportamento de programação, como qualquer boa ferramenta deveria.<\/p>\n<h4>Vantagens<\/h4>\n<p>Ferramentas úteis para trabalhar com React<\/p>\n<ul>\n<li>Funciona com qualquer fluxo de trabalho;<\/li>\n<li>Automatiza a disciplina do programador;<\/li>\n<li>Gera erros com uma mensagem descritiva<\/li>\n<\/ul>\n<h4>Desvantagens<\/h4>\n<p>Ferramentas úteis para trabalhar com React<\/p>\n<ul>\n<li>Muitas cópias de objetos afetam o desempenho.<\/li>\n<\/ul>\n<h3>9 - Redux-logger<\/h3>\n<p>Ferramentas úteis para trabalhar com React<\/p>\n<ul>\n<li>Site: <a href=\"https://www.npmjs.com/package/redux-logger\" target=\"_blank\" rel=\"noopener\">https://www.npmjs.com/package/redux-logger<\/a><\/li>\n<li>Repositório: <a href=\"https://github.com/leoasis/redux-immutable-state-invariant\" target=\"_blank\" rel=\"noopener\"><\/a> <a href=\"https://github.com/LogRocket/redux-logger\" target=\"_blank\" rel=\"noopener\">https://github.com/LogRocket/redux-logger<\/a><\/li>\n<li>Estrelas no GitHub: mais de 4.000<\/li>\n<li>Desenvolvedor: LogRocket<\/li>\n<li>Colaboradores: mais de 40<\/li>\n<\/ul>\n<h3>Do ZERO a Programador FullStack.<\/h3>\n<p>Neste treinamento você vai aprender tudo o que você precisa saber para se tornar um programador full stack javascript completo.<\/p>\n<p><a href=\"/programador-fullstack-8-semanas\">QUERO ME INSCREVER AGORA<\/a><\/p>\n<p>Um logger de ações para Redux. Captura as ações do expedidor no console de log do navegador. Vem com muitas opções e permite uma visão de cada ação despachada. À medida que as ações percorrem à aplicação, isso captura e permite que você faça drill de cada ação. Cada entrada de log captura o estado anterior e o atual e a ação do expedidor. Pense em cada ação como uma mensagem de log. O criador de logs permite que você veja como essas mensagens se parecem quando mudam de estado da aplicação.<\/p>\n<p>Para usar o criador de logs, configure-o no repositório Redux:<\/p>\n<pre><code><span class=\"token keyword\">import<\/span> <span class=\"token punctuation\">{<\/span> applyMiddleware<span class=\"token punctuation\">,<\/span> createStore <span class=\"token punctuation\">}<\/span> <span class=\"token keyword\">from<\/span> <span class=\"token string\">'redux'<\/span><span class=\"token punctuation\">;<\/span>\n\n<span class=\"token comment\">// Logger with default options<\/span>\n<span class=\"token keyword\">import<\/span> logger <span class=\"token keyword\">from<\/span> <span class=\"token string\">'redux-logger'<\/span><span class=\"token punctuation\">;<\/span>\n\n<span class=\"token keyword\">const<\/span> store <span class=\"token operator\">=<\/span> <span class=\"token function\">createStore<\/span><span class=\"token punctuation\">(<\/span>\n  <span class=\"token function\">applyMiddleware<\/span><span class=\"token punctuation\">(<\/span>logger<span class=\"token punctuation\">)<\/span>\n<span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">;<\/span>\n<\/code><\/pre>\n<p>Verifique se o criador de logs é o último argumento <strong><em>applyMiddleware<\/em><\/strong> para capturar ações. Estão disponíveis opções para alterar o comportamento do criador de logs. Você precisará importar <strong><em>createLogger<\/em><\/strong> de <strong><em>redux-logger<\/em><\/strong>. Em seguida, chame a <strong><em>createLogger<\/em><\/strong> função com um objeto de opções. Por exemplo, <strong><em>predicate<\/em><\/strong> especifica uma função que é chamada antes de cada ação. Fazer <strong><em>(getState, action) =&gt; action.type !== UP_COUNT<\/em><\/strong> filtra ações que aumentam a contagem. Uma <strong><em>collapsed<\/em><\/strong> opção é uma função que retorna true se o grupo de logs entrar em colapso. Fazer <strong><em>(getState, action) =&gt; action.type === DOWN_COUNT<\/em><\/strong> reduz os tipos de ação que reduzem a contagem.<\/p>\n<h4>Vantagens<\/h4>\n<p>Ferramentas úteis para trabalhar com React<\/p>\n<ul>\n<li>Captura ações do expedidor como mensagens de log;<\/li>\n<li>Permite detalhar cada ação e inspecionar o estado da aplicação;<\/li>\n<li>opções permitem ajustar o que é capturado.<\/li>\n<\/ul>\n<h4>Desvantagens<\/h4>\n<p>Ferramentas úteis para trabalhar com React<\/p>\n<ul>\n<li>Somente logger do lado do cliente.<\/li>\n<\/ul>\n<h3>Conclusão<\/h3>\n<p>Ferramentas úteis para trabalhar com React<\/p>\n<p>A utilidade do React decorre de ser uma coleção de ferramentas e bibliotecas que funcionam bem. Essas ferramentas geralmente são leves, para que você possa usa como se fosse um plug-and-play. A programação não é reinventar a roda, mas reutilizar as soluções existentes que funcionam bem. A popularidade do React decorre do fato de que você pode escolher o que resolve o problema de imediato. Isso permite que você se concentre em problemas que ainda não têm uma boa solução. Espero que esse artigo lhe ajude, deixa um comentário de alguma outra ferramenta que não foi listadas aqui neste artigo e compartilha esse conteúdo com mais programadores e programadoras. Abraço e até o próximo conteúdo.<\/p>\n<h4>Veja também<\/h4>\n<p>Ferramentas úteis para trabalhar com React<\/p>\n<ul>\n<li><a href=\"/6-linguagens-e-frameworks-para-aprender-2020/\">6 Linguagens e Frameworks para aprender em 2020<\/a><\/li>\n<li><a href=\"https://www.youtube.com/channel/UCZKLK7o6IVayeEjkkoWLwbQ\" target=\"_blank\" rel=\"noopener\">Visite nosso canal do Youtube<\/a><\/li>\n<\/ul>\n<h4>Vídeo Recomendado<\/h4>\n<p>Conheça o BigInt o Mais Novo (Tipo de Dados do Javascript )<\/p>\n<p>https://www.youtube.com/watch?v=1ZsicM1eOeM&amp;t=3s<\/p>\n","date":"2020-03-20T00:00:00.000Z","readingTime":19,"title":"19 Ferramentas úteis para trabalhar com React: Aumentando sua produtividade","tags":["development","environment","google","programacao","react","reacto","science","visual-studio-code","vs-code"],"description":"O React é uma coleção de ferramentas e bibliotecas independentes entre si. As muitas ferramentas garantem muita liberdade, porque você pode procurar as melhores para o trabalho em questão. No React, existem muitas maneiras de resolver um problema, portanto, conhecer mais do que algumas ferramentas é uma boa ideia. Existem ferramentas que são melhores em certos problemas do que em outros, tudo depende do contexto. Abaixo está uma lista de ferramentas que considero úteis em um projeto React, algumas são mais recentes que outras e algumas resolvem um problema específico ao trabalhar com o React - mas todas são muito úteis.","imgArticle":"/thumbnail-article/19-ferramentas-react.png","imgHome":"/thumbnail-home/19-ferramentas-react.png"},{"slug":"6-ferramentas-primordiais-para-desenvolvedores","content":"<p>Vamos explorar neste artigo 6 ferramentas primordiais para um desenvolvedor, caso você desconheça algumas dessas ferramentas recomendo muito forte que preste atenção em cada uma delas, pois elas vão lhe ajudar a aumentar sua produtividade na hora de escrever seu código.<\/p>\n<h3>1 - Oh My Zsh<\/h3>\n<p>Ferramentas primordiais<\/p>\n<p><img src=\"/uploads/2020/03/Oh-My-Zsh.jpg\" alt=\"Ferramentas primordiais\"><\/p>\n<p><strong>Figura 01 - Oh My Zsh<\/strong><\/p>\n<p>O Oh My Zsh é um invólucro para o shell Z que faz do seu terminal uma ferramenta fantástica para se trabalhar.<\/p>\n<p>Além de vários temas, funções de úteis e padrões internos, podemos desfruta de vários <em>plugins<\/em> para funcionalidade estendida, incluindo <em>Docker<\/em> ,<em>Kubernetes Kubectl<\/em> e <em>tmux<\/em>, entre outras coisas .<\/p>\n<h3>2 - Direnv<\/h3>\n<p>Ferramentas primordiais<\/p>\n<p><img src=\"/uploads/2020/03/Direnv.png\" alt=\"Ferramentas primordiais\"><\/p>\n<p><strong>Figura 02 - Direnv<\/strong><\/p>\n<p>direnv é uma extensão do shell que carrega automaticamente variáveis de ambiente quando você escreve o comando cd para entra em um diretório.<\/p>\n<p>É muito bom para aqueles momentos que estamos trabalhando em vários projetos que exigem variáveis ENV diferentes - ou mesmo valores diferentes para as mesmas variáveis ENV.<\/p>\n<p>É fácil de instalar, e é ainda mais fácil escrever o .envrcarquivo porque ele é apenas um monte de export BLAH=BLAHdeclarações que você já está escrevendo em seus .profileou .*rcarquivos.<\/p>\n<p>Quando você sai do diretório com o .envrcarquivo, ele desativa automaticamente essas variáveis ENV!<\/p>\n<h3>3 - Lighthouse / Chrome DevTools<\/h3>\n<p>Ferramentas primordiais<\/p>\n<p><img src=\"/uploads/2020/03/Farol-devTools.png\" alt=\"Ferramentas primordiais\"><\/p>\n<p>Figura 03 - Lighthouse/Chrome DevTools<\/p>\n<p>O Lighthouse (com funcionalidades incorporadas no Chrome) é um plug-in de código aberto para verificar o desempenho do seu site.<\/p>\n<p>Com tudo, desde a compactação de texto até os recursos de bloqueio de renderização, a ferramenta varre um determinado site e gera um relatório para ajudá-lo a descobrir o que está atrapalhando sua página.<\/p>\n<p>Isso é extremamente importante para tornar os sites com bom desempenho e acessíveis.<\/p>\n<p>Muitos desenvolvedores entram no desenvolvimento da Web e aprendem principalmente a montar sites que parecem realmente agradáveis. Mas o desempenho é um princípio frequentemente ignorado que é tão importante quanto estético.<\/p>\n<p>Alguns sites são tão grandes em tamanho e carregam tantos recursos que são praticamente inutilizáveis em conexões lentas da Internet ou gastam grandes quantidades de bateria em dispositivos móveis.<\/p>\n<p>Use-o e veja quanto você pode acelerar e otimizar seu site.<\/p>\n<p>Nota: Essa ferramenta também está disponível para execução em servidores Web hospedados localmente por meio das Ferramentas Web do Chrome. Cmd + Alt + I → Guia Auditoria → Gerar relatório.<\/p>\n<h3>Deseja de uma vez por todas aprender a Stack JS (JavaScript + Node + React?)<\/h3>\n<p>Clique neste vídeo incrivel do Leonardo, ele desenvolveu u método que se você seguir 100% você se tornará um profissional Full Stack em 8 SEMANAS.<\/p>\n<p><a href=\"/programador-fullstack-8-semanas\">Ver Vídeo<\/a><\/p>\n<h3>4 - Vim-plug and Melpa Stable<\/h3>\n<p>Ferramentas primordiais<\/p>\n<p><img src=\"/uploads/2020/03/Vim-plug.png\" alt=\"Ferramentas primordiais\"><\/p>\n<p>Figura 04 - vim-plug<\/p>\n<p>Se você é um usuário ávido do Vim ou do Emacs, saberá que existem muitos plugins altamente úteis para os dois editores de texto para facilitar sua vida.<\/p>\n<p>Do destaque da sintaxe à indexação de símbolos, esses plugins podem adicionar um pouco de útilidades ou deixar seu editor de texto mais poderoso do que muitas Ides por aí. Por exemplo, o recurso Clojure do Emacs Live .<\/p>\n<p>vim-plug e MELPA Stable são gerenciadores de plugins para Vim e Emacs, respectivamente. O uso deles para instalar todos os plugins necessários torna toda a experiência integrada e integrada.<\/p>\n<h3>5 - command-line fuzzy finder (fzf)<\/h3>\n<p>Ferramentas primordiais<\/p>\n<p><img src=\"/uploads/2020/03/command-line.png\" alt=\"\"><\/p>\n<p>Figura 05: command-line<\/p>\n<p>O command-line fuzzy finder(ou fzf) é uma ferramenta de pesquisa difusa usada para localizar rapidamente arquivos em uma árvore de diretórios. Aliás, foi escrito pelo mesmo engenheiro que criou o vim-plug ( Junegunn Choi ).<\/p>\n<p>Essa ferramenta é extremamente rápida porque está escrita em Go e usa threads simultâneos para dividir e conquistar cargas de trabalho.<\/p>\n<h3>6 - The Silver Searcher (Ag)<\/h3>\n<p>Ferramentas primordiais<\/p>\n<p><img src=\"/uploads/2020/03/AG.png\" alt=\"Ferramentas primordiais\"><\/p>\n<p>Figura 06 - The Silver Searcher (Ag)<\/p>\n<p>O Silver Searcher (Ag) é basicamente um pesquisador inteligente, que faz uso de esteróides.<\/p>\n<p>Enquanto fzf (acima) é ótimo para pesquisar nomes de arquivos, o Ag é ótimo para pesquisar conteúdo desses arquivos por tokens e correspondências específicos.<\/p>\n<p>O que o torna realmente ótimo e impressionante é que ele ignora automaticamente os arquivos que fazem parte do seu arquivo .gitignore O Ag tem um tempo de pesquisa incrivelmente rápido, porque está pesquisando apenas os arquivos importantes.<\/p>\n<p>Por padrão, os resultados da saída da Ag também fornecem um número de linha. Tecnicamente, você pode conseguir tudo o que a Ag faz fornecendo muitos argumentos grep, mas, no final do dia, a Ag ainda é várias vezes mais rápida - e continua a ficar ainda mais rápido.<\/p>\n<h3>Deseja de uma vez por todas aprender a Stack JS (JavaScript + Node + React?)<\/h3>\n<p>Clique neste vídeo incrivel do Leonardo, ele desenvolveu u método que se você seguir 100% você se tornará um profissional Full Stack em 8 SEMANAS.<\/p>\n<p><a href=\"/programador-fullstack-8-semanas\">Ver Vídeo<\/a><\/p>\n<h3>Conclusão<\/h3>\n<p>Ferramentas primordiais<\/p>\n<p>Chegamos a o fim de mais um artigo aqui do site tipscode, neste virmos 6 ferramentas primordiais para um desenvolvedor, espero do fundo do coração te ajudado você que chegou até aqui, deixa um comentário se você ja usa ou já usou algumas dessas ferramentas citadas no artigo e qual foi sua experiência usando elas.<\/p>\n<p>Leia também: <a href=\"/3-atualizacoes-javascript-voce-precisa-conhece/\">3 Atualizações JavaScript que você precisa conhecer para mudar de nível<\/a><\/p>\n<h4>Se inscreva em nosso canal do Youtube<\/h4>\n<p>Ferramentas primordiais<\/p>\n<p>https://www.youtube.com/watch?v=-FIvpqVpWVU<\/p>\n","date":"2020-03-14T00:00:00.000Z","readingTime":4,"title":"6 Ferramentas primordiais para Desenvolvedores","tags":["100-ferramentas-coaching","100-ferramentas-de-coaching","coaching","diy-ferramentas-diy-como-fazer-em-casa","ferramenta","ferramenta-eletricista-predial","ferramenta-para-eletricista","ferramentas","ferramentas-coaching","ferramentas-de-coaching","ferramentas-de-coaching-e-pnl","ferramentas-de-gestao","ferramentas-de-mentoring","ferramentas-do-coach","ferramentas-life-coaching","ferramentas-seo"],"description":"Vamos explorar neste artigo 6 ferramentas primordiais para um desenvolvedor, caso você desconheça algumas dessas ferramentas recomendo muito forte que preste atenção em cada uma delas, pois elas vão lhe ajudar a aumentar sua produtividade na hora de escrever seu código.","imgArticle":"/thumbnail-article/6-ferramentas-primordiais-dev.png","imgHome":"/thumbnail-home/6-ferramentas-primordiais-dev.png"},{"slug":"3-atualizacoes-javascript-voce-precisa-conhece","content":"<p>Vou lhe mostrar <strong>3 atualizações do JavaScript.<\/strong> Essas atualizações vão lhe ajuda como criar um código melhor. Se você desconhece ou não usa esses 3 novos recursos, você estará codificado na idade da pedra.<\/p>\n<p>A falta de conhecimento e conscientização por parte de alguns programadores em ignorá novas atualizações acaba que “dificultando” a evolução da tecnologia. Aqui estão três atualizações fundamentais em JavaScript que você deve conhecer se quiser se atualizar de um desenvolvedor júnior um pouco confuso para um engenheiro profissional.<\/p>\n<h3>Escopo - 3 Atualizações JavaScript<\/h3>\n<p>3 Atualizações JavaScript<\/p>\n<p>Todos os desenvolvedores sabem e não sabem o que é um escopo. Resumindo, pense em um escopo como uma cerca que dá acesso ás suas variáveis. Veja um exemplo na figura 01:<\/p>\n<p><img src=\"/uploads/2020/03/Figura-01-Escopo.png\" alt=\"3 Atualizações do JavaScript\"><\/p>\n<p><strong>Figura 01: Escopo | 3 Atualizações JavaScript<\/strong><\/p>\n<p>Existem dois tipos de escopos - um escopo local e um escopo global, vamos detalha mais sobre esses dois tipos.<\/p>\n<h3>Escopo Local<\/h3>\n<p>3 Atualizações JavaScript<\/p>\n<p>Um escopo local é aquele em que só é acessível dentro da “cerca” especificamente. Na figura 01, o escopo mais interno é um escopo local. Isso ocorre porque ele só é acessível dentro do contexto dessa “cerca”.<\/p>\n<p>A acessibilidade do escopo ocorre para dentro. Isso significa que os escopos não são acessíveis além de suas linhas de limite, mas podem ser usados ​​dentro da “cerca” normalmente.<\/p>\n<p>Os dois anéis internos de escopos da figura 01 podem usar as outras variáveis ​​da “cerca, mas não o contrário.<\/p>\n<h3>Escopo Global<\/h3>\n<p>3 Atualizações JavaScript<\/p>\n<p>Um escopo global é uma variável em que todos os scripts e funções têm acesso a ele. Não existe um “cerca” impedindo seu acesso, tudo está acessível.<\/p>\n<h4>Let e Var no JavaScript<\/h4>\n<p>3 Atualizações JavaScript<\/p>\n<p>Let e var são maneiras de declarar uma variável em JavaScript. Embora ambos façam as mesmas coisas, existem algumas diferenças entre os dois.<\/p>\n<p>Let está disponível apenas dentro do escopo em que foi declarado. Var define uma variável globalmente ou localmente para uma função inteira, independentemente do escopo do bloco.<\/p>\n<p>Pense em um escopo de bloco como onde seu { } par começa e termina. Um loop, por exemplo, é um escopo de bloco. Let limita a acessibilidade para bloquear o escopo enquanto var limita a acessibilidade ao escopo da função.<\/p>\n<h4>Onde declaramos<\/h4>\n<p>3 Atualizações JavaScript<\/p>\n<p>Podemos criar um escopo global em JavaScript usando let ou var antes do nome da variável<\/p>\n<pre><code><span class=\"token keyword\">var<\/span> gatoNome <span class=\"token operator\">=<\/span> <span class=\"token string\">\"Dukeza\"<\/span><span class=\"token punctuation\">;<\/span>\n<span class=\"token keyword\">let<\/span> CachorroName <span class=\"token operator\">=<\/span> <span class=\"token string\">\"Ralf\"<\/span><span class=\"token punctuation\">;<\/span>\n<span class=\"token keyword\">function<\/span> <span class=\"token function\">callCat<\/span><span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">{<\/span> \n   console<span class=\"token punctuation\">.<\/span><span class=\"token function\">log<\/span><span class=\"token punctuation\">(<\/span><span class=\"token string\">\"Aqui é, \"<\/span> <span class=\"token operator\">+<\/span> catName<span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">;<\/span> \n<span class=\"token punctuation\">}<\/span>\n<span class=\"token keyword\">function<\/span> <span class=\"token function\">callDog<\/span><span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">{<\/span>\n   console<span class=\"token punctuation\">.<\/span><span class=\"token function\">log<\/span><span class=\"token punctuation\">(<\/span><span class=\"token string\">\"Aqui é, \"<\/span> <span class=\"token operator\">+<\/span> dogName<span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">;<\/span>\n<span class=\"token punctuation\">}<\/span>\n<\/code><\/pre>\n<p>Quando você declarar suas variáveis ​​no nível mais alto, elas se tornam um escopo global.<\/p>\n<p>Como alternativa, você pode anexá-lo ao windowobjeto. O windowobjeto é um objeto var anexado quando um nome de variável é declarado usando-o.<\/p>\n<p>Portanto, escrever algo assim também funcionará:<\/p>\n<pre><code>window<span class=\"token punctuation\">.<\/span>cat <span class=\"token operator\">=<\/span> <span class=\"token string\">\"miau\"<\/span>\nconsole<span class=\"token punctuation\">.<\/span><span class=\"token function\">log<\/span><span class=\"token punctuation\">(<\/span>cat<span class=\"token punctuation\">)<\/span>\n<\/code><\/pre>\n<h3>Condicionais<\/h3>\n<p>3 Atualizações JavaScript<\/p>\n<p>As estruturas condicionais if e else podem ser divertidas e fáceis de escrever - até ficarem sem controle algum.<\/p>\n<p>As alternativas que podemos utilizar são:<\/p>\n<h4>Switch<\/h4>\n<p>3 Atualizações JavaScript<\/p>\n<p>A estrutura switch é uma condição baseada em uma série de casos. Se a condição se encaixar, o caso relevante é selecionado e executado. Seque o exemplo em código:<\/p>\n<pre><code><span class=\"token keyword\">switch<\/span> <span class=\"token punctuation\">(<\/span>gatoNome<span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">{<\/span> \n   <span class=\"token keyword\">case<\/span> <span class=\"token string\">\"Dukeza\"<\/span><span class=\"token operator\">:<\/span>  \n     console<span class=\"token punctuation\">.<\/span><span class=\"token function\">log<\/span><span class=\"token punctuation\">(<\/span><span class=\"token string\">\"Sim! sou uma gatinha linda!\"<\/span><span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">;<\/span> \n     <span class=\"token keyword\">break<\/span><span class=\"token punctuation\">;<\/span>\n<span class=\"token keyword\">case<\/span> <span class=\"token string\">\"Ralf\"<\/span><span class=\"token operator\">:<\/span>  \n     console<span class=\"token punctuation\">.<\/span><span class=\"token function\">log<\/span><span class=\"token punctuation\">(<\/span><span class=\"token string\">\"Sou um cachorro muito lindo.\"<\/span><span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">;<\/span> \n     <span class=\"token keyword\">break<\/span><span class=\"token punctuation\">;<\/span>\n<span class=\"token keyword\">default<\/span><span class=\"token operator\">:<\/span>  \n     console<span class=\"token punctuation\">.<\/span><span class=\"token function\">log<\/span><span class=\"token punctuation\">(<\/span><span class=\"token string\">\"Não sou nenhum desses ai\"<\/span><span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">;<\/span> \n<span class=\"token punctuation\">}<\/span>\n<\/code><\/pre>\n<p>A break palavra-chave diz ao intérprete JavaScript para parar de executar o código. Switch é bom usar quando você se depara com a possibilidade de vários resultados e o código a ser manipulado não é tão grande.<\/p>\n<p>Como alternativa, você pode executar outras funções com base no resultado do caso.<\/p>\n<h4>Loops<\/h4>\n<p>3 Atualizações JavaScript<\/p>\n<p>A estrutura loops podem ficar um pouco loucas se não soubemos a maneira exata de escrever. Segue um exemplo em código da estrutura loop<\/p>\n<pre><code><span class=\"token keyword\">for<\/span> <span class=\"token punctuation\">(<\/span>declaração <span class=\"token number\">1<\/span><span class=\"token punctuation\">;<\/span> declaração <span class=\"token number\">2<\/span><span class=\"token punctuation\">;<\/span> declaração3<span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">{<\/span> \n   <span class=\"token comment\">// algum código aqui <\/span>\n<span class=\"token punctuation\">}<\/span>\n<\/code><\/pre>\n<p>Existem cinco tipos diferentes de loops - for, for/in, for/of, while, e do/while.<\/p>\n<h4>for loops<\/h4>\n<p>3 Atualizações JavaScript<\/p>\n<p>Um for loop possui três instruções na área de condição, são elas:<\/p>\n<ul>\n<li>A primeira instrução é o que é executado antes da execução do código. Esta parte é executada apenas uma vez;<\/li>\n<li>A segunda instrução é a condição para executar o bloco de código.;<\/li>\n<li>A terceira instrução é executada depois que seu código é executado.<\/li>\n<\/ul>\n<h4>for/in loops<\/h4>\n<p>3 Atualizações JavaScript<\/p>\n<p>Vamos fingir que você tem um objeto. E, por qualquer motivo, você precisa trabalhar as propriedades desse objeto.<\/p>\n<p>Nunca tema! for/inloop está aqui!<\/p>\n<p>Veja a implementação em código:<\/p>\n<pre><code><span class=\"token keyword\">var<\/span>  nomeDoSeuObjeto  <span class=\"token operator\">=<\/span>  <span class=\"token punctuation\">{<\/span>  <span class=\"token literal-property property\">name<\/span> <span class=\"token operator\">:<\/span> <span class=\"token string\">\"Rall\"<\/span> <span class=\"token punctuation\">,<\/span>  <span class=\"token literal-property property\">digite<\/span> <span class=\"token operator\">:<\/span> <span class=\"token string\">\"cat\"<\/span> <span class=\"token punctuation\">,<\/span>  <span class=\"token literal-property property\">cor<\/span> <span class=\"token operator\">:<\/span> <span class=\"token string\">\"ginger\"<\/span>  <span class=\"token punctuation\">}<\/span> <span class=\"token punctuation\">;<\/span>\n<span class=\"token keyword\">var<\/span>  meuloop <span class=\"token punctuation\">;<\/span>\n<span class=\"token keyword\">for<\/span> <span class=\"token punctuation\">(<\/span>  meuLoop  em  nomeDoSeuObjeto  <span class=\"token punctuation\">)<\/span>  <span class=\"token punctuation\">{<\/span>\n   <span class=\"token comment\">// faça algo com nomeDoSeuObjeto [meuLoop] <\/span>\n<span class=\"token punctuation\">}<\/span>\n<\/code><\/pre>\n<h2>Venha aprender com quem realmente saber ensinar<\/h2>\n<p>Clique neste vídeo incrível e conheça o método step by step, que Eu desenvolvi e que está evolucionando o mercado!!.<\/p>\n<p><a href=\"https://bit.ly/2YivXeS\" target=\"_blank\" rel=\"noopener\">Ver método clique aqui<\/a><\/p>\n<h4>for/of loops<\/h4>\n<p>3 Atualizações JavaScript<\/p>\n<p>for of é uma instrução que passa valores de objetos iteráveis. Portanto, isso significa que você pode usá-lo em arrays, strings, maps e qualquer coisa que pareça uma lista de algum tipo. Veja o código:<\/p>\n<pre><code><span class=\"token keyword\">var<\/span> iterable <span class=\"token operator\">=<\/span> <span class=\"token punctuation\">[<\/span><span class=\"token string\">\"Rallf\"<\/span><span class=\"token punctuation\">,<\/span> <span class=\"token string\">\"Spark\"<\/span><span class=\"token punctuation\">,<\/span> <span class=\"token string\">\"Rufus\"<\/span><span class=\"token punctuation\">,<\/span> <span class=\"token string\">\"Tigwe\"<\/span><span class=\"token punctuation\">]<\/span><span class=\"token punctuation\">;<\/span> \n<span class=\"token keyword\">var<\/span> trackerVariable<span class=\"token punctuation\">;<\/span> \n<span class=\"token keyword\">for<\/span> <span class=\"token punctuation\">(<\/span>trackerVariable <span class=\"token keyword\">of<\/span> yourIterable<span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">{<\/span> \n   <span class=\"token comment\">// faça algo com trackerVariable <\/span>\n<span class=\"token punctuation\">}<\/span>\n<\/code><\/pre>\n<p>for of também podem fazer um loop sobre seqüências de caracteres. Isso significa que ele passará por cada caractere da sua string e trackerVariableé representativo da posição e do valor.<\/p>\n<p>Exemplo em código:<\/p>\n<pre><code><span class=\"token keyword\">var<\/span> someTxt <span class=\"token operator\">=<\/span> <span class=\"token string\">'Olá!'<\/span><span class=\"token punctuation\">;<\/span> \n<span class=\"token keyword\">var<\/span> x<span class=\"token punctuation\">;<\/span> <span class=\"token comment\">// aqui, sua variável de rastreador <\/span>\n<span class=\"token function\">para<\/span> <span class=\"token punctuation\">(<\/span><span class=\"token parameter\">x em someTxt<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">{<\/span> \nconsole<span class=\"token punctuation\">.<\/span><span class=\"token function\">log<\/span> <span class=\"token punctuation\">(<\/span>x<span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">;<\/span> \n<span class=\"token punctuation\">}<\/span>\n<\/code><\/pre>\n<h4>while<\/h4>\n<p>3 Atualizações JavaScript<\/p>\n<p>A estrutura de repetição while continua executando um bloco de código enquanto a condição permanecer true (Verdadeira). Isso significa que a condição deve ser avaliada para obter um booleanresultado (Um valor falso ou verdadeirio).<\/p>\n<p>Em vez de usar for, a palavra while- chave é usada.<\/p>\n<p>Veja a implementação em código:<\/p>\n<pre><code><span class=\"token keyword\">while<\/span> <span class=\"token punctuation\">(<\/span>condição<span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">{<\/span>\n   <span class=\"token comment\">// algum código aqui<\/span>\n<span class=\"token punctuation\">}<\/span>\n<\/code><\/pre>\n<p>Se você estiver iterando sobre algo por um período de tempo especificado, também precisará esclarecer isso.<\/p>\n<p>Por exemplo:<\/p>\n<pre><code><span class=\"token keyword\">var<\/span> i<span class=\"token punctuation\">;<\/span>\n<span class=\"token keyword\">while<\/span> <span class=\"token punctuation\">(<\/span> i <span class=\"token operator\">&lt;<\/span> <span class=\"token number\">5<\/span> <span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">{<\/span>\n   <span class=\"token comment\">// faz algo aqui<\/span>\n   i<span class=\"token operator\">++<\/span>  <span class=\"token comment\">// i + 1<\/span>\n<span class=\"token punctuation\">}<\/span>\n<\/code><\/pre>\n<p>No código acima, a variável  i precisa recebê + 1 até chegar à condição satisfatória; caso contrário, o loop continuará sendo executado até o final dos tempos (ou quando o código travar).<\/p>\n<h4>do/while<\/h4>\n<p>3 Atualizações JavaScript<\/p>\n<p>do while é um conceito semelhante while, apenas escrito de forma diferente. A diferença entre do/while e while é que no while será executada pelo menos uma vez, mesmo que a condição seja false.<\/p>\n<p>Veja o código:<\/p>\n<pre><code><span class=\"token keyword\">do<\/span> <span class=\"token punctuation\">{<\/span>\n  <span class=\"token comment\">// algo vai acontece aqui<\/span>\n<span class=\"token punctuation\">}<\/span> <span class=\"token keyword\">while<\/span> <span class=\"token punctuation\">(<\/span>condição<span class=\"token punctuation\">)<\/span>\n<\/code><\/pre>\n<h4>Promises<\/h4>\n<p>3 Atualizações JavaScript<\/p>\n<p>Uma promise acontece quando seu código precisa ser interrompido momentaneamente, pois ele faz alguma coisa. Isso pode acontecer quando você espera um resultado de uma API ou há um atraso por qualquer motivo.<\/p>\n<p>O código JavaScript é que ele será cobrado, de cima para baixo, sem esperar. Em parte, é porque não sabe quando esperar.<\/p>\n<p>Isso é o que uma promise faz. Ele diz ao seu código para aguentar, aguarde uma resposta e depois continue com o que deveria estar fazendo.<\/p>\n<p>Há três partes em uma promessa - a evocação, o invólucro e o resultado retornado.<\/p>\n<p>Vamos ver no código:<\/p>\n<pre><code><span class=\"token function\">yourPromisedFunction<\/span> <span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">.<\/span> <span class=\"token function\">then<\/span> <span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">(<\/span><span class=\"token parameter\">resolvedObj<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token operator\">=><\/span> <span class=\"token punctuation\">{<\/span> \n   <span class=\"token comment\">// faça algo com resolvedObj <\/span>\n<span class=\"token punctuation\">}<\/span><span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">;<\/span>\n<\/code><\/pre>\n<p>Há mais tipos de promises, mas essa é a parte principal de forma resumida, caso queira se aprofunda no assunto veja mais em:<\/p>\n<h2>Venha aprender com quem realmente saber ensinar<\/h2>\n<p>Clique neste vídeo incrível e conheça o método step by step, que Eu desenvolvi e que está evolucionando o mercado!!.<\/p>\n<p><a href=\"https://bit.ly/2YivXeS\" target=\"_blank\" rel=\"noopener\">Ver método clique aqui<\/a><\/p>\n<h3>Conclusão<\/h3>\n<p>3 Atualizações JavaScript<\/p>\n<p>Há muito mais conceitos em JavaScript que são importantes, mas esses são os três que considero fundamentais para você passar para o próximo nível na sua carreira melhorar suas estruturas de sintaxe e código.<\/p>\n<p>Sim. São idéias fundamentais.<\/p>\n<p>E sim, simplifiquei-os para facilitar a digestão mental.<\/p>\n<p>Se você é iniciante, espero que tenha achado útil e obrigado pela leitura.<\/p>\n<p>Veja também <a href=\"/6-linguagens-e-frameworks-para-aprender-2020/\">6 Linguagens e Frameworks para aprender em 2020<\/a><\/p>\n<h3>Conheça nosso Canal no Youtume<\/h3>\n<p>3 Atualizações JavaScript<\/p>\n<p><a href=\"https://www.youtube.com/watch?v=dKh8Jc_XgSU&amp;t\" target=\"_blank\" rel=\"noopener\">Ver Vídeo<\/a><\/p>\n","date":"2020-03-10T00:00:00.000Z","readingTime":8,"title":"3 Atualizações JavaScript que você precisa conhecer para mudar de nível","description":"Vou lhe mostrar 3 atualizações do JavaScript. Essas atualizações vão lhe ajuda como criar um código melhor. Se você desconhece ou não usa esses 3 novos recursos, você estará codificado na idade da pedra.","imgArticle":"/thumbnail-article/3-atualizacoes-javascript.png","imgHome":"/thumbnail-home/3-atualizacoes-javascript.png"},{"slug":"6-linguagens-e-frameworks-para-aprender-2020","content":"<p>A escolha das linguagens ou frameworks de programação para a criação das suas aplicações afeta não apenas a velocidade e o cronograma do desenvolvimento, mas também influencia sua capacidade de escalar no futuro.<\/p>\n<p>Vou compartilhar as 6 principais linguagens de programação que você deve conhecer agora em 2020 essas linguagens e frameworks promete serem relevantes nos próximos dois anos. Se você é uma das pessoas que ainda luta ou se apaixona por escolher qual linguagem de programação aprender seja em front-end ou back-end, este artigo é ideal para você.<\/p>\n<h3>1. Java / Kotlin - Spring Framework<\/h3>\n<p><img src=\"/uploads/2020/03/Spring-Framework-300x217.png\" alt=\"6 Linguagens e Frameworks\"><\/p>\n<p><strong>Figura 01 - 6 Linguagens e Frameworks<\/strong><\/p>\n<p>Muitos de vocês podem estar se perguntado por que Java? Java ainda existe ou é popular? A resposta é sim. A escolha de aprender qualquer linguagem de programação não se baseia apenas em métricas de popularidade ou na data em que foi criada. Quer você goste ou não, o Java ainda é a linguagem de programação padrão de grandes empresas e é amplamente usada. A oportunidade de trabalho também é um dos fatores a serem levados em consideração quando escolhemos uma linguagem de programação para aprender.<\/p>\n<p><strong>Kotlin<\/strong> é uma linguagem de programação de uso geral, multiplataforma, estaticamente tipada e com inferência de tipo. O Kotlin foi projetado para interoperar totalmente com Java, e a versão da JVM de sua biblioteca padrão depende da Java Class Library, mas a inferência de tipo permite que sua sintaxe seja mais concisa. Kotlin teve origem na JetBrains, a empresa por trás do IntelliJ IDEA, em 2010, e é open source desde 2012.<\/p>\n<p>O framework Spring é um dos frameworks Java de código aberto mais populares. Ele é voltado para os desenvolvedores e fornece uma estrutura versátil e flexível. O Spring 5.0 em diante oferece suporte dedicado ao Kotlin. As pessoas sempre comparam o Kotlin ao Java. Com o Spring, por que não combinamos os dois? E usa o melhor dos dois mundos!<\/p>\n<h4>Produtos mais populares do Framework Spring<\/h4>\n<ul>\n<li>O Spring Boot foi projetado para ser executado o mais rápido possível, com configurações iniciais mínimas;<\/li>\n<li>O Spring Cloud foi projetado para simplificar a arquitetura distribuída no estilo de microsserviço;<\/li>\n<li>O Spring Cloud Data Flow é um serviço unificado para a criação de microsserviços de dados composíveis.<\/li>\n<\/ul>\n<h4>Quando você deve considerar o uso:<\/h4>\n<ul>\n<li>Construção de aplicações corporativas.<\/li>\n<li>Construindo uma arquitetura de microserviço com conexão em nuvem;<\/li>\n<li>Uma grande equipe e com um enorme controle de código;<\/li>\n<li>Procurando uma estrutura que seja facilmente escalável e resiliente<\/li>\n<\/ul>\n<h3>2. Python - Django Framework<\/h3>\n<p><img src=\"/uploads/2020/03/python-e-django-2-300x169.png\" alt=\"\"><\/p>\n<p><strong>Figura 02 - 6 Linguagens e Frameworks<\/strong><\/p>\n<p>O framework Django é considerada um dos melhores frameworks Python quando se trata-se de construção de aplicações Web, é gratuito e de código aberto. O Django oferece estabilidade, pacotes, uma documentação super completa e possui um bom suporte da comunidade.<\/p>\n<p>O Django é amplamente utilizado na criação de CRM, CMS, mecanismos de reservas e todos os tipos de aplicações web. Ele suporta o rápido desenvolvimento de APIs de back-end com codificação mínima.<\/p>\n<p>Entre outras coisas, o Django é ótimo para soluções de análise de dados, cálculos complicados e aprendizado de máquina. É uma das principais opções para desenvolvedores atualmente.<\/p>\n<h4>Quando você deve considerar o uso:<\/h4>\n<ul>\n<li>Construir aplicações web de larga escala;<\/li>\n<li>Aplicações orientados à API;<\/li>\n<li>Não se importe com arquitetura monolítica;<\/li>\n<li>Soluções de análise de dados e Machine Learning<\/li>\n<\/ul>\n<h3>3. Nodejs - Express<\/h3>\n<p><img src=\"/uploads/2020/03/node-e-express.png\" alt=\"\"><\/p>\n<p><strong>Figura 03 - 6 Linguagens e Frameworks<\/strong><\/p>\n<p>O <strong>JavaScript<\/strong> é provavelmente uma das linguagens de programação mais poderosas e de mais rápido crescimento nos últimos anos. A uns 8 anos atrás, o JavaScript costumava criar apenas páginas para a Web, mas agora, se você conhece bem o JavaScript, pode desenvolver aplicações Web, back-end com integrações de banco de dados, aplicações para desktop e até aplicativos móveis.<\/p>\n<p>Atualmente, o JavaScript é usado em quase todos os lugares. Como o JavaScript tem uma adoção tão alta e nenhuma concorrência, não podemos prever que ele vá a lugar algum, tão cedo.<\/p>\n<p><strong>Express<\/strong> é conhecido por um framework minimalista, rápido e dispensas apresentações. Ele é construído em JavaScript e possui uma curva de aprendizado relativamente pequena. Atualmente, a maioria dos desenvolvedores escolhe o Express devido à sua <strong>flexibilidade<\/strong> , <strong>simplicidade<\/strong> e <strong>extensibilidade<\/strong> . Sem mencionar, o Express faz parte da pilha MEAN (Software Bundle), uma coleção de tecnologias baseadas em JavaScript de pilha completa para desenvolver aplicações Web.<\/p>\n<h4>Quando você deve considerar o uso:<\/h4>\n<h3>Deseja de uma vez por toda aprender a Stack JS (JavaScript + Node + React?)<\/h3>\n<p>Clique neste vídeo incrível do Leonardo, ele desenvolveu um método que se você seguir tudo 100% você se tornará um profissional Full Stack em 8 SEMANAS..<\/p>\n<p><a href=\"/programador-fullstack-8-semanas\">Ver Vídeo<\/a><\/p>\n<ul>\n<li>Construir aplicações web em pequena escala, por exemplo portais, painéis, etc;<\/li>\n<li>Construir aplicações desktop;<\/li>\n<li>Criar produto minimamente viável, famoso (MVP);<\/li>\n<li>Possuir uma curta curva de aprendizagem;<\/li>\n<li>Quando tiver uma equipe pequena e um cronograma curto;<\/li>\n<li>Minimizar as despesas com a equipe de back-end.<\/li>\n<\/ul>\n<h3>4. Angular - O Framework Web<\/h3>\n<p><img src=\"/uploads/2020/03/angular.png\" alt=\"\"><\/p>\n<p><strong>Figura 04 -6 Linguagens e Frameworks<\/strong><\/p>\n<p>Venho acompanhando o Angular há alguns anos. AngularJS costumava ser um dos melhores frameworks da época. Angular é um framework para criação de páginas web de código aberto baseado em TypeScript criado pelo Google. Angular é uma reescrita completa do AngularJS pela mesma equipe angular do Google. É poderoso, moderno e tem muito bom apoio da comunidade.<\/p>\n<p>O Angular é suportado em várias plataformas Web, dispositivos móveis e computadores. Uma das principais razões para aprender Angular é porque seu ecossistema é grande e próspero. A Equipe Angular enviou uma quantidade incrível de ferramentas e bibliotecas para a comunidade.<\/p>\n<p>A nova versão do Angular (Versão 9) será a próxima grande novidade do framework JavaScript. Ele vem com um tamanho menor de pacotes, construção mais rápida, melhores ferramentas de depuração e muito mais.<\/p>\n<h4>Quando você deve considerar o uso:<\/h4>\n<ul>\n<li>Construção de aplicações em larga escala;<\/li>\n<li>Procurando um ecossistema grande e bom para todas as ferramentas e bibliotecas da comunidade;<\/li>\n<li>Não se importa com a grande curva de aprendizado;<\/li>\n<li>Tem o suporte do Google.<\/li>\n<\/ul>\n<h3>5. Vue.js - O Framework progressivo JavaScript<\/h3>\n<p><img src=\"/uploads/2020/03/vuejs-300x259.png\" alt=\"\"><\/p>\n<p><strong>Figura 05 - 6 Linguagens e Frameworks<\/strong><\/p>\n<p>O Vue é um framework JavaScript muito popular que cresceu de forma absurda nos últimos anos. O Vue foi criado por Evan You quando ele trabalhava no Google no projeto AngularJS naquela época.<\/p>\n<p>Por que o Vue é popular? O Vue é um framework JavaScript progressivo para a construção de interfaces. Ele foi desenvolvido desde o início para ser adotado de forma incremental. Uma das principais vantagens do Vue, é que ele tem o melhor dos frameworks (Angular e React).<\/p>\n<p>Pessoalmente, gosto muito do Vue, devido à sua simplicidade, flexibilidade e, o mais importante, é escrito exclusivamente em JavaScript . No entanto, o Vue ainda é novo, a comunidade ainda é pequena e a maioria dos desenvolvedores não fala inglês. Breve vamos ter vários tutoriais sobre o Vue, aqui no site como em nosso canal do <a href=\"https://www.youtube.com/channel/UCZKLK7o6IVayeEjkkoWLwbQ\" target=\"_blank\" rel=\"noopener\">Youtube<\/a>.<\/p>\n<h4>Quando você deve considerar o uso:<\/h4>\n<ul>\n<li>Construir aplicações web de média escala;<\/li>\n<li>Procurando desenvolvimento rápido e cronograma mais curto (puramente em Javascript);<\/li>\n<li>Curva de aprendizado médio;<\/li>\n<li>Cuidado você pode ler chinês (hehe Brincadeira);<\/li>\n<li>Gosta muito do JavaScript.<\/li>\n<\/ul>\n<h3>6. Framework Ionic<\/h3>\n<p><img src=\"/uploads/2020/03/ionic.png\" alt=\"\"><\/p>\n<p><strong>Figura 06 - 6 Linguagens e Frameworks<\/strong><\/p>\n<p>Iniciei meus estudos com o Ionic quando ele utilizava o AngularJS e Apache Cordova. Ionic É um SDK de código aberto para desenvolvimento de aplicativos móveis híbridos. Os desenvolvedores podem criar seus aplicativos móveis usando frameworks JavaScript. O Ionic inclui componentes móveis, tipografia, temas móveis e paradigmas interativos para criar aplicativos móveis.<\/p>\n<p>Na versão mais recente do Ionic, ele permite ao usuário escolher qualquer framework/biblioteca para a criação da interface do usuário, como Angular, React ou Vue.js. O Ionic está promovendo uma base de código para qualquer plataforma (iOS / Android / Electron / PWA). O Ionic também fornece as ferramentas para atualização ao vivo e CI / CD usando o Ionic Appflow para alcançar o ciclo de vida do DevOps.<\/p>\n<h4>Quando você deve considerar o uso:<\/h4>\n<h3>Deseja de uma vez por toda aprender a Stack JS (JavaScript + Node + React?)<\/h3>\n<p>Clique neste vídeo incrível do Leonardo, ele desenvolveu um método que se você seguir tudo 100% você se tornará um profissional Full Stack em 8 SEMANAS..<\/p>\n<p><a href=\"/programador-fullstack-8-semanas\">Ver Vídeo<\/a><\/p>\n<ul>\n<li>Você deseja criar aplicativos móveis de pequenos / médios;<\/li>\n<li>Desenvolvimento rápido e curva de aprendizado médio.<\/li>\n<li>Você não quer aprender programação nativa;<\/li>\n<li>Economize tempo e custo para criar aplicativos móveis para Android e iOS;<\/li>\n<li>Você gosta de usar framework JavaScript para cria aplicativos móveis.<\/li>\n<\/ul>\n<h3><strong>6 Linguagens e Frameworks<\/strong> Conclusões<\/h3>\n<p>Em resumo, não há certo ou errado para aprender qualquer linguagem de programação. Existem várias outras boas linguagens de programação para aprender, como Swift para iOS, Dart do Google, R para Data Science, Flask para Python, etc. A seleção das melhores linguagens de programação para casos de uso corretos é bastante importante a longo prazo. A lista principal aqui é selecionada com base na popularidade, curvas de aprendizado, recursos e minha humilde opinião.<\/p>\n<p>Espero que tenha gostado do artigo, compartilhe com seus amigos e nos grupos que vocês participam para que esse conteúdo chegue ao maior número de programadores possíveis, deixa aí um comentário qual linguagem eu esqueci de colocar nessa lista.<\/p>\n<h3>Veja em nosso canal do Youtube<\/h3>\n<p>https://www.youtube.com/watch?v=jchP7_p95zE&amp;t=2s<\/p>\n<p>Veja também <a href=\"/arquitetura-limpa-seu-projeto-no-caminho-certo/\">Arquitetura Limpa<\/a><\/p>\n","date":"2020-03-05T00:00:00.000Z","readingTime":7,"title":"6 Linguagens e Frameworks para aprender em 2020","tags":["10-linguagens-de-programacao","entity-framework","framework","framework-mvc","framework-web","linguagem","linguagem-de-programacao","linguagem-de-programacao-mais-usada","linguagens-de-programacao","linguagens-de-programacao-2020","linguagens-modernas","linguagens-populares","principais-linguagens","principais-linguagens-de-programacao","programacao","programador","qual-linguagem-de-programacao-usar","top-linguagens-de-programacao"],"description":"A escolha das linguagens ou frameworks de programação para a criação das suas aplicações afeta não apenas a velocidade e o cronograma do desenvolvimento, mas também influencia sua capacidade de escalar no futuro.","imgArticle":"/thumbnail-article/linguagens-e-framework-para-aprender.png","imgHome":"/thumbnail-home/linguagens-e-framework-para-aprender.png"},{"slug":"arquitetura-limpa-seu-projeto-no-caminho-certo","content":"<p>Fala dev, neste artigo irei aborda um tema meio “polemico” entre nós desenvolvedores, mas quais benefícios essa tal de arquitetura limpa me proporcionará, o que é, com funciona? Esse artigo tem como objetivo responde essas perguntas, então vem comigo aprender um pouco mais sobre arquitetura limpa.<\/p>\n<h3>Arquitetura limpa: o que é?<\/h3>\n<p>Proposto por Robert Cecil Martin, a arquitetura limpa não é uma proposta necessariamente nova. Na verdade, é uma tentativa de integrar várias ideias arquitetônicas que apareceram nos anos anteriores, como arquitetura da cebola e arquitetura hexagonal.<\/p>\n<p><img src=\"/uploads/2020/02/Arquitetura-limpa-1024x570.png\" alt=\"Arquitetura limpa\"><\/p>\n<p><strong>Figura 01 - Arquitetura limpa<\/strong><\/p>\n<h3>Benefícios da Arquitetura limpa<\/h3>\n<ul>\n<li><strong>Agnóstico de banco de dados<\/strong>: sua lógica de negócios principal não se importa se você estiver usando Postgres, MongoDB ou Neo4J para esse assunto;<\/li>\n<li><strong>Agnóstico da interface do cliente<\/strong>: A lógica comercial principal não se importa se você estiver usando uma CLI, uma API REST ou mesmo um gRPC;<\/li>\n<li><strong>Agnóstico de estrutura:<\/strong> Usando o vanilla nodeJS, express, fastify? Sua lógica de negócios principal também não se importa com isso.<\/li>\n<\/ul>\n<p>Agora, se você quiser ler mais sobre como a arquitetura limpa funciona, pode ler o blog fantástico, The Clean Architecture , do tio Bob . Por enquanto, vamos pular para a implementação. Para acompanhar, veja o repositório aqui .<\/p>\n<p><img src=\"/uploads/2020/02/Exemplo-arquitetura-limpa.png\" alt=\"Arquitetura limpa\"><\/p>\n<p><strong>Figura 02 - Exemplo de arquitetura limpa<\/strong><\/p>\n<h3>Entidades<\/h3>\n<p>Entities são os principais objetos de negócios que podem ser realizados por funções. Em termos de MVC, eles são a camada de modelo da arquitetura limpa. Todas as entities e serviços são colocados em um diretório chamado pkg. Na verdade, é isso que queremos abstrair do restante do aplicativo.<\/p>\n<h3>DO ZERO A PROGRAMADOR FULL STACK JAVASCRIPT (REACT + NODEJS)<\/h3>\n<p>Nesse super treinamento você vai aprender de <strong>forma totalmente prática<\/strong> através de <strong>aulas, exercícios e projetos<\/strong> a programação web Javascript <strong>focada no mercado de trabalho<\/strong>. CLIQUE NO BOTÃO SABER MAIS E ASSISTA O VÍDEO, lhe garanto que vai vale apena.<\/p>\n<p><a href=\"/programador-fullstack-8-semanas\">Saber mais<\/a><\/p>\n<p>Entidades são usadas no Repositório interface, que pode ser implementado em qualquer banco de dados. Neste caso, implementamos no Postgre, no postgres.go. Como os repositórios podem ser realizados para qualquer banco de dados, eles são independentes de todos os detalhes de implementação.<\/p>\n<h3>Serviços<\/h3>\n<p>Os serviços incluem interfaces para funções orientadas a lógica de negócios de nível superior. Os serviços são uma camada de abstração sobre os repositórios pelo fato de não interagirem com o banco de dados, mas pela interface do repositório. Os serviços são implementados no nível da interface do usuário.<\/p>\n<h3>Adaptadores de Interface<\/h3>\n<p>Cada interface do usuário possui um diretório separado. No nosso caso, como temos uma API como interface, temos um diretório chamado api. Agora, como cada interface do usuário escuta solicitações de maneira diferente, os adaptadores de interface têm seus próprios arquivos main.go , com as seguintes tarefas:<\/p>\n<ul>\n<li>Criando Repositórios;<\/li>\n<li>Empacotando Repositórios dentro de Serviços;<\/li>\n<li>Serviços Wrap dentro de manipuladores<\/li>\n<\/ul>\n<p>Aqui, os manipuladores são simplesmente a implementação no nível da interface do usuário do modelo de solicitação-resposta. Cada serviço tem seu próprio manipulador.<\/p>\n<h3>Manipulação de erros<\/h3>\n<p><img src=\"/uploads/2020/02/Fluxo-de-Erro.png\" alt=\"Arquitetura limpa\"><\/p>\n<p><strong>Figura 03: Fluxo de erro | Arquitetura limpa<\/strong><\/p>\n<p>O princípio básico por trás do tratamento de erros na Arquitetura Limpa é o seguinte:<\/p>\n<ul>\n<li>Os erros de repositório devem ser uniformes e devem ser agrupados e implementados de maneira diferente para cada adaptador de interface;<\/li>\n<li>O que isso significa essencialmente é que todos os erros no nível do banco de dados devem ser tratados pelas interfaces do usuário de maneira diferente. Por exemplo, se a interface do usuário em questão for uma API REST, os erros deverão ser manifestos na forma de códigos de status HTTP, nesse caso, o código 500. Considerando que, se for uma CLI, deverá sair com o código de status 1;<\/li>\n<li>Na Arquitetura Limpa, os erros do Repositório podem estar na raiz do pkg, para que as funções do Repositório possam chamá-los no caso de um aborto espontâneo do fluxo de controle, conforme mostrado abaixo.<\/li>\n<\/ul>\n<p>Os mesmos erros podem ser implementados de acordo com a interface do usuário específica e, na maioria das vezes, podem ser agrupados em visualizações, no nível do manipulador. Cada erro no nível do repositório, ou não, é agrupado dentro de um mapa, que retorna um código de status HTTP correspondente ao erro apropriado.<\/p>\n<h3>Conclusão<\/h3>\n<p>A arquitetura limpa é uma ótima maneira de estruturar seu código e, em seguida, esquecer todas as complexidades que podem surgir devido a iterações ágeis ou prototipagem rápida. Sendo o banco de dados, a interface do usuário e a estrutura independente, a Arquitetura Limpa é uma boa alternativa para um projeto de grande porte. E isso galera, espero te passado uma visão geral do que é Arquitetura Limpa para vocês, até o próximo artigo.<\/p>\n<h3>DO ZERO A PROGRAMADOR FULL STACK JAVASCRIPT (REACT + NODEJS)<\/h3>\n<p>Nesse super treinamento você vai aprender de <strong>forma totalmente prática<\/strong> através de <strong>aulas, exercícios e projetos<\/strong> a programação web Javascript <strong>focada no mercado de trabalho<\/strong>. CLIQUE NO BOTÃO SABER MAIS E ASSISTA O VÍDEO, lhe garanto que vai vale apena.<\/p>\n<p><a href=\"/programador-fullstack-8-semanas\">Saber mais<\/a><\/p>\n<p>Leia também: <a href=\"/express-vs-spring-boot-qual-e-o-melhor/\">Express Vs Spring Boot<\/a><\/p>\n","date":"2020-02-27T00:00:00.000Z","readingTime":4,"title":"Arquitetura Limpa - O seu projeto no caminho certo","tags":["arquitetura","arquitetura-clean","arquitetura-de-interiores","arquitetura-de-sistemas","arquitetura-de-software","arquitetura-hexagonal","construcao-limpa","limpeza","sustentabilidade","wm-arquitetura"],"description":"Fala dev, neste artigo irei aborda um tema meio “polemico” entre nós desenvolvedores, mas quais benefícios essa tal de arquitetura limpa me proporcionará, o que é, com funciona? Esse artigo tem como objetivo responde essas perguntas, então vem comigo aprender um pouco mais sobre arquitetura limpa.","imgArticle":"/thumbnail-article/arquitetura-limpa.png","imgHome":"/thumbnail-home/arquitetura-limpa.png"},{"slug":"criar-formulario-html-parte-2","content":"<p>Fala dev, neste artigo iremos da continuidade a série <strong>Criar Formulário<\/strong> HTML, nessa parte 2 vamos criar um pequeno servidor usando a tecnologia NodeJS para fazermos a comunicação entre front-end e back-end na prática, iremos enviar os dados preenchido no formulário para o nosso servidor em Node. Veja onde paramos, caso você não tenha lido a parte 1 <a href=\"/criar-formulario-html5-parte-1/\">clique aqui<\/a>. Vamos ao código base.<\/p>\n<h2>Código Base - Criar Formulário<\/h2>\n<pre><code><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!<\/span><span class=\"token doctype-tag\">DOCTYPE<\/span> <span class=\"token name\">html<\/span><span class=\"token punctuation\">><\/span><\/span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;<\/span>html<\/span> <span class=\"token attr-name\">lang<\/span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=<\/span><span class=\"token punctuation\">\"<\/span>pt-br<span class=\"token punctuation\">\"<\/span><\/span><span class=\"token punctuation\">><\/span><\/span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;<\/span>head<\/span><span class=\"token punctuation\">><\/span><\/span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;<\/span>meta<\/span> <span class=\"token attr-name\">charset<\/span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=<\/span><span class=\"token punctuation\">\"<\/span>UTF-8<span class=\"token punctuation\">\"<\/span><\/span><span class=\"token punctuation\">><\/span><\/span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;<\/span>title<\/span><span class=\"token punctuation\">><\/span><\/span>Document<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/<\/span>title<\/span><span class=\"token punctuation\">><\/span><\/span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/<\/span>head<\/span><span class=\"token punctuation\">><\/span><\/span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;<\/span>body<\/span><span class=\"token punctuation\">><\/span><\/span>\n\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;<\/span>form<\/span> <span class=\"token attr-name\">action<\/span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=<\/span><span class=\"token punctuation\">\"<\/span><span class=\"token punctuation\">\"<\/span><\/span> <span class=\"token attr-name\">method<\/span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=<\/span><span class=\"token punctuation\">\"<\/span>POST<span class=\"token punctuation\">\"<\/span><\/span><span class=\"token punctuation\">><\/span><\/span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;<\/span>input<\/span> <span class=\"token attr-name\">type<\/span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=<\/span><span class=\"token punctuation\">\"<\/span>text<span class=\"token punctuation\">\"<\/span><\/span> <span class=\"token attr-name\">name<\/span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=<\/span><span class=\"token punctuation\">\"<\/span>nmae<span class=\"token punctuation\">\"<\/span><\/span> <span class=\"token punctuation\">/><\/span><\/span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;<\/span>input<\/span> <span class=\"token attr-name\">type<\/span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=<\/span><span class=\"token punctuation\">\"<\/span>password<span class=\"token punctuation\">\"<\/span><\/span> <span class=\"token attr-name\">name<\/span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=<\/span><span class=\"token punctuation\">\"<\/span>senha<span class=\"token punctuation\">\"<\/span><\/span> <span class=\"token punctuation\">/><\/span><\/span>\n\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;<\/span>textarea<\/span> <span class=\"token attr-name\">name<\/span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=<\/span><span class=\"token punctuation\">\"<\/span>descricao<span class=\"token punctuation\">\"<\/span><\/span> <span class=\"token attr-name\">cols<\/span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=<\/span><span class=\"token punctuation\">\"<\/span>30<span class=\"token punctuation\">\"<\/span><\/span> <span class=\"token attr-name\">rows<\/span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=<\/span><span class=\"token punctuation\">\"<\/span>10<span class=\"token punctuation\">\"<\/span><\/span><span class=\"token punctuation\">><\/span><\/span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/<\/span>textarea<\/span><span class=\"token punctuation\">><\/span><\/span>\n\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;<\/span>div<\/span><span class=\"token punctuation\">><\/span><\/span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;<\/span>input<\/span> <span class=\"token attr-name\">type<\/span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=<\/span><span class=\"token punctuation\">\"<\/span>radio<span class=\"token punctuation\">\"<\/span><\/span> <span class=\"token attr-name\">name<\/span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=<\/span><span class=\"token punctuation\">\"<\/span>tipo<span class=\"token punctuation\">\"<\/span><\/span> <span class=\"token attr-name\">value<\/span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=<\/span><span class=\"token punctuation\">\"<\/span>admin<span class=\"token punctuation\">\"<\/span><\/span> <span class=\"token punctuation\">/><\/span><\/span> Admin\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;<\/span>input<\/span> <span class=\"token attr-name\">type<\/span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=<\/span><span class=\"token punctuation\">\"<\/span>radio<span class=\"token punctuation\">\"<\/span><\/span> <span class=\"token attr-name\">name<\/span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=<\/span><span class=\"token punctuation\">\"<\/span>tipo<span class=\"token punctuation\">\"<\/span><\/span> <span class=\"token attr-name\">value<\/span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=<\/span><span class=\"token punctuation\">\"<\/span>Regular<span class=\"token punctuation\">\"<\/span><\/span><span class=\"token punctuation\">/><\/span><\/span> Regular\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/<\/span>div<\/span><span class=\"token punctuation\">><\/span><\/span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;<\/span>div<\/span><span class=\"token punctuation\">><\/span><\/span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;<\/span>input<\/span> <span class=\"token attr-name\">type<\/span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=<\/span><span class=\"token punctuation\">\"<\/span>checkbox<span class=\"token punctuation\">\"<\/span><\/span> <span class=\"token attr-name\">name<\/span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=<\/span><span class=\"token punctuation\">\"<\/span>ativo<span class=\"token punctuation\">\"<\/span><\/span> <span class=\"token attr-name\">id<\/span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=<\/span><span class=\"token punctuation\">\"<\/span><span class=\"token punctuation\">\"<\/span><\/span> <span class=\"token punctuation\">/><\/span><\/span> Ativo\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/<\/span>div<\/span><span class=\"token punctuation\">><\/span><\/span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;<\/span>select<\/span> <span class=\"token attr-name\">name<\/span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=<\/span><span class=\"token punctuation\">\"<\/span>cidades<span class=\"token punctuation\">\"<\/span><\/span><span class=\"token punctuation\">><\/span><\/span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;<\/span>option<\/span> <span class=\"token attr-name\">value<\/span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=<\/span><span class=\"token punctuation\">\"<\/span>jua<span class=\"token punctuation\">\"<\/span><\/span><span class=\"token punctuation\">><\/span><\/span>Juazeiro <span class=\"token keyword\">do<\/span> Norte<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/<\/span>option<\/span><span class=\"token punctuation\">><\/span><\/span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;<\/span>option<\/span> <span class=\"token attr-name\">value<\/span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=<\/span><span class=\"token punctuation\">\"<\/span>crato<span class=\"token punctuation\">\"<\/span><\/span><span class=\"token punctuation\">><\/span><\/span>Crato<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/<\/span>option<\/span><span class=\"token punctuation\">><\/span><\/span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;<\/span>option<\/span> <span class=\"token attr-name\">value<\/span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=<\/span><span class=\"token punctuation\">\"<\/span>bar<span class=\"token punctuation\">\"<\/span><\/span><span class=\"token punctuation\">><\/span><\/span>Barbalha<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/<\/span>option<\/span><span class=\"token punctuation\">><\/span><\/span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;<\/span>option<\/span> <span class=\"token attr-name\">value<\/span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=<\/span><span class=\"token punctuation\">\"<\/span>mv<span class=\"token punctuation\">\"<\/span><\/span><span class=\"token punctuation\">><\/span><\/span>Missão Velha<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/<\/span>option<\/span><span class=\"token punctuation\">><\/span><\/span>\n     <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/<\/span>select<\/span><span class=\"token punctuation\">><\/span><\/span>\n\n     <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;<\/span>select<\/span> <span class=\"token attr-name\">name<\/span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=<\/span><span class=\"token punctuation\">\"<\/span>interesses<span class=\"token punctuation\">\"<\/span><\/span> <span class=\"token attr-name\">multiple<\/span> <span class=\"token attr-name\">size<\/span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=<\/span><span class=\"token punctuation\">\"<\/span>10<span class=\"token punctuation\">\"<\/span><\/span><span class=\"token punctuation\">><\/span><\/span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;<\/span>option<\/span> <span class=\"token attr-name\">value<\/span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=<\/span><span class=\"token punctuation\">\"<\/span>JavaScript<span class=\"token punctuation\">\"<\/span><\/span><span class=\"token punctuation\">><\/span><\/span> JavaScript <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/<\/span>option<\/span><span class=\"token punctuation\">><\/span><\/span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;<\/span>option<\/span> <span class=\"token attr-name\">value<\/span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=<\/span><span class=\"token punctuation\">\"<\/span>Java<span class=\"token punctuation\">\"<\/span><\/span><span class=\"token punctuation\">><\/span><\/span> Java <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/<\/span>option<\/span><span class=\"token punctuation\">><\/span><\/span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;<\/span>option<\/span> <span class=\"token attr-name\">value<\/span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=<\/span><span class=\"token punctuation\">\"<\/span>php<span class=\"token punctuation\">\"<\/span><\/span><span class=\"token punctuation\">><\/span><\/span><span class=\"token constant\">PHP<\/span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/<\/span>option<\/span><span class=\"token punctuation\">><\/span><\/span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;<\/span>option<\/span> <span class=\"token attr-name\">value<\/span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=<\/span><span class=\"token punctuation\">\"<\/span>python<span class=\"token punctuation\">\"<\/span><\/span><span class=\"token punctuation\">><\/span><\/span>Python<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/<\/span>option<\/span><span class=\"token punctuation\">><\/span><\/span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/<\/span>select<\/span><span class=\"token punctuation\">><\/span><\/span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;<\/span>button<\/span><span class=\"token punctuation\">><\/span><\/span>Enviar<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/<\/span>button<\/span><span class=\"token punctuation\">><\/span><\/span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/<\/span>form<\/span><span class=\"token punctuation\">><\/span><\/span>\n    \n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/<\/span>body<\/span><span class=\"token punctuation\">><\/span><\/span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/<\/span>html<\/span><span class=\"token punctuation\">><\/span><\/span>\n<\/code><\/pre>\n<p><img src=\"/uploads/2020/02/Figura-01-Código-Base-1.jpg\" alt=\"Criar Formulário HTML\"><\/p>\n<p><strong>Figura 01 - Código base / Criar Formulário HTML<\/strong><\/p>\n<h2>Criando servidor para receber os dados<\/h2>\n<p>Agora que criamos nosso formulário, vamos criar um pequeno servidor usando a tecnologia NodeJS para receber esses dados e iremos ver na prática a comunicação entre servidor e cliente.<\/p>\n<ul>\n<li>Passo 1 - crie um diretório com o nome que você deseja (neste exemplo meu diretório se chamara form)<\/li>\n<li>Passo 2 - cria um arquivo chamado server.js<\/li>\n<li>passo 3 - abra o terminal dentro do diretório e escreva o comando npm init -y caso você use o npm, caso use o yarn que é meu caso escreva o comando yarn init (esse comando irá criar o arquivo package.js)<\/li>\n<li>passo 4 - Para nosso servidor roda legal, precisaremos instalar mais dois pacotes são eles o express e o body-parser; escreva o seguinte comando para a instalação: yarn add express e yarn add body-parser. (Caso você use o npm veja na documentação os comando de instalação de pacotes, mas é super simples)<\/li>\n<\/ul>\n<p><img src=\"/uploads/2020/02/Figura-02-Servidor.jpg\" alt=\"Criar Formulário HTML\"><\/p>\n<p>Figura 02 - servidor<\/p>\n<h2>Código do servidor - Criar Formulário<\/h2>\n<h3>DO ZERO A PROGRAMADOR FULL STACK JAVASCRIPT (REACT + NODEJS)<\/h3>\n<p>Veja o vídeo do Leonardo, onde ele explicar com detalhes como você sair do ZERO a DOMINA de uma vez por toda a STACK mais desejada do mercado, clique em Ver Vídeo agora mesmo<\/p>\n<p><a href=\"/programador-fullstack-8-semanas\">VER VÍDEO<\/a><\/p>\n<pre><code><span class=\"token keyword\">const<\/span> express <span class=\"token operator\">=<\/span> <span class=\"token function\">require<\/span><span class=\"token punctuation\">(<\/span><span class=\"token string\">'express'<\/span><span class=\"token punctuation\">)<\/span>\n<span class=\"token keyword\">const<\/span> app <span class=\"token operator\">=<\/span> <span class=\"token function\">express<\/span><span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">)<\/span>\n<span class=\"token keyword\">const<\/span> bodyParser <span class=\"token operator\">=<\/span> <span class=\"token function\">require<\/span><span class=\"token punctuation\">(<\/span><span class=\"token string\">'body-parser'<\/span><span class=\"token punctuation\">)<\/span>\n\napp<span class=\"token punctuation\">.<\/span><span class=\"token function\">use<\/span><span class=\"token punctuation\">(<\/span>bodyParser<span class=\"token punctuation\">.<\/span><span class=\"token function\">urlencoded<\/span><span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">{<\/span> <span class=\"token literal-property property\">extended<\/span><span class=\"token operator\">:<\/span> <span class=\"token boolean\">true<\/span><span class=\"token punctuation\">}<\/span><span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">)<\/span>\n\napp<span class=\"token punctuation\">.<\/span><span class=\"token function\">use<\/span><span class=\"token punctuation\">(<\/span>express<span class=\"token punctuation\">.<\/span><span class=\"token function\">static<\/span><span class=\"token punctuation\">(<\/span><span class=\"token string\">'.'<\/span><span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">)<\/span>\n\napp<span class=\"token punctuation\">.<\/span><span class=\"token function\">post<\/span><span class=\"token punctuation\">(<\/span><span class=\"token string\">'/usuarios'<\/span><span class=\"token punctuation\">,<\/span> <span class=\"token punctuation\">(<\/span><span class=\"token parameter\">req<span class=\"token punctuation\">,<\/span> res<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token operator\">=><\/span><span class=\"token punctuation\">{<\/span>\n    console<span class=\"token punctuation\">.<\/span><span class=\"token function\">log<\/span><span class=\"token punctuation\">(<\/span>req<span class=\"token punctuation\">.<\/span>body<span class=\"token punctuation\">)<\/span>\n    res<span class=\"token punctuation\">.<\/span><span class=\"token function\">send<\/span><span class=\"token punctuation\">(<\/span><span class=\"token string\">'Deu tudo certo!!'<\/span><span class=\"token punctuation\">)<\/span>\n<span class=\"token punctuation\">}<\/span><span class=\"token punctuation\">)<\/span>\n\napp<span class=\"token punctuation\">.<\/span><span class=\"token function\">listen<\/span><span class=\"token punctuation\">(<\/span><span class=\"token number\">3000<\/span><span class=\"token punctuation\">)<\/span>\n<\/code><\/pre>\n<p>Eu não vou explicar o código desse servidor pois temos um vídeo em nosso canal no Youtube onde criamos um servidor nodejs semelhante a esse, então caso você tenha interesse em entender o código do servidor <a href=\"https://www.youtube.com/watch?v=RiBU3rEOj40&amp;t=39s\" target=\"_blank\" rel=\"noopener\">clique aqui.<\/a><\/p>\n<p>Para testar o servidor abra o terminal e digite o seguinte comando: node server.js veja na figura 3 como o terminal ficará depois que executa o comando.<\/p>\n<p><img src=\"/uploads/2020/02/Figura-03-servidor-rodando.jpg\" alt=\"Criar Formulário HTML\"><\/p>\n<p>Figura 03 - Servidor rodando<\/p>\n<p>Observe que o terminal ficou “travado” isso significa que o servidor está rodando e esperando alguma ação vinda do front-end, em nosso caso será o form.html iremos enviar os dados para o nosso servidor. Vamos testa e fazer o envio dos dados, abra o seu navegador e digite o seguinte endereço: <a href=\"http://localhost:3000/form.html\" target=\"_blank\" rel=\"noopener\">http://localhost:3000/form.html<\/a><\/p>\n<p><img src=\"/uploads/2020/02/Figura-04-Form-rodando-no-servidor.jpg\" alt=\"Criar Formulário HTML\"><\/p>\n<p><strong>Figura 04 - Servidor rodando - Form.html<\/strong><\/p>\n<p>Agora vamos preencher todos os campos do nosso formulário que criamos na parte 1 deste artigo, caso não tenha lido <a href=\"/criar-formulario-html5-parte-1/\">clique aqui<\/a>, depois que preencher os campos do formulário cliquem no botão enviar. Veja na figura 5 como fico:<\/p>\n<p><img src=\"/uploads/2020/02/Figura-5-Comunicação-realizada-com-sucesso-1024x560.jpg\" alt=\"Criar Formulário HTML\"><\/p>\n<p>Figura 5 - Comunicação Funcionando<\/p>\n<h2>Conclusão - Criar Formulário<\/h2>\n<p>Galera chegamos ao fim de mais um artigo do site tipscode, neste artigo criamos um servidor em NodeJS e enviamos os dados do formulário que criamos na parte 1 deste artigo, caso você não tenha lido <a href=\"/criar-formulario-html5-parte-1/\">clique aqui<\/a>. Na parte 3 neste artigo iremos se aprofunda no formulário e aprimorar nossa comunicação entre o servidor e o nosso cliente. <strong>Criar Formulário<\/strong><\/p>\n<h3>DO ZERO A PROGRAMADOR FULL STACK JAVASCRIPT (REACT + NODEJS)<\/h3>\n<p>Veja o vídeo do Leonardo, onde ele explicar com detalhes como você sair do ZERO a DOMINA de uma vez por toda a STACK mais desejada do mercado, clique em Ver Vídeo agora mesmo<\/p>\n<p><a href=\"/programador-fullstack-8-semanas\">VER VÍDEO<\/a><\/p>\n","date":"2020-02-19T00:00:00.000Z","readingTime":8,"title":"Como Criar Formulário HTML: Parte 02","tags":["como-criar-formulario","como-criar-formulario-online","como-criar-formularios","como-criar-um-formulario","como-criar-um-formulario-online","criar-formulario","criar-formulario-para-site","formulario","site-para-criar-formularios"],"description":"Fala dev, neste artigo iremos da continuidade a série Criar Formulário HTML, nessa parte 2 vamos criar um pequeno servidor usando a tecnologia NodeJS para fazermos a comunicação entre front-end e back-end na prática, iremos enviar os dados preenchido no formulário para o nosso servidor em Node. Veja onde paramos, caso você não tenha lido a parte 1 [clique aqui](https//www.tipscode.com.br/criar-formulario-html5-parte-1/). Vamos ao código base.","imgArticle":"/thumbnail-article/formulario-html-parte-2.png","imgHome":"/thumbnail-home/formulario-html-parte-2.png"},{"slug":"especificidade-css-5-coisas-que-voce-precisa","content":"<p><strong>Especificidade CSS<\/strong> é um tipo de “poder de escolha”, que ajuda os navegadores a decidir qual valor da propriedade CSS terá precedência e será aplicado aos elementos. Geralmente, a especificidade é o culpado por você bater cabeça quando pensa que o valor das propriedades CSS deve se aplicar a um elemento, mas não. A razão é que em algum lugar você esqueceu a Especificidade CSS.<\/p>\n<p>A especificidade do CSS geralmente é negligenciada e recebe menos importância pelos desenvolvedores, mas se não for levada a serio, pode ser o pior pesadelo para a depuração do CSS .<\/p>\n<h2>1 - Id é maior que classe<\/h2>\n<p>Bem, todos sabemos que o ID pode ser usado uma vez em uma estrutura de documento. No entanto, o ID em CSS é um exército de um homem que pode derrotar 1000 classes. Quando você tem ID (s) no seu seletor, o número de classes se torna irrelevante.<\/p>\n<pre><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;<\/span>p<\/span> <span class=\"token attr-name\">id<\/span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=<\/span><span class=\"token punctuation\">\"<\/span>idTeste<span class=\"token punctuation\">\"<\/span><\/span> <span class=\"token attr-name\">class<\/span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=<\/span><span class=\"token punctuation\">\"<\/span>barra1 barra 2 barra3 barra4<span class=\"token punctuation\">\"<\/span><\/span><span class=\"token punctuation\">><\/span><\/span>Um <span class=\"token constant\">ID<\/span> contra quatro classes<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/<\/span>p<\/span><span class=\"token punctuation\">><\/span><\/span>\n \n#idTeste<span class=\"token punctuation\">{<\/span>\n  <span class=\"token literal-property property\">color<\/span><span class=\"token operator\">:<\/span> red<span class=\"token punctuation\">;<\/span>\n<span class=\"token punctuation\">}<\/span>\n<span class=\"token punctuation\">.<\/span>barra1<span class=\"token punctuation\">.<\/span>barra2<span class=\"token punctuation\">.<\/span>barra3<span class=\"token punctuation\">.<\/span>barra4 <span class=\"token punctuation\">{<\/span>\n  <span class=\"token literal-property property\">color<\/span><span class=\"token operator\">:<\/span> steelblue<span class=\"token punctuation\">;<\/span>\n<span class=\"token punctuation\">}<\/span>\n<\/code><\/pre>\n<p>Resultado: A cor do parágrafo é &quot;red&quot; (vermelho).<\/p>\n<p>Embora tenhamos quatro classes em um parágrafo, mas um único ID o precedeu. O navegador não respeitará a posição do seletor, seja ela mais recente ou em algum lugar entre as linhas superiores quando for ID.<\/p>\n<h2>2 - Quem será o vencedor?<\/h2>\n<p>E se dois seletores se aplicarem ao mesmo elemento? Vamos dar um exemplo e depois prosseguir.<\/p>\n<pre><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;<\/span>p<\/span> <span class=\"token attr-name\">class<\/span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=<\/span><span class=\"token punctuation\">\"<\/span>barra1 barra2 barra3 barr4<span class=\"token punctuation\">\"<\/span><\/span><span class=\"token punctuation\">><\/span><\/span>Temos quatro classess<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/<\/span>p<\/span><span class=\"token punctuation\">><\/span><\/span>\n \n<span class=\"token punctuation\">.<\/span>barra1<span class=\"token punctuation\">.<\/span>barra2<span class=\"token punctuation\">.<\/span>barra3<span class=\"token punctuation\">.<\/span>barr4 <span class=\"token punctuation\">{<\/span>\n  <span class=\"token literal-property property\">color<\/span><span class=\"token operator\">:<\/span> green<span class=\"token punctuation\">;<\/span>\n<span class=\"token punctuation\">}<\/span>\n \np<span class=\"token punctuation\">.<\/span>barra3<span class=\"token punctuation\">.<\/span>barra4 <span class=\"token punctuation\">{<\/span>\n    <span class=\"token literal-property property\">color<\/span><span class=\"token operator\">:<\/span> #2e8dcd<span class=\"token punctuation\">;<\/span>\n<span class=\"token punctuation\">}<\/span>\n<\/code><\/pre>\n<p>A cor do parágrafo é &quot;green&quot; (Verde)<\/p>\n<p>O vencedor é aquele com especificidade sempre maior. Neste código, a especificidade do primeiro seletor é 0-4-0, enquanto a última regra tem especificidade 0-2-1. Não se preocupe com esse valor de especificidade; já já explicou com mais detalhes. Neste ponto, lembre-se de que a esquerda está sempre certa.<\/p>\n<p>Vamos verificar a primeira posição esquerda, ambos têm 0s. Como a primeira posição esquerda é igual, vamos comparar a próxima posição. Aqui, são 4 e 0. Claramente 4 é maior que 2. Então, 0-4-0 é o vencedor. Portanto, o parágrafo é da cor 'green'.<\/p>\n<h2>3 - CSS Inline - especificidade CSS<\/h2>\n<h3>Já bateu muito cabeça com CSS?<\/h3>\n<p>Recomendo você assistir o vídeo do Leonardo, ele desenvolveu um método incrível, onde você sai do ZERO a um programador full stack em 8 semanas, no vídeo ele conta também sua jornada como desenvolvedor full stack e o melhor, ele pode lhe ajuda ! E só clicar no botão VER VÍDEO.<\/p>\n<p><a href=\"/programador-fullstack-8-semanas\">VER VÍDEO<\/a><\/p>\n<p>Se você gosta de Guerra nas Estrelas, entenderá melhor. CSS inline tem mais poder do que IDs, classes, atributos e pseudo classes etc. É sempre aconselhável não misturar CSS inline com CSS baseado em seletor, a menos que você queira substituir regras de CSS ou casos específicos que incluem o desenvolvimento de plug-ins, widgets etc.<\/p>\n<h2>4 - O poderoso !important<\/h2>\n<p>Sempre que você anexar um valor com o !important, esse seletor será automaticamente declarado como de máxima prioridade em seu navegador. Para provar isso, vamos usar o mesmo código do primeiro exemplo com uma pequena alteração.<\/p>\n<pre><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;<\/span>p<\/span> <span class=\"token attr-name\">id<\/span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=<\/span><span class=\"token punctuation\">\"<\/span>idTeste<span class=\"token punctuation\">\"<\/span><\/span> <span class=\"token attr-name\">class<\/span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=<\/span><span class=\"token punctuation\">\"<\/span>barra1 barra2 barra3 barra4<span class=\"token punctuation\">\"<\/span><\/span><span class=\"token punctuation\">><\/span><\/span>Um <span class=\"token constant\">ID<\/span> contra quatro classes<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/<\/span>p<\/span><span class=\"token punctuation\">><\/span><\/span>\n \n#idTeste<span class=\"token punctuation\">{<\/span>\n  <span class=\"token literal-property property\">color<\/span><span class=\"token operator\">:<\/span> red<span class=\"token punctuation\">;<\/span>\n<span class=\"token punctuation\">}<\/span>\n<span class=\"token punctuation\">.<\/span>barra1<span class=\"token punctuation\">.<\/span>barra2<span class=\"token punctuation\">.<\/span>barra3<span class=\"token punctuation\">.<\/span>barra4 <span class=\"token punctuation\">{<\/span>\n  <span class=\"token literal-property property\">color<\/span><span class=\"token operator\">:<\/span> steelblue <span class=\"token operator\">!<\/span>important<span class=\"token punctuation\">;<\/span> <span class=\"token comment\">/*Added !important value*/<\/span>\n<span class=\"token punctuation\">}<\/span>\n<\/code><\/pre>\n<p>No primeiro código, a cor do parágrafo era 'red', mas depois de anexar !important value, agora o parágrafo é de cor 'steelblue' (azul metálico)<\/p>\n<h2>5 - Calculo da Especificidade<\/h2>\n<p><img src=\"/uploads/2020/02/CSS-Especificidade-1024x617.jpg\" alt=\"especificidade CSS\"><\/p>\n<p>Figura 1: CSS Especificiidade<\/p>\n<p><img src=\"/uploads/2020/02/Tabela-de-especificidade.jpg\" alt=\"especificidade CSS\"><\/p>\n<p>Figura 2: CSS Especificidade<\/p>\n<h3>Já bateu muito cabeça com CSS?<\/h3>\n<p>Recomendo você assistir o vídeo do Leonardo, ele desenvolveu um método incrível, onde você sai do ZERO a um programador full stack em 8 semanas, no vídeo ele conta também sua jornada como desenvolvedor full stack e o melhor, ele pode lhe ajuda ! E só clicar no botão VER VÍDEO.<\/p>\n<p><a href=\"/programador-fullstack-8-semanas\">VER VÍDEO<\/a><\/p>\n<p>Para calcular a especificidade do CSS, primeiro escolhemos o seletor e depois calculamos quantas Ids e classes (incluindo pseudo-classes e atributo) e vários elementos existem. Depois de conhecê-los, escrevemos na ordem: abc<\/p>\n<p>Nós os comparamos movendo da esquerda para a direita. Assim que encontramos um ponto (a / b / c) maior que o outro, paramos por aí. Assim sabemos quem se tornou o vencedor com mais poderes, ou seja, com maior ordem de precedência.<\/p>\n<p>Com relação à tabela acima, o vencedor é o segundo seletor, ie p#idTeste. O motivo é que o ponto 'a' p#idTeste é maior que qualquer outro seletor a.<\/p>\n<h2>Conclusão<\/h2>\n<p>Espero que este pequeno artigo tenha lhe dado uma ideia sobre a especificidade do CSS e por que é tão importante considerar isso. Se você quiser se livrar dos problemas da Especificidade CSS. Caso tenha esquecido algo deixa nos comentários, deixa seu like caso esse artigo tenha lhe ajudado e compartilha com seus colegas.<\/p>\n<p>Artigo Recomendado: <a href=\"/css-grid-tudo-que-voce-nao-aprendeu-parte-1/\">Saiba tudo sobre CSS Gri<\/a>d<\/p>\n","date":"2020-02-15T00:00:00.000Z","readingTime":4,"title":"Especificidade CSS - 5 coisas que você deve saber","description":"Especificidade CSS é um tipo de “poder de escolha”, que ajuda os navegadores a decidir qual valor da propriedade CSS terá precedência e será aplicado aos elementos. Geralmente, a especificidade é o culpado por você bater cabeça quando pensa que o valor das propriedades CSS deve se aplicar a um elemento, mas não. A razão é que em algum lugar você esqueceu a Especificidade CSS.","imgArticle":"/thumbnail-article/especificidade-css.png","imgHome":"/thumbnail-home/especificidade-css.png"},{"slug":"express-vs-spring-boot-qual-e-o-melhor","content":"<p>O objetivo deste artigo é uma comparação não tão técnica. do Express Vs Spring Boot Vamos apenas descrever como é o desenvolvimento de aplicativos usando o Node.js (Temos um artigo sobre o Nodejs caso você não conheça nada sobre, <a href=\"/conhecendo-nodejs/\">clique aqui<\/a>) e usando o Spring Boot. Então lembre-se, este artigo não tem como objetivo afirmar que X ou Y é melhor, apenas comparar as duas tecnologia e deixar você escolhe qual delas se encaixa melhor em seu projeto.<\/p>\n<h2>Comparação<\/h2>\n<p>Express Vs Spring Boot<\/p>\n<p><img src=\"/uploads/2020/02/Comparação-300x262.png\" alt=\"Express Vs Spring Boot \"><\/p>\n<p><strong>Express Vs Spring Boot<\/strong><\/p>\n<p>Gostaria de destacar algumas das diferenças que são percebidas ao desenvolver uma aplicação em Node / Express em relação ao Java / Spring Boot.<\/p>\n<h3>Linguagem<\/h3>\n<p>Express Vs Spring Boot<\/p>\n<p><img src=\"/uploads/2020/02/Qual-a-Linguagem-de-Programação-mais-usada-no-mercado.png\" alt=\"Express Vs Spring Boot \"><\/p>\n<p><strong>Express Vs Spring Boot<\/strong><\/p>\n<p>Se você é um desenvolvedor Java, verá que o JavaScript não é tão difícil de aprender. Você certamente ficará um pouco espantado com os retornos de chamada, mas nada de mais. Você descobrirá as Promises e, no final do dia, usará o async-await para mensagens assíncrona e tudo voltará ao normal, o JavaScript parecerá um pouco estranho, mas o JavaScript de hoje está definitivamente muito bom (como eu disse antes, não é o JavaScript de 2015). É simples, bastante poderoso e conciso.<\/p>\n<h3>Nodejs é Single-Threaded<\/h3>\n<p>Express Vs Spring Boot<\/p>\n<p>Essa é uma das coisas mais &quot;chocantes&quot; para um desenvolvedor Java. Mas o choque desaparece após alguns instantes. Você deve considerar que tudo é executado em uma única thread (com Java qualquer aplicação Web, ele utilizar múltiplas threads) e que funções de retorno de chamada (funções assíncronas) são enfileiradas e executadas quando é melhor executá-las, mas todo o código é executado em uma única thread (a chave para a velocidade do Node.js. e baixo consumo de memória). Do ponto de vista de um desenvolvedor Java, isso significa:<\/p>\n<ul>\n<li>Não execute código intensivo em tempo de CPU, pois tudo aguardará a liberação da CPU antes de executar uma nova função na fila;<\/li>\n<li>Se algo der errado e o Node.js travar, tudo travará: no caso de um aplicativo Web que atenda a várias solicitações simultâneas, todas as solicitações travarão. Você não tem o isolamento que possui com um aplicativo da web Java.<\/li>\n<\/ul>\n<h2>O JS equivalente ao ecossistema de inicialização Spring: Express.js, Passport.js, Sequelize<\/h2>\n<p>Express Vs Spring Boot<\/p>\n<p>Se limitarmos a comparação apenas à aplicação Web MVC, o Spring Boot é definitivamente fantástico: leve e rápido, completo e extremamente configurável. Deste ponto de vista, um desenvolvedor Java não sente grandes falhas em comparação com o que o Express.js oferece.<\/p>\n<p>O Express.js também oferece o mesmo potencial. Uma coisa que, dependendo do gosto pessoal, pode ser mais apreciada ou não é o roteamento: em vez de ser definido no nível da anotação Java, é definido no nível dos arquivos de roteamento.<\/p>\n<p>De maneira geral, o Spring Boot indica uma maneira muito precisa de organizar o código em pacotes (modelos, serviços, controladores), enquanto em um contexto Express.js. não existem essas diretrizes. No entanto, é possível reaplicar uma estrutura de código semelhante e geralmente há projetos em que o código é estruturado de maneira semelhante a um projeto de Inicialização em Spring.<\/p>\n<p>Para a parte da autenticação, o Spring Security é a “melhor ferramenta” … mas também é uma “muito trabalhoso” se usada em alguns casos particularmente complexos. O equivalente em JavaScript é o Passport.js , que é muito poderoso, mas menos estruturado e maduro. No entanto, você tem a sensação de que é capaz de lidar com os mesmos casos e condições que o Spring Security. De qualquer forma, o desenvolvimento de mecanismos de autenticação comuns, como autenticação por JWTs ou outros mecanismos de autenticação comuns, também é amplamente suportado por essa estrutura. A maturidade do Spring Security ainda não foi correspondida pelo Passport.js, mas a percepção que temos é que 80% dos recursos oferecidos pelo Spring Security também foram implementados no Passport.js, de uma maneira que às vezes é mais simples.<\/p>\n<h3>Aprenda o Node.js do zero de forma fácil e prática.<\/h3>\n<p>- Curso 100% em vídeo aulas interativas. Matricule-se agora e aproveite mais esta oportunidade.<br>\n- Curso com certificado de conclusão.<br>\n- Fórum de dúvidas.<br>\n- Aulas práticas do Node.js básico ao avançado.<br>\n- 5 anos de acesso incluído atualizações<\/p>\n<p><a href=\"http://bit.ly/tipscode-curso-nodejs\" target=\"_blank\" rel=\"noopener\">Saiba mais<\/a><\/p>\n<p>O ORM em Java sempre foi, do ponto de vista de muitos desenvolvedores, o calcanhar de Aquiles dos aplicativos Java. O padrão Java é aproximadamente o Hibernate (apesar das várias alternativas, embora difundidas, como Jooq e MyBatis), enquanto, para o mundo JS relacionado aos bancos de dados relacionais, a biblioteca mais popular é Sequelize.<\/p>\n<h2>Hibernate Vs Sequelize<\/h2>\n<p><strong>Express Vs Spring Boot<\/strong><\/p>\n<p><img src=\"/uploads/2020/02/sequelize-vs-hibernate.jpg\" alt=\"Express Vs Spring Boot \"><\/p>\n<p><strong>Express Vs Spring Boot<\/strong><\/p>\n<p>O Hibernate ainda é a solução mais completa, madura e versátil, mas a um custo muito alto! Sequelize pode cobrir 90% dos seus casos de uso. Não é o caso de odiar o Hibernate, mas certamente não é o caso de amor perfeito. É superprojetado, lento e complicado. É como um elefante. No entanto, ele pode fazer qualquer coisa com qualquer banco de dados suportado. Pelo contrário, Sequelize é pequeno e simples, mas não pode gerenciar todos os casos de uso. Algumas das coisas que descobri com o uso do Sequelize:<\/p>\n<ul>\n<li>Você terá um tempo não tão difícil, mas definitivamente não tão fácil. Você pode especificá-los manualmente um por um (mas isso é ultrajante) ou pode usar algum truque para converter nomes em maiúsculas e minúsculas. Essa é uma solução simples, mas tem a desvantagem de que ele quebrará a ferramenta de linha de comando da migração. De qualquer forma, é inaceitável que todos os pedidos usados ​​para introduzir flexibilidade nas definições de convenção de nomenclatura tenham sido descartados e ignorados.<\/li>\n<li>Ele não suporta totalmente chaves compostas. Como claramente indicado aqui , “Embora seja possível criar chaves primárias compostas no Sequelize […] o Sequelize atualmente não suporta chaves estrangeiras compostas, não há como referenciar um modelo / tabela que possua chaves primárias compostas.” Novamente, do meu ponto de vista, isso é imaturidade.<\/li>\n<li>Você precisará fazer alguns truques legais para gerenciar campos de datas devido a interpretações de fuso horário (isso foi realmente inesperado).<\/li>\n<li>Ao adicionar instâncias aos campos relacionados entre duas entidades (como Livro e Autor, por exemplo), as entidades são salvas imediatamente. Isso não é grande coisa, mas mostra que o Sequelize é muito menos sofisticado que o Hibernate, que possui mecanismos internos para decidir quando liberar os dados.<\/li>\n<\/ul>\n<p>Também há algumas coisas que o Sequelize faz muito bem obrigado, como a facilidade de criar consultas em tempo de execução (isso é fácil, você pode compor um objeto JSON em tempo de execução e passá-lo ao mecanismo de consulta). Tente fazer isso ao criar uma consulta JPQL ou considere o quão complicado é o processo com determinados critérios. Honestamente, usar o Hibernate e o Spring Data JPA ao tentar filtrar dinamicamente uma consulta em tempo de execução por alguns campos é uma chatice, enquanto é realmente fácil (como deve ser com qualquer estrutura / linguagem) fazer no Sequelize.<\/p>\n<p>Outro aspecto em que Sequelize brilha em relação ao Hibernate é quando você encontra alguns casos difíceis e precisa fazer uma consulta nativa: os dois permitem executar consultas nativas, mas, honestamente, é muito mais simples converter os resultados em seus modelos em Seqüelize do que no Spring Data JPA / Hibernate.<\/p>\n<p>E não estou falando sobre o tempo de inicialização: a introdução do Hibernate adiciona segundos ao tempo de inicialização, enquanto o Sequelize é bastante imediato. Como consideração final, é bastante óbvio que:<\/p>\n<ul>\n<li>Sequenciar é muito menos maduro que o Hibernate;<\/li>\n<li>O Hibernate é capaz de fazer qualquer coisa, enquanto o Sequelize cobre apenas 90% dos casos de uso;<\/li>\n<li>Sequelizar é muito menos abstrato e definitivamente mais fácil de trabalhar.\n<ul>\n<li>Isso pode ser uma grande vantagem, especialmente quando você possui o esquema do banco de dados, não precisa se adaptar aos bancos de dados herdados e não planeja migrar o mecanismo de banco de dados um dia (para ser sincero, vi apenas um caso de migração de banco de dados em toda a minha vida e foi quando dois bancos decidiram se unir e, por isso, decidiu manter apenas um sistema de TI e reescrever o código do abandonado na outra plataforma.Existem milhares de procedimentos de loja a serem reescritos, então a portabilidade de código, na minha opinião, ao falar sobre ORMs, é um recurso inútil.)<\/li>\n<\/ul><\/li>\n<\/ul>\n<h2>Conclusão<\/h2>\n<p>Express Vs Spring Boot<\/p>\n<p>Atualmente, estou usando muito o JavaScript é estou muito feliz com isso. Trabalhar com JavaScript oferece um maior nível de simplicidade. É ideal para scripts e desenvolvimento padrão da Web, mas eu não o usaria para projetos complexos (exceto para pequenos microsserviços dedicados e isolados) nem para aplicativos numéricos ou aplicativos em que os números contam (como uma troca criptográfica em que Java e sua BigDecimal classe é perfeita para esse escopo). Por fim, a sensação geral que tenho ao desenvolver o JavaScript do servidor é que tudo é um pouco mais simples e menos complicado do que um aplicativo baseado em Java equivalente, embora eu tenha uma forte percepção de que há falta de estabilidade e maturidade em relação ao aplicativo. bibliotecas oferecidas em Java (uma falta real apenas se determinadas bibliotecas forem necessárias para o projeto específico, caso contrário, não fará diferença).<\/p>\n<p>Outra percepção é que o ciclo de desenvolvimento do JavaScript é cerca de 20% mais rápido. Com isso, quero dizer que, devido ao código mais detalhado e à estrutura excessivamente projetada dos aplicativos Java que aderem às diretrizes clássicas e ao tempo gasto na reconstrução do código, você passa muito mais tempo desenvolvendo os mesmos recursos em Java do que em JavaScript. Portanto, quando o aplicativo não fornece cálculos ou processamento de bloqueio e se preocupa com o desenvolvimento de um aplicativo da Web pequeno e clássico, eu quase certamente optaria pelo desenvolvimento com a pilha JavaScript descrita, enquanto em outros casos baseava o aplicativo em a pilha Spring Boot que, a longo prazo, na minha opinião, oferece maior facilidade de manutenção.<\/p>\n<h3>Aprenda o Node.js do zero de forma fácil e prática.<\/h3>\n<p>- Curso 100% em vídeo aulas interativas. Matricule-se agora e aproveite mais esta oportunidade.<br>\n- Curso com certificado de conclusão.<br>\n- Fórum de dúvidas.<br>\n- Aulas práticas do Node.js básico ao avançado.<br>\n- 5 anos de acesso incluído atualizações<\/p>\n<p><a href=\"http://bit.ly/tipscode-curso-nodejs\" target=\"_blank\" rel=\"noopener\">Saiba mais<\/a><\/p>\n","date":"2020-02-12T00:00:00.000Z","readingTime":8,"title":"Express Vs Spring Boot - Qual é o melhor?","description":"O objetivo deste artigo é uma comparação não tão técnica. do Express Vs Spring Boot Vamos apenas descrever como é o desenvolvimento de aplicativos usando o Node.js (Temos um artigo sobre o Nodejs caso você não conheça nada sobre, [clique aqui](https//www.tipscode.com.br/conhecendo-nodejs/)) e usando o Spring Boot. Então lembre-se, este artigo não tem como objetivo afirmar que X ou Y é melhor, apenas comparar as duas tecnologia e deixar você escolhe qual delas se encaixa melhor em seu projeto.","imgArticle":"/thumbnail-article/express-spring-boot.png","imgHome":"/thumbnail-home/express-spring-boot.png"},{"slug":"criar-formulario-html5-parte-1","content":"<p>Opa dev tudo bem com você? Neste artigo iremos da inicio nossos estudos sobre HTML5 e aprender como <strong>Criar Formulário<\/strong> bem feitos e com a semântica certa do HTML5.<\/p>\n<h3>Código Base - Criar Formulário<\/h3>\n<pre><code><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!<\/span><span class=\"token doctype-tag\">DOCTYPE<\/span> <span class=\"token name\">html<\/span><span class=\"token punctuation\">><\/span><\/span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;<\/span>html<\/span> <span class=\"token attr-name\">lang<\/span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=<\/span><span class=\"token punctuation\">\"<\/span>pt-br<span class=\"token punctuation\">\"<\/span><\/span><span class=\"token punctuation\">><\/span><\/span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;<\/span>head<\/span><span class=\"token punctuation\">><\/span><\/span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;<\/span>meta<\/span> <span class=\"token attr-name\">charset<\/span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=<\/span><span class=\"token punctuation\">\"<\/span>UTF-8<span class=\"token punctuation\">\"<\/span><\/span><span class=\"token punctuation\">><\/span><\/span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;<\/span>title<\/span><span class=\"token punctuation\">><\/span><\/span>Document<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/<\/span>title<\/span><span class=\"token punctuation\">><\/span><\/span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/<\/span>head<\/span><span class=\"token punctuation\">><\/span><\/span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;<\/span>body<\/span><span class=\"token punctuation\">><\/span><\/span>\n\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;<\/span>form<\/span> <span class=\"token attr-name\">action<\/span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=<\/span><span class=\"token punctuation\">\"<\/span><span class=\"token punctuation\">\"<\/span><\/span> <span class=\"token attr-name\">method<\/span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=<\/span><span class=\"token punctuation\">\"<\/span>POST<span class=\"token punctuation\">\"<\/span><\/span><span class=\"token punctuation\">><\/span><\/span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;<\/span>input<\/span> <span class=\"token attr-name\">type<\/span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=<\/span><span class=\"token punctuation\">\"<\/span>text<span class=\"token punctuation\">\"<\/span><\/span> <span class=\"token attr-name\">name<\/span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=<\/span><span class=\"token punctuation\">\"<\/span>nmae<span class=\"token punctuation\">\"<\/span><\/span> <span class=\"token punctuation\">/><\/span><\/span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;<\/span>input<\/span> <span class=\"token attr-name\">type<\/span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=<\/span><span class=\"token punctuation\">\"<\/span>password<span class=\"token punctuation\">\"<\/span><\/span> <span class=\"token attr-name\">name<\/span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=<\/span><span class=\"token punctuation\">\"<\/span>senha<span class=\"token punctuation\">\"<\/span><\/span> <span class=\"token punctuation\">/><\/span><\/span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;<\/span>button<\/span><span class=\"token punctuation\">><\/span><\/span>Enviar<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/<\/span>button<\/span><span class=\"token punctuation\">><\/span><\/span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/<\/span>form<\/span><span class=\"token punctuation\">><\/span><\/span>\n    \n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/<\/span>body<\/span><span class=\"token punctuation\">><\/span><\/span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/<\/span>html<\/span><span class=\"token punctuation\">><\/span><\/span>\n<\/code><\/pre>\n<p><img src=\"/uploads/2020/02/Figura-01-Código-Base-Criar-formulário.jpg\" alt=\"Figura 01 - Código Base Criar formulário\"><\/p>\n<p><strong>Figura 01 - Código Base Criar formulário<\/strong><\/p>\n<p>Como podemos observa em nosso código base, para criar formulário usamos a essa possuir algumas atributos como por exemplo action e method, o atributo action se trata-se da ação que queremos que o nosso formulário tenha já o atributo method trata-se qual tipo de requisição esse formulário terá, se é POST, GET, PUT ou DELETE. Iniciamos nosso formulário criando dois campos com as um para o nome e a outra para senha, as possuir vários atributos, em nosso código estamos usando type que serve para dizer o tipo de dado neste campo e o atributo name, que é através desse atributo que o back-end identifica e capturar o dado vinda do front-end.<\/p>\n<h3>Textarea e Radio - Criar Formulário<\/h3>\n<pre><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;<\/span>form<\/span> <span class=\"token attr-name\">action<\/span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=<\/span><span class=\"token punctuation\">\"<\/span><span class=\"token punctuation\">\"<\/span><\/span> <span class=\"token attr-name\">method<\/span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=<\/span><span class=\"token punctuation\">\"<\/span>POST<span class=\"token punctuation\">\"<\/span><\/span><span class=\"token punctuation\">><\/span><\/span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;<\/span>input<\/span> <span class=\"token attr-name\">type<\/span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=<\/span><span class=\"token punctuation\">\"<\/span>text<span class=\"token punctuation\">\"<\/span><\/span> <span class=\"token attr-name\">name<\/span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=<\/span><span class=\"token punctuation\">\"<\/span>nmae<span class=\"token punctuation\">\"<\/span><\/span> <span class=\"token punctuation\">/><\/span><\/span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;<\/span>input<\/span> <span class=\"token attr-name\">type<\/span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=<\/span><span class=\"token punctuation\">\"<\/span>password<span class=\"token punctuation\">\"<\/span><\/span> <span class=\"token attr-name\">name<\/span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=<\/span><span class=\"token punctuation\">\"<\/span>senha<span class=\"token punctuation\">\"<\/span><\/span> <span class=\"token punctuation\">/><\/span><\/span>\n\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;<\/span>textarea<\/span> <span class=\"token attr-name\">name<\/span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=<\/span><span class=\"token punctuation\">\"<\/span>descricao<span class=\"token punctuation\">\"<\/span><\/span> <span class=\"token attr-name\">cols<\/span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=<\/span><span class=\"token punctuation\">\"<\/span>30<span class=\"token punctuation\">\"<\/span><\/span> <span class=\"token attr-name\">rows<\/span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=<\/span><span class=\"token punctuation\">\"<\/span>10<span class=\"token punctuation\">\"<\/span><\/span><span class=\"token punctuation\">><\/span><\/span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/<\/span>textarea<\/span><span class=\"token punctuation\">><\/span><\/span>\n\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;<\/span>div<\/span><span class=\"token punctuation\">><\/span><\/span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;<\/span>input<\/span> <span class=\"token attr-name\">type<\/span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=<\/span><span class=\"token punctuation\">\"<\/span>radio<span class=\"token punctuation\">\"<\/span><\/span> <span class=\"token attr-name\">name<\/span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=<\/span><span class=\"token punctuation\">\"<\/span>tipo<span class=\"token punctuation\">\"<\/span><\/span> <span class=\"token attr-name\">value<\/span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=<\/span><span class=\"token punctuation\">\"<\/span>admin<span class=\"token punctuation\">\"<\/span><\/span> <span class=\"token punctuation\">/><\/span><\/span> Admin\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;<\/span>input<\/span> <span class=\"token attr-name\">type<\/span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=<\/span><span class=\"token punctuation\">\"<\/span>radio<span class=\"token punctuation\">\"<\/span><\/span> <span class=\"token attr-name\">name<\/span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=<\/span><span class=\"token punctuation\">\"<\/span>tipo<span class=\"token punctuation\">\"<\/span><\/span> <span class=\"token attr-name\">value<\/span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=<\/span><span class=\"token punctuation\">\"<\/span>Regular<span class=\"token punctuation\">\"<\/span><\/span><span class=\"token punctuation\">/><\/span><\/span> Regular\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/<\/span>div<\/span><span class=\"token punctuation\">><\/span><\/span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;<\/span>button<\/span><span class=\"token punctuation\">><\/span><\/span>Enviar<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/<\/span>button<\/span><span class=\"token punctuation\">><\/span><\/span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/<\/span>form<\/span><span class=\"token punctuation\">><\/span><\/span>\n<\/code><\/pre>\n<p>A tag cria um campo para descrições, essa tag tem três atributos, name, cols e rows, cols e rows é onde definimos o tamanho do campo em linhas e colunas. Temos também duas tags &lt;input&gt; com o atributo radio, o atributo radio coloca um campo de marcação, veja na figura 02:<\/p>\n<p><img src=\"/uploads/2020/02/Figura-02-Criar-formulário.jpg\" alt=\"\"><\/p>\n<p><strong>Figura 02 - Criar formulário<\/strong><\/p>\n<p>Note que os &lt;input&gt; radio, só lhe permite marcar um dos dois campos, esse comportamento se dá porque nesse caso eles compartilha o mesmo nome, além disso temos que usa o atributo &quot;value&quot; pois é o conteúdo que está neste atributo que será enviando para o nosso back-end<\/p>\n<h3>Checkbox - Criar Formulário<\/h3>\n<pre><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;<\/span>div<\/span><span class=\"token punctuation\">><\/span><\/span>\n   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;<\/span>input<\/span> <span class=\"token attr-name\">type<\/span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=<\/span><span class=\"token punctuation\">\"<\/span>checkbox<span class=\"token punctuation\">\"<\/span><\/span> <span class=\"token attr-name\">name<\/span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=<\/span><span class=\"token punctuation\">\"<\/span>ativo<span class=\"token punctuation\">\"<\/span><\/span> <span class=\"token attr-name\">id<\/span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=<\/span><span class=\"token punctuation\">\"<\/span><span class=\"token punctuation\">\"<\/span><\/span> <span class=\"token punctuation\">/><\/span><\/span> Ativo\n<span class=\"token operator\">&lt;<\/span><span class=\"token operator\">/<\/span>div\n<\/code><\/pre>\n<p>O elementos do tipo checkbox são renderizados por padrão como caixas quadradas que são marcadas (com uma marca de verificação) quando ativadas, como você pode ver na figura 03.<\/p>\n<p><img src=\"/uploads/2020/02/Figura-03-Criar-formulário.jpg\" alt=\"\"><\/p>\n<p><strong>Figura 03 - Criar Formulário<\/strong><\/p>\n<h3>Select- Criar Formulário<\/h3>\n<p>O elemento HTML select () representa um controle que apresenta um menu de opções. As opções dentro do menu são representadas pelo elemento , que podem ser agrupados por elementos. As opções podem ser pré-selecionadas para o usuário.<\/p>\n<pre><code> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;<\/span>select<\/span> <span class=\"token attr-name\">name<\/span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=<\/span><span class=\"token punctuation\">\"<\/span>cidades<span class=\"token punctuation\">\"<\/span><\/span><span class=\"token punctuation\">><\/span><\/span>\n       <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;<\/span>option<\/span> <span class=\"token attr-name\">value<\/span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=<\/span><span class=\"token punctuation\">\"<\/span>jua<span class=\"token punctuation\">\"<\/span><\/span><span class=\"token punctuation\">><\/span><\/span>Juazeiro <span class=\"token keyword\">do<\/span> Norte<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/<\/span>option<\/span><span class=\"token punctuation\">><\/span><\/span>\n       <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;<\/span>option<\/span> <span class=\"token attr-name\">value<\/span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=<\/span><span class=\"token punctuation\">\"<\/span>crato<span class=\"token punctuation\">\"<\/span><\/span><span class=\"token punctuation\">><\/span><\/span>Crato<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/<\/span>option<\/span><span class=\"token punctuation\">><\/span><\/span>\n       <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;<\/span>option<\/span> <span class=\"token attr-name\">value<\/span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=<\/span><span class=\"token punctuation\">\"<\/span>bar<span class=\"token punctuation\">\"<\/span><\/span><span class=\"token punctuation\">><\/span><\/span>Barbalha<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/<\/span>option<\/span><span class=\"token punctuation\">><\/span><\/span>\n       <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;<\/span>option<\/span> <span class=\"token attr-name\">value<\/span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=<\/span><span class=\"token punctuation\">\"<\/span>mv<span class=\"token punctuation\">\"<\/span><\/span><span class=\"token punctuation\">><\/span><\/span>Missão Velha<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/<\/span>option<\/span><span class=\"token punctuation\">><\/span><\/span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/<\/span>select<\/span><span class=\"token punctuation\">><\/span><\/span>\n<\/code><\/pre>\n<p><img src=\"/uploads/2020/02/Figura-04-Criar-Formulário.jpg\" alt=\"\"><\/p>\n<p><strong>Figura 04 - Criar Formulário<\/strong><\/p>\n<h3>Se torne um programador full stack em apenas 8 semanas<\/h3>\n<p>Método de ensino 100% comprovado, acesso vitalicio, suba para o próximo nível<\/p>\n<p><a href=\"/programador-fullstack-8-semanas\"><img src=\"/uploads/2020/01/banner-Curso-programador-full-stack-javascript-em-8-semanas.png\" alt=\"banner Curso programador full stack javascript em 8 semanas\"><\/a><\/p>\n<p>Programador full stack javascript em 8 semanas<\/p>\n<p>Existe também o de múltiplas opções, escrevemos o atributo “multiple” e o atributo “size” definimos o tamanho que queremos que seja exibido.<\/p>\n<pre><code> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;<\/span>select<\/span> <span class=\"token attr-name\">name<\/span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=<\/span><span class=\"token punctuation\">\"<\/span>interesses<span class=\"token punctuation\">\"<\/span><\/span> <span class=\"token attr-name\">multiple<\/span> <span class=\"token attr-name\">size<\/span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=<\/span><span class=\"token punctuation\">\"<\/span>10<span class=\"token punctuation\">\"<\/span><\/span><span class=\"token punctuation\">><\/span><\/span>\n       <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;<\/span>option<\/span> <span class=\"token attr-name\">value<\/span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=<\/span><span class=\"token punctuation\">\"<\/span>JavaScript<span class=\"token punctuation\">\"<\/span><\/span><span class=\"token punctuation\">><\/span><\/span> JavaScript <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/<\/span>option<\/span><span class=\"token punctuation\">><\/span><\/span>\n       <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;<\/span>option<\/span> <span class=\"token attr-name\">value<\/span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=<\/span><span class=\"token punctuation\">\"<\/span>Java<span class=\"token punctuation\">\"<\/span><\/span><span class=\"token punctuation\">><\/span><\/span> Java <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/<\/span>option<\/span><span class=\"token punctuation\">><\/span><\/span>\n       <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;<\/span>option<\/span> <span class=\"token attr-name\">value<\/span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=<\/span><span class=\"token punctuation\">\"<\/span>php<span class=\"token punctuation\">\"<\/span><\/span><span class=\"token punctuation\">><\/span><\/span><span class=\"token constant\">PHP<\/span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/<\/span>option<\/span><span class=\"token punctuation\">><\/span><\/span>\n       <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;<\/span>option<\/span> <span class=\"token attr-name\">value<\/span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=<\/span><span class=\"token punctuation\">\"<\/span>python<span class=\"token punctuation\">\"<\/span><\/span><span class=\"token punctuation\">><\/span><\/span>Python<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/<\/span>option<\/span><span class=\"token punctuation\">><\/span><\/span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/<\/span>select<\/span><span class=\"token punctuation\">><\/span><\/span>\n<\/code><\/pre>\n<p><img src=\"/uploads/2020/02/Figura-05-Criar-Formulário.jpg\" alt=\"\"><\/p>\n<p><strong>Figura 05 - Criar Formulário<\/strong><\/p>\n<h3>Conclusão<\/h3>\n<p>Chegamos ao fim de mais um artigo com bastante conteúdo, essa primeira parte foi apenas com o básico, na parte 2 vamos fazer algumas estilizações, aprender mais e atributos e também a parte semântica do formulário, vamos aprender também a enviar esses dados para um back-end real, vamos construir do zero e fazer essa comunicação entre cliente e servidor. Breve sairá também uma versão desse artigo em formato de vídeo, então não perca tempo visite nosso canal no Youtube e faça sua inscrição lá..<\/p>\n<h3>Canal Youtube<\/h3>\n<p>Estamos também com um canal no Youtube, está saindo vídeos com dicas tutoriais e muito mais regulamente. Se inscreve no canal e compartilha para o maior número de pessoas possível, isso vai me ajuda muito.<\/p>\n<p><a href=\"https://www.youtube.com/channel/UCZKLK7o6IVayeEjkkoWLwbQ?view_as=subscriber\" target=\"_blank\" rel=\"noopener\">Ir para o canal<\/a><\/p>\n<p><a href=\"/instalando-nodejs-no-manjaro/\">Clique aqui para ver outros artigos<\/a><\/p>\n<p>Artigo recomendado: <a href=\"https://vidafullstack.com.br/html/o-que-e-html/\" target=\"_blank\" rel=\"noopener\">O que é HTML<\/a><\/p>\n","date":"2020-02-08T00:00:00.000Z","readingTime":8,"title":"Como Criar Formulário HTML: Parte 01","tags":["como-criar-formulario-html-parte-01","form","formulario","formulario-con-html","formulario-con-html-y-css","formulario-de-contacto-html","formulario-de-contacto-responsive-con-html-y-css","formulario-de-registro","formulario-html","formulario-html-y-css","formulario-registro","formularios","formularios-html","formularios-html5","formularios-html5-y-css3","html","html-formulario-de-contacto","html-formularios","html-y-css-formulario","html5","html5-creando-un-formulario","tutorial"],"description":"Opa dev tudo bem com você? Neste artigo iremos da inicio nossos estudos sobre HTML5 e aprender como Criar Formulário bem feitos e com a semântica certa do HTML5.","imgArticle":"/thumbnail-article/formulario-html-parte-1.png","imgHome":"/thumbnail-home/formulario-html-parte-1.png"},{"slug":"css-grid-o-que-voce-nao-aprendeu-parte-3","content":"<p>Neste artigo iremos aborda a última parte da série de artigos sobre CSS Grid, vamos aprender novas formas de organizar os elementos do layout sem a necessidade de fazer os posicionamentos estudados no artigo <a href=\"/css-grid-tudo-que-voce-nao-aprendeu-parte-1/\">parte 1<\/a> e <a href=\"/css-grid-o-que-voce-nao-aprendeu-parte-2/\">parte 2<\/a> que era colunas e linhas onde colocávamos a coluna 1 até a 3 ou coisa do tipo. Neste vamos aborda uma alternativa bem mais simples para você organiza dentro da Grid ocupando os espaços a partir de um determinado elemento. Vamos ao nosso código base<\/p>\n<h3>Código Base - CSS Grid<\/h3>\n<pre><code><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!<\/span><span class=\"token doctype-tag\">DOCTYPE<\/span> <span class=\"token name\">html<\/span><span class=\"token punctuation\">><\/span><\/span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;<\/span>html<\/span> <span class=\"token attr-name\">lang<\/span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=<\/span><span class=\"token punctuation\">\"<\/span>pt-br<span class=\"token punctuation\">\"<\/span><\/span><span class=\"token punctuation\">><\/span><\/span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;<\/span>head<\/span><span class=\"token punctuation\">><\/span><\/span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;<\/span>meta<\/span> <span class=\"token attr-name\">charset<\/span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=<\/span><span class=\"token punctuation\">\"<\/span>UTF-8<span class=\"token punctuation\">\"<\/span><\/span><span class=\"token punctuation\">><\/span><\/span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;<\/span>title<\/span><span class=\"token punctuation\">><\/span><\/span><span class=\"token constant\">CSS<\/span> Grid Parte <span class=\"token number\">3<\/span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/<\/span>title<\/span><span class=\"token punctuation\">><\/span><\/span>\n\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;<\/span>style<\/span><span class=\"token punctuation\">><\/span><\/span><span class=\"token style\"><span class=\"token language-css\">\n        <span class=\"token selector\">*<\/span> <span class=\"token punctuation\">{<\/span>\n            <span class=\"token property\">padding<\/span><span class=\"token punctuation\">:<\/span> 0<span class=\"token punctuation\">;<\/span>\n            <span class=\"token property\">margin<\/span><span class=\"token punctuation\">:<\/span> 0<span class=\"token punctuation\">;<\/span>\n        <span class=\"token punctuation\">}<\/span>\n        <span class=\"token selector\">body<\/span> <span class=\"token punctuation\">{<\/span>\n            <span class=\"token property\">margin<\/span><span class=\"token punctuation\">:<\/span> 10px<span class=\"token punctuation\">;<\/span>\n        <span class=\"token punctuation\">}<\/span>\n        <span class=\"token selector\">.box<\/span> <span class=\"token punctuation\">{<\/span>\n            <span class=\"token property\">border<\/span><span class=\"token punctuation\">:<\/span> solid 5px rebeccapurple<span class=\"token punctuation\">;<\/span>\n            <span class=\"token property\">font-size<\/span><span class=\"token punctuation\">:<\/span> 30px<span class=\"token punctuation\">;<\/span>\n        <span class=\"token punctuation\">}<\/span>\n    <\/span><\/span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/<\/span>style<\/span><span class=\"token punctuation\">><\/span><\/span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/<\/span>head<\/span><span class=\"token punctuation\">><\/span><\/span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;<\/span>body<\/span><span class=\"token punctuation\">><\/span><\/span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;<\/span>main<\/span> <span class=\"token attr-name\">class<\/span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=<\/span><span class=\"token punctuation\">\"<\/span>box<span class=\"token punctuation\">\"<\/span><\/span><span class=\"token punctuation\">><\/span><\/span><span class=\"token constant\">CONTE<\/span>Ú<span class=\"token constant\">DO<\/span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/<\/span>main<\/span><span class=\"token punctuation\">><\/span><\/span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;<\/span>header<\/span> <span class=\"token attr-name\">class<\/span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=<\/span><span class=\"token punctuation\">\"<\/span>box<span class=\"token punctuation\">\"<\/span><\/span><span class=\"token punctuation\">><\/span><\/span><span class=\"token constant\">CABE<\/span>Ç<span class=\"token constant\">ALHO<\/span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/<\/span>header<\/span><span class=\"token punctuation\">><\/span><\/span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;<\/span>footer<\/span> <span class=\"token attr-name\">class<\/span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=<\/span><span class=\"token punctuation\">\"<\/span>box<span class=\"token punctuation\">\"<\/span><\/span><span class=\"token punctuation\">><\/span><\/span><span class=\"token constant\">RODAP<\/span>É<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/<\/span>footer<\/span><span class=\"token punctuation\">><\/span><\/span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;<\/span>nav<\/span> <span class=\"token attr-name\">class<\/span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=<\/span><span class=\"token punctuation\">\"<\/span>box<span class=\"token punctuation\">\"<\/span><\/span><span class=\"token punctuation\">><\/span><\/span><span class=\"token constant\">NAVEGA<\/span>ÇÃ<span class=\"token constant\">O<\/span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/<\/span>nav<\/span><span class=\"token punctuation\">><\/span><\/span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/<\/span>body<\/span><span class=\"token punctuation\">><\/span><\/span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/<\/span>html<\/span><span class=\"token punctuation\">><\/span><\/span>\n<\/code><\/pre>\n<p>No código base estamos realizando as seguintes configurações, eliminamos os espaços da página com <em>padding<\/em> e <em>margin<\/em> = 0, aplicamos também 10 pixels de <em>margin<\/em> envolta do corpo da página (<em>body<\/em>) e usamos uma bordar com 5px de espessura e uma cor para dá um destaque aos elementos. No código <em>HTML<\/em> dividimos o conteúdo de forma semântica, usando as tags &lt;<em>main<\/em>&gt;, &lt;<em>header<\/em>&gt;, &lt;<em>footer<\/em>&gt; e &lt;<em>nav<\/em>&gt;. A tag &lt;main&gt; está no inicio pois você vai perceber que teremos uma flexibilidade muito grande na hora de colocar os elementos com <em><strong>CSS Grid<\/strong><\/em>. Veja na figura 01 o resultado.<\/p>\n<p><img src=\"/uploads/2020/02/Figura-01-Código-base.jpg\" alt=\"Figura 01 - CSS Grid\"><\/p>\n<p><strong>Figura 01 - CSS Grid<\/strong><\/p>\n<h3>Elementos com Nomes - CSS Grid<\/h3>\n<pre><code>header <span class=\"token punctuation\">{<\/span>\n     grid<span class=\"token operator\">-<\/span>area<span class=\"token operator\">:<\/span> cabecalho<span class=\"token punctuation\">;<\/span>\n<span class=\"token punctuation\">}<\/span>\n\nnav <span class=\"token punctuation\">{<\/span>\n     grid<span class=\"token operator\">-<\/span>area<span class=\"token operator\">:<\/span> navegacao<span class=\"token punctuation\">;<\/span>\n<span class=\"token punctuation\">}<\/span>\n\nmain <span class=\"token punctuation\">{<\/span>\n     grid<span class=\"token operator\">-<\/span>area<span class=\"token operator\">:<\/span> conteudo<span class=\"token punctuation\">;<\/span>\n<span class=\"token punctuation\">}<\/span>\n\nfooter <span class=\"token punctuation\">{<\/span>\n     grid<span class=\"token operator\">-<\/span>area<span class=\"token operator\">:<\/span> rodape<span class=\"token punctuation\">;<\/span>\n<span class=\"token punctuation\">}<\/span>\n<\/code><\/pre>\n<p>Agora vamos aplicar uma propriedade do <em><strong>CSS Grid<\/strong><\/em> chamada &quot;<em>grid-area<\/em>&quot; e vamos da para cada elemento do nosso HMTL um nome especifico, e por fim dizer ao browser que iremos fazer uso do CSS Grid, aplicando na tag &lt;body&gt; o display grid. Veja o resultado na figura 02.<\/p>\n<p><img src=\"/uploads/2020/02/Figura-02-Elementos-com-nomes.jpg\" alt=\"Figura 02 - CSS Grid\"><\/p>\n<p><strong>Figura 02 - CSS Grid<\/strong><\/p>\n<p>Perceba que nossa tela ficou extremamente bagunçada, por que essas propriedades grid-area será usada para especifica como nossos elementos serão organizados em nossa grid.<\/p>\n<h3>Configurando nossa Grid- CSS Grid<\/h3>\n<pre><code> body <span class=\"token punctuation\">{<\/span>\n     <span class=\"token literal-property property\">display<\/span><span class=\"token operator\">:<\/span> grid<span class=\"token punctuation\">;<\/span>\n     min<span class=\"token operator\">-<\/span>height<span class=\"token operator\">:<\/span> 100vh<span class=\"token punctuation\">;<\/span>\n     grid<span class=\"token operator\">-<\/span>template<span class=\"token operator\">-<\/span>columns<span class=\"token operator\">:<\/span> 300px 1fr<span class=\"token punctuation\">;<\/span>\n     grid<span class=\"token operator\">-<\/span>template<span class=\"token operator\">-<\/span>rows<span class=\"token operator\">:<\/span> 100px 1fr 100px<span class=\"token punctuation\">;<\/span>\n\n     grid<span class=\"token operator\">-<\/span>template<span class=\"token operator\">-<\/span>areas<span class=\"token operator\">:<\/span>\n        <span class=\"token string\">'cabecalho cabecalho'<\/span>\n         <span class=\"token string\">'navegacao conteudo'<\/span>\n         <span class=\"token string\">'rodape rodape'<\/span><span class=\"token punctuation\">;<\/span>\n<span class=\"token punctuation\">}<\/span>\n<\/code><\/pre>\n<p>Estamos aplicando min-height 100vh, ou seja irá ocupa a altura inteira da tela, depois vamos definir as colunas e linhas com a propriedade grid-template-columns, onde a primeira coluna terá 300 pixels a segunda vai ocupa o espaço de 1fr, ou seja, todo o restante da tela, com a propriedade grid-template-rows estamos dizendo que a primeira linha terá 100 pixels, ou seja, o cabeçalho, o meio com 1fr, ou seja, o conteúdo irá ocupa o espaço inteiro e lá em baixo 100 pixels para a linha do rodapé.<\/p>\n<p>A partir da linha 7, iremos configurar o posicionamento utilizando os nomes das propriedades <em>grid-area<\/em> que atribuirmos para cada elemento especifico anteriormente, usando o <em>grid-template-areas<\/em> note que é no plural e aqui vamos configura as posições de cada elemento. Pelas configurações que realizamos até agora temos 6 slots na nossa grid, onde são 2 colunas e 3 linhas, então vamos organizar da seguinte forma: “cabeçalho cabecalho” ocupando a primeira linha, na segunda linha ‘navegacao e conteudo’ e na terceira linha ‘footer footer’, ou seja a linha inteira. Veja o resultado na figura 03.<\/p>\n<h3>Você sabe por que muitos programadores desistem enquanto outros têm sucesso?<\/h3>\n<p><a href=\"/programador-fullstack-8-semanas\"><img src=\"/uploads/2020/01/banner-JS8-1080x1920-stories-1-576x1024.jpg\" alt=\"\"><\/a><\/p>\n<p>Talvez você já tem ouvindo essas frases “Eu não consigo aprender”, “Parece que o conteúdo nunca acaba”, “É difícil encontrar vagas para quem está começando” “Eu estou perdido, não sei mais o que estudar” é perfeitamente compreensível que alguns programadores se sintam assim, porém programação é uma carreira excelente e tem ótimos salários, tenho colegas que se formaram junto comigo que ganha mais de R$6.000 Reais por mês. Existem dois motivos muito forte para essa frustração, o primeiro motivo é a base de conhecimento <strong>FRACA<\/strong> e o segundo a falta de noção para se posicionar no mercado. Saiba mais detalhes <a href=\"http://bit.ly/tipscode-curso-programador-full-stack-javascript\" target=\"_blank\" rel=\"noopener\">clicando aqui<\/a>.<\/p>\n<p><a href=\"/programador-fullstack-8-semanas\">Sabe mais !<\/a><\/p>\n<p><img src=\"/uploads/2020/02/Figura-03-Organizando-por-Nomes.jpg\" alt=\"Figura 03 - CSS Grid\"><\/p>\n<p><strong>Figura 03 - CSS Grid<\/strong><\/p>\n<p>Mas, você pode me perguntar, Alisson caso eu queira que a navegação fosse até lá em baixo e o footer ficasse alinhado com o conteúdo como faria isso? Muito simples só fazer a seguinte modificação:<\/p>\n<pre><code>grid<span class=\"token operator\">-<\/span>template<span class=\"token operator\">-<\/span>areas<span class=\"token operator\">:<\/span>\n      <span class=\"token string\">'cabecalho cabecalho'<\/span>\n      <span class=\"token string\">'navegacao conteudo'<\/span>\n      <span class=\"token string\">'navegacao rodape'<\/span><span class=\"token punctuation\">;<\/span>\n<span class=\"token punctuation\">}<\/span>\n<\/code><\/pre>\n<p><img src=\"/uploads/2020/02/Figura-04-Modificando-posições.jpg\" alt=\"Figura 04 - CSS Grid\"><\/p>\n<p><strong>Figura 04 - CSS Grid<\/strong><\/p>\n<p>Veja que é muito simples mentalmente de você pensar como irá organizar seus elementos, primeiro você configura a base com altura, colunas e linha e depois é só organizar seu grid usando os nomes específicos.<\/p>\n<h3>Conteúdo bônus - CSS Grid responsivo<\/h3>\n<p>Esse é um conteúdo bônus onde vou lhe mostrar um pouco do poder do CSS Grid trabalhando com com responsividade em vários tamanhos de telas diferentes. Vamos ao código:<\/p>\n<pre><code><span class=\"token comment\">/*CSS Grid responsivo*/<\/span>\n    @<span class=\"token function\">media<\/span><span class=\"token punctuation\">(<\/span><span class=\"token parameter\">max<span class=\"token operator\">-<\/span>width<span class=\"token operator\">:<\/span> 700px<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">{<\/span>\n\n       body <span class=\"token punctuation\">{<\/span>\n           grid<span class=\"token operator\">-<\/span>template<span class=\"token operator\">-<\/span>columns<span class=\"token operator\">:<\/span> 1fr<span class=\"token punctuation\">;<\/span>\n           grid<span class=\"token operator\">-<\/span>template<span class=\"token operator\">-<\/span>rows<span class=\"token operator\">:<\/span> 80px 80px 1fr 100px<span class=\"token punctuation\">;<\/span>\n           grid<span class=\"token operator\">-<\/span>template<span class=\"token operator\">-<\/span>areas<span class=\"token operator\">:<\/span> \n             <span class=\"token string\">'cabecalho'<\/span>\n              <span class=\"token string\">'navegacao'<\/span>\n              <span class=\"token string\">'conteudo'<\/span>\n              <span class=\"token string\">'rodape'<\/span><span class=\"token punctuation\">;<\/span>\n   <span class=\"token punctuation\">}<\/span>\n<span class=\"token punctuation\">}<\/span>\n<\/code><\/pre>\n<p><img src=\"/uploads/2020/02/Figura-05-conteúdo-responsivo-1024x671.jpg\" alt=\"Figura 05 - CSS Grid\"><\/p>\n<p><strong>Figura 05 - CSS Grid<\/strong><\/p>\n<p>Aplicamos no body a propriedade grid-template-columns: 1fr, ou seja, irá ocupa a coluna inteira, depois usamos o grid-template-rows para configura 80px na primeira linha, 80px na segunda, terceira vai ocupa o máximo possível e a ultima linha 100px. Feito essas configurações básicas basta usar o grid-template-areas para realizar o posicionamento para o tamanho da tela em questão como no exemplo anterior.<\/p>\n<h3>Conclusão<\/h3>\n<p>Chegamos ao fim de mais um artigo aqui do site Tipscode.com.br, caso tenha gostado deixa seu like aqui em baixo, se tive alguma dúvida deixa nos comentários que vou ter o maior prazer em lhe ajuda, caso você ainda não viu estamos com um canal no <a href=\"https://www.youtube.com/channel/UCZKLK7o6IVayeEjkkoWLwbQ?view_as=subscriber\" target=\"_blank\" rel=\"noopener\">Youtube, clicar aqui e se inscreva lá<\/a>, estamos publicando vídeos toda semana.<\/p>\n<h3>Do ZERO a PROGRAMADOR full stack JAVASCRIPT (React + Nodejs)<\/h3>\n<p><a href=\"/programador-fullstack-8-semanas\"><img src=\"/uploads/2020/01/banner-JS8-1080x1920-stories-1-576x1024.jpg\" alt=\"\"><\/a><\/p>\n<p>Talvez você já tem ouvindo essas frases “Eu não consigo aprender”, “Parece que o conteúdo nunca acaba”, “É difícil encontrar vagas para quem está começando” “Eu estou perdido, não sei mais o que estudar” é perfeitamente compreensível que alguns programadores se sintam assim, porém programação é uma carreira excelente e tem ótimos salários, tenho colegas que se formaram junto comigo que ganha mais de R$6.000 Reais por mês. Existem dois motivos muito forte para essa frustração, o primeiro motivo é a base de conhecimento <strong>FRACA<\/strong> e o segundo a falta de noção para se posicionar no mercado. Saiba mais detalhes <a href=\"http://bit.ly/tipscode-curso-programador-full-stack-javascript\" target=\"_blank\" rel=\"noopener\">clicando aqui<\/a>.<\/p>\n<p><a href=\"/programador-fullstack-8-semanas\">Sabe mais !<\/a><\/p>\n","date":"2020-02-02T00:00:00.000Z","readingTime":8,"title":"CSS Grid - Tudo o que você não aprendeu | Parte 3","description":"Neste artigo iremos aborda a última parte da série de artigos sobre CSS Grid, vamos aprender novas formas de organizar os elementos do layout sem a necessidade de fazer os posicionamentos estudados no artigo [parte 1](https//www.tipscode.com.br/css-grid-tudo-que-voce-nao-aprendeu-parte-1/) e [parte 2](https//www.tipscode.com.br/css-grid-o-que-voce-nao-aprendeu-parte-2/) que era colunas e linhas onde colocávamos a coluna 1 até a 3 ou coisa do tipo. Neste vamos aborda uma alternativa bem mais simples para você organiza dentro da Grid ocupando os espaços a partir de um determinado elemento. Vamos ao nosso código base.","imgArticle":"/thumbnail-article/css-grid-parte-3.png","imgHome":"/thumbnail-home/css-grid-parte-3.png"},{"slug":"css-grid-o-que-voce-nao-aprendeu-parte-2","content":"<p>Vamos da continuidade ao nosso estudo sobre CSS Grid, caso você seja novo aqui no site saiba que esse artigo faz parte de uma série de trés artigos, caso você não leu ainda a parte 1 <a href=\"/css-grid-tudo-que-voce-nao-aprendeu-parte-1/\">CLIQUE AQUI<\/a><\/p>\n<h3>Código Base - CSS Grid<\/h3>\n<pre><code><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!<\/span><span class=\"token doctype-tag\">DOCTYPE<\/span> <span class=\"token name\">html<\/span><span class=\"token punctuation\">><\/span><\/span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;<\/span>html<\/span> <span class=\"token attr-name\">lang<\/span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=<\/span><span class=\"token punctuation\">\"<\/span>pt-br<span class=\"token punctuation\">\"<\/span><\/span><span class=\"token punctuation\">><\/span><\/span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;<\/span>head<\/span><span class=\"token punctuation\">><\/span><\/span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;<\/span>meta<\/span> <span class=\"token attr-name\">charset<\/span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=<\/span><span class=\"token punctuation\">\"<\/span>UTF-8<span class=\"token punctuation\">\"<\/span><\/span><span class=\"token punctuation\">><\/span><\/span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;<\/span>meta<\/span> <span class=\"token attr-name\">name<\/span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=<\/span><span class=\"token punctuation\">\"<\/span>viewport<span class=\"token punctuation\">\"<\/span><\/span> <span class=\"token attr-name\">content<\/span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=<\/span><span class=\"token punctuation\">\"<\/span>width=device-width, initial-scale=1.0<span class=\"token punctuation\">\"<\/span><\/span><span class=\"token punctuation\">><\/span><\/span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;<\/span>meta<\/span> <span class=\"token attr-name\">http-equiv<\/span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=<\/span><span class=\"token punctuation\">\"<\/span>X-UA-Compatible<span class=\"token punctuation\">\"<\/span><\/span> <span class=\"token attr-name\">content<\/span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=<\/span><span class=\"token punctuation\">\"<\/span>ie=edge<span class=\"token punctuation\">\"<\/span><\/span><span class=\"token punctuation\">><\/span><\/span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;<\/span>title<\/span><span class=\"token punctuation\">><\/span><\/span><span class=\"token constant\">CSS<\/span> Grid Parte <span class=\"token number\">2<\/span> <span class=\"token operator\">-<\/span> TipsCode<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/<\/span>title<\/span><span class=\"token punctuation\">><\/span><\/span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;<\/span>style<\/span><span class=\"token punctuation\">><\/span><\/span><span class=\"token style\"><span class=\"token language-css\">\n        <span class=\"token selector\">html,\n        body<\/span> <span class=\"token punctuation\">{<\/span>\n            <span class=\"token property\">margin<\/span><span class=\"token punctuation\">:<\/span> 20px<span class=\"token punctuation\">;<\/span>\n            <span class=\"token property\">height<\/span><span class=\"token punctuation\">:<\/span> <span class=\"token function\">calc<\/span><span class=\"token punctuation\">(<\/span>100% - 40px<span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">;<\/span>\n            <span class=\"token property\">background-color<\/span><span class=\"token punctuation\">:<\/span> burlywood<span class=\"token punctuation\">;<\/span>\n        <span class=\"token punctuation\">}<\/span>\n\n        <span class=\"token selector\">div<\/span> <span class=\"token punctuation\">{<\/span>\n            <span class=\"token property\">display<\/span><span class=\"token punctuation\">:<\/span> flex<span class=\"token punctuation\">;<\/span>\n            <span class=\"token property\">align-items<\/span><span class=\"token punctuation\">:<\/span> center<span class=\"token punctuation\">;<\/span>\n            <span class=\"token property\">justify-content<\/span><span class=\"token punctuation\">:<\/span> center<span class=\"token punctuation\">;<\/span>\n            <span class=\"token property\">font-size<\/span><span class=\"token punctuation\">:<\/span> 30px<span class=\"token punctuation\">;<\/span>\n            <span class=\"token property\">border<\/span><span class=\"token punctuation\">:<\/span> solid 5px darkcyan<span class=\"token punctuation\">;<\/span>\n            <span class=\"token property\">background<\/span><span class=\"token punctuation\">:<\/span> #fff<span class=\"token punctuation\">;<\/span>\n        <span class=\"token punctuation\">}<\/span>\n\n        <span class=\"token selector\">body<\/span> <span class=\"token punctuation\">{<\/span>\n            <span class=\"token property\">display<\/span><span class=\"token punctuation\">:<\/span> grid<span class=\"token punctuation\">;<\/span>\n        <span class=\"token punctuation\">}<\/span>\n    <\/span><\/span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/<\/span>style<\/span><span class=\"token punctuation\">><\/span><\/span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/<\/span>head<\/span><span class=\"token punctuation\">><\/span><\/span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;<\/span>body<\/span><span class=\"token punctuation\">><\/span><\/span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;<\/span>div<\/span> <span class=\"token attr-name\">class<\/span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=<\/span><span class=\"token punctuation\">\"<\/span>box1<span class=\"token punctuation\">\"<\/span><\/span><span class=\"token punctuation\">><\/span><\/span><span class=\"token number\">01<\/span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/<\/span>div<\/span><span class=\"token punctuation\">><\/span><\/span> \n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;<\/span>div<\/span> <span class=\"token attr-name\">class<\/span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=<\/span><span class=\"token punctuation\">\"<\/span>box2<span class=\"token punctuation\">\"<\/span><\/span><span class=\"token punctuation\">><\/span><\/span><span class=\"token number\">02<\/span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/<\/span>div<\/span><span class=\"token punctuation\">><\/span><\/span> \n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;<\/span>div<\/span> <span class=\"token attr-name\">class<\/span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=<\/span><span class=\"token punctuation\">\"<\/span>box3<span class=\"token punctuation\">\"<\/span><\/span><span class=\"token punctuation\">><\/span><\/span><span class=\"token number\">03<\/span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/<\/span>div<\/span><span class=\"token punctuation\">><\/span><\/span>    \n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/<\/span>body<\/span><span class=\"token punctuation\">><\/span><\/span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/<\/span>html<\/span><span class=\"token punctuation\">><\/span><\/span>\n<\/code><\/pre>\n<p><img src=\"/uploads/2020/01/Figura-01-Código-base-1.jpg\" alt=\"Figura 01 - Código Base - CSS Grid\"><\/p>\n<p><strong>Figura 01 - Código Base - CSS Grid<\/strong><\/p>\n<p>Reforçando esse artigo é a continuação do artigo <strong><em>CSS Grid<\/em><\/strong> - Tudo o que você não aprendeu | Parte 1, terá assuntos que não serão explicados aqui pois já foram na parte 1, caso você tenha alguma dificuldade no entendimento recomendo ler a parte 1.<\/p>\n<pre><code>body <span class=\"token punctuation\">{<\/span>\n     <span class=\"token literal-property property\">display<\/span><span class=\"token operator\">:<\/span> grid<span class=\"token punctuation\">;<\/span>\n\n     grid<span class=\"token operator\">-<\/span>template<span class=\"token operator\">-<\/span>columns<span class=\"token operator\">:<\/span> \n            <span class=\"token punctuation\">[<\/span>inicio<span class=\"token punctuation\">]<\/span> 1fr \n            <span class=\"token punctuation\">[<\/span>metade<span class=\"token operator\">-<\/span><span class=\"token number\">1<\/span> meio<span class=\"token operator\">-<\/span><span class=\"token number\">1<\/span><span class=\"token punctuation\">]<\/span> 1fr\n            <span class=\"token punctuation\">[<\/span>metade<span class=\"token operator\">-<\/span><span class=\"token number\">2<\/span> meio<span class=\"token operator\">-<\/span><span class=\"token number\">2<\/span><span class=\"token punctuation\">]<\/span> 1fr <span class=\"token punctuation\">[<\/span>fim<span class=\"token punctuation\">]<\/span><span class=\"token punctuation\">;<\/span>\n     grid<span class=\"token operator\">-<\/span>template<span class=\"token operator\">-<\/span>rows<span class=\"token operator\">:<\/span> <span class=\"token function\">repeat<\/span><span class=\"token punctuation\">(<\/span><span class=\"token number\">3<\/span><span class=\"token punctuation\">,<\/span> 1fr<span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">;<\/span>\n<span class=\"token punctuation\">}<\/span>\n\n<span class=\"token punctuation\">.<\/span>box1 <span class=\"token punctuation\">{<\/span>\n      grid<span class=\"token operator\">-<\/span>column<span class=\"token operator\">-<\/span>start<span class=\"token operator\">:<\/span> meio<span class=\"token punctuation\">;<\/span>\n      grid<span class=\"token operator\">-<\/span>column<span class=\"token operator\">-<\/span>end<span class=\"token operator\">:<\/span> fim<span class=\"token punctuation\">;<\/span>\n<span class=\"token punctuation\">}<\/span>\n<\/code><\/pre>\n<p>Estamos usando a unidade fr (explicado no artigo parte 1), estamos criando três colunas e colocando um nome em cada uma, na primeira coluna chamamos de “inicio” a segunda de “metade-1 meio-1, metade-2 meio-2” e a terceira de “fim” depois usamos a função <em>repeat()<\/em> para criar 9 células (<strong><em>observação: se você for testar no google-chrome ou outro navegador que não seja o Firefox, não mostrará as 9 célula<\/em><\/strong>s). Na classe “box1” estamos dizendo que o elemento 1 irá iniciar na linha 3, e terminar na linha 4. Veja a figura 02 (Estou usando o Firefox, foi explicado no artigo parte 1)<\/p>\n<p><img src=\"/uploads/2020/01/Figura-02-Renomeado-colunas-CSS-Grid.jpg\" alt=\"Figura 01 - Renomeado colunas - CSS Grid\"><\/p>\n<p><strong>Figura 02 - CSS Grid<\/strong><\/p>\n<h3>Você sabe por que muitos programadores desistem enquanto outros têm sucesso?<\/h3>\n<p>Talvez você já tem ouvindo essas frases “Eu não consigo aprender”, “Parece que o conteúdo nunca acaba”, “É difícil encontrar vagas para quem está começando” “Eu estou perdido, não sei mais o que estudar” é perfeitamente compreensível que alguns programadores se sintam assim, porém programação é uma carreira excelente e tem ótimos salários, tenho colegas que se formaram junto comigo que ganha mais de R$6.000 Reais por mês. Existem dois motivos muito forte para essa frustração, o primeiro motivo é a base de conhecimento <strong>FRACA<\/strong> e o segundo a falta de noção para se posicionar no mercado. Saiba mais detalhes <a href=\"http://bit.ly/tipscode-curso-programador-full-stack-javascript\" target=\"_blank\" rel=\"noopener\">clicando aqui<\/a>.<\/p>\n<h3>Continuando o Conteúdo - CSS Grid<\/h3>\n<p>Existe outra forma de se usar essas propriedades não só especificamente com os nomes, mas podemos utilizar com os números também como virmos na parte 1 do artigo, temos uma propriedade onde podemos usar todos os atributos de uma só vez, ou seja, podemos colocar o start e o end em uma única propriedade.<\/p>\n<pre><code>grid<span class=\"token operator\">-<\/span>column<span class=\"token operator\">:<\/span> meio<span class=\"token operator\">-<\/span><span class=\"token number\">1<\/span> <span class=\"token operator\">/<\/span> fim<span class=\"token punctuation\">;<\/span>\n<\/code><\/pre>\n<p>Estamos dizendo que o elemento “box1” irá iniciar na linha 2 e vai até o final que em nosso caso é a linha 4, por isso o elemento ocupou as duas células e deu uma quebra de linha. Veja o resultado na figura 03.<\/p>\n<p><img src=\"/uploads/2020/01/Figura-03-Grid-column.jpg\" alt=\"Figura 03 - CSS Grid\"><\/p>\n<p><strong>Figura 03 - CSS Grid<\/strong><\/p>\n<p>Podemos fazer isso também com as linhas com o seguinte código:<\/p>\n<pre><code>grid<span class=\"token operator\">-<\/span>row<span class=\"token operator\">:<\/span> <span class=\"token number\">1<\/span> <span class=\"token operator\">/<\/span> span <span class=\"token number\">2<\/span><span class=\"token punctuation\">;<\/span>\n<\/code><\/pre>\n<p>Faça o teste ai na sua casa. Existe outra propriedade bem interessante chamada &quot;grid-area&quot;, ou seja, a área da linha essa propriedade irá configura a coluna e a linha em uma unica propriedade, a ordem para se utilizar os atributos é: &quot;row-start column-start row-end column-end&quot; vamos a um exemplo em código:<\/p>\n<pre><code>grid<span class=\"token operator\">-<\/span>area<span class=\"token operator\">:<\/span> <span class=\"token number\">1<\/span> <span class=\"token operator\">/<\/span> meio<span class=\"token operator\">-<\/span><span class=\"token number\">1<\/span> <span class=\"token operator\">/<\/span> span <span class=\"token number\">3<\/span> <span class=\"token operator\">/<\/span> fim<span class=\"token punctuation\">;<\/span>\n<\/code><\/pre>\n<p>O elemento vai sair da linha 1 e da um span (salto) de 3 e a coluna sairá do meio e irá até o fim da coluna.<\/p>\n<p><img src=\"/uploads/2020/01/Figura-04-Grid-area.jpg\" alt=\"CSS Grid\"><\/p>\n<p><strong>Figura 04 - CSS Grid<\/strong><\/p>\n<h3>Gaps em colunas e linhas- CSS Grid<\/h3>\n<p>Podemos ainda utilizar <strong><em>gaps<\/em><\/strong> que significa pequenos espaços entre as colunas e as linhas, essa propriedade é bem interessante pois ela nos permite um poder de criação em grid enorme, vamos a um exemplo.<\/p>\n<pre><code><span class=\"token comment\">/*Propriedades utilizadas dentro do body*/<\/span>\ngrid<span class=\"token operator\">-<\/span>column<span class=\"token operator\">-<\/span>gap<span class=\"token operator\">:<\/span> 20px<span class=\"token punctuation\">;<\/span>\ngrid<span class=\"token operator\">-<\/span>row<span class=\"token operator\">-<\/span>gap<span class=\"token operator\">:<\/span> 20px<span class=\"token punctuation\">;<\/span>\n<\/code><\/pre>\n<p>Estamos aplicando 20px entre as colunas e 20px entre as linhas, veja que algo muito simples de se trabalhar com essa propriedade.<\/p>\n<p><img src=\"/uploads/2020/01/Figura-05-Gaps.jpg\" alt=\"CSS Grid\"><\/p>\n<p>Figura 05 - CSS Grid<\/p>\n<p>Também tempos uma propriedade onde podemos usar o gap de coluna e linha em uma única propriedade Veja:<\/p>\n<pre><code>grid<span class=\"token operator\">-<\/span>gap<span class=\"token operator\">:<\/span> 80px 30px<span class=\"token punctuation\">;<\/span>\n<\/code><\/pre>\n<p>Primeiro atributo é a linha e o segundo atributo é a coluna, ou seja, aplicamos 80px nas linhas e 30px na coluna. Caso você coloque apenas um atributo, ele irá aplicar tanto nas colunas como nas linhas. Faça o teste aí na sua casa.<\/p>\n<h3>Conclusão<\/h3>\n<p>Chegamos ao fim de mais um artigo aqui do blog TipsCode, caso tenha gostado do conteúdo assine nosso newsletter para receber as notificações via e-mail toda vez que for publicado conteúdo novo, deixa um comentário de feedback isso nos ajuda a está melhorando cada dia mais e compartilha esse artigo para seus amigos!.<\/p>\n<h3>Programador Full Stack em 8 Semanas, passe para o próximo nível como programador!<\/h3>\n<p><a href=\"/programador-fullstack-8-semanas\"><img src=\"/uploads/2020/01/banner-JS8-1080x1920-stories-2-576x1024.jpg\" alt=\"\"><\/a><\/p>\n<p>Nesse super treinamento você vai aprender de forma totalmente prática através de aulas, exercícios e projetos a programação web Javascript focada no mercado de trabalho.<\/p>\n<ul>\n<li>Introdução a Web + HTML5;<\/li>\n<li>CSS + Bulma;<\/li>\n<li>JavaScript + Lógica de Programação;<\/li>\n<li>Git e Github;<\/li>\n<li>JavaScript moderno (ES6+);<\/li>\n<li>React;<\/li>\n<li>NodeJS + Express + MongoDB;<\/li>\n<li>Como Criar um APP inspirado no Evernote;<\/li>\n<li>Como preparar seu portfólio e encontrar Jobs.<\/li>\n<\/ul>\n<p><a href=\"/programador-fullstack-8-semanas\">Saiba mais!!<\/a><\/p>\n","date":"2020-01-26T00:00:00.000Z","readingTime":8,"title":"CSS Grid - Tudo o que você não aprendeu | Parte 2","categories":["css"],"tags":["css","css-grid","css3","desenvolvimento","desenvolvimento-web","grid","internet","javascript","programacao","web"],"description":"Vamos da continuidade ao nosso estudo sobre CSS Grid, caso você seja novo aqui no site saiba que esse artigo faz parte de uma série de trés artigos, caso você não leu ainda a parte 1 [CLIQUE AQUI](https//www.tipscode.com.br/css-grid-tudo-que-voce-nao-aprendeu-parte-1/)","imgArticle":"/thumbnail-article/css-grid-parte-2.png","imgHome":"/thumbnail-home/css-grid-parte-2.png"},{"slug":"css-grid-tudo-que-voce-nao-aprendeu-parte-1","content":"<p>Neste artigo vamos estudar <strong><em>CSS Grid<\/em><\/strong>, esse recurso maravilhoso do <em>CSS3<\/em>, tenho certeza que irá lhe ajuda bastante em criar seus próprios Layouts. Vamos a prática, bora coda!<\/p>\n<h2>Código Base - CSS Grid<\/h2>\n<pre><code><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!<\/span><span class=\"token doctype-tag\">DOCTYPE<\/span> <span class=\"token name\">html<\/span><span class=\"token punctuation\">><\/span><\/span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;<\/span>html<\/span> <span class=\"token attr-name\">lang<\/span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=<\/span><span class=\"token punctuation\">\"<\/span>pt-br<span class=\"token punctuation\">\"<\/span><\/span><span class=\"token punctuation\">><\/span><\/span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;<\/span>head<\/span><span class=\"token punctuation\">><\/span><\/span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;<\/span>meta<\/span> <span class=\"token attr-name\">charset<\/span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=<\/span><span class=\"token punctuation\">\"<\/span>UTF-8<span class=\"token punctuation\">\"<\/span><\/span><span class=\"token punctuation\">><\/span><\/span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;<\/span>meta<\/span> <span class=\"token attr-name\">name<\/span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=<\/span><span class=\"token punctuation\">\"<\/span>viewport<span class=\"token punctuation\">\"<\/span><\/span> <span class=\"token attr-name\">content<\/span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=<\/span><span class=\"token punctuation\">\"<\/span>width=device-width, initial-scale=1.0<span class=\"token punctuation\">\"<\/span><\/span><span class=\"token punctuation\">><\/span><\/span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;<\/span>meta<\/span> <span class=\"token attr-name\">http-equiv<\/span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=<\/span><span class=\"token punctuation\">\"<\/span>X-UA-Compatible<span class=\"token punctuation\">\"<\/span><\/span> <span class=\"token attr-name\">content<\/span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=<\/span><span class=\"token punctuation\">\"<\/span>ie=edge<span class=\"token punctuation\">\"<\/span><\/span><span class=\"token punctuation\">><\/span><\/span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;<\/span>title<\/span><span class=\"token punctuation\">><\/span><\/span><span class=\"token constant\">CSS<\/span> Grid <span class=\"token operator\">-<\/span> TipsCode<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/<\/span>title<\/span><span class=\"token punctuation\">><\/span><\/span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;<\/span>style<\/span><span class=\"token punctuation\">><\/span><\/span><span class=\"token style\"><span class=\"token language-css\">\n        <span class=\"token selector\">html,\n        body<\/span> <span class=\"token punctuation\">{<\/span>\n            <span class=\"token property\">margin<\/span><span class=\"token punctuation\">:<\/span> 20px<span class=\"token punctuation\">;<\/span>\n            <span class=\"token property\">height<\/span><span class=\"token punctuation\">:<\/span> <span class=\"token function\">calc<\/span><span class=\"token punctuation\">(<\/span>100% - 40px<span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">;<\/span>\n            <span class=\"token property\">background-color<\/span><span class=\"token punctuation\">:<\/span> burlywood<span class=\"token punctuation\">;<\/span>\n        <span class=\"token punctuation\">}<\/span>\n\n        <span class=\"token selector\">div<\/span> <span class=\"token punctuation\">{<\/span>\n            <span class=\"token property\">display<\/span><span class=\"token punctuation\">:<\/span> flex<span class=\"token punctuation\">;<\/span>\n            <span class=\"token property\">align-items<\/span><span class=\"token punctuation\">:<\/span> center<span class=\"token punctuation\">;<\/span>\n            <span class=\"token property\">justify-content<\/span><span class=\"token punctuation\">:<\/span> center<span class=\"token punctuation\">;<\/span>\n            <span class=\"token property\">font-size<\/span><span class=\"token punctuation\">:<\/span> 30px<span class=\"token punctuation\">;<\/span>\n            <span class=\"token property\">border<\/span><span class=\"token punctuation\">:<\/span> solid 5px darkcyan<span class=\"token punctuation\">;<\/span>\n            <span class=\"token property\">background<\/span><span class=\"token punctuation\">:<\/span> #fff<span class=\"token punctuation\">;<\/span>\n        <span class=\"token punctuation\">}<\/span>\n    <\/span><\/span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/<\/span>style<\/span><span class=\"token punctuation\">><\/span><\/span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/<\/span>head<\/span><span class=\"token punctuation\">><\/span><\/span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;<\/span>body<\/span><span class=\"token punctuation\">><\/span><\/span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;<\/span>div<\/span> <span class=\"token attr-name\">class<\/span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=<\/span><span class=\"token punctuation\">\"<\/span>box1<span class=\"token punctuation\">\"<\/span><\/span><span class=\"token punctuation\">><\/span><\/span><span class=\"token number\">01<\/span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/<\/span>div<\/span><span class=\"token punctuation\">><\/span><\/span> \n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;<\/span>div<\/span> <span class=\"token attr-name\">class<\/span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=<\/span><span class=\"token punctuation\">\"<\/span>box2<span class=\"token punctuation\">\"<\/span><\/span><span class=\"token punctuation\">><\/span><\/span><span class=\"token number\">02<\/span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/<\/span>div<\/span><span class=\"token punctuation\">><\/span><\/span> \n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;<\/span>div<\/span> <span class=\"token attr-name\">class<\/span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=<\/span><span class=\"token punctuation\">\"<\/span>box3<span class=\"token punctuation\">\"<\/span><\/span><span class=\"token punctuation\">><\/span><\/span><span class=\"token number\">03<\/span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/<\/span>div<\/span><span class=\"token punctuation\">><\/span><\/span> \n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;<\/span>div<\/span> <span class=\"token attr-name\">class<\/span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=<\/span><span class=\"token punctuation\">\"<\/span>box4<span class=\"token punctuation\">\"<\/span><\/span><span class=\"token punctuation\">><\/span><\/span><span class=\"token number\">04<\/span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/<\/span>div<\/span><span class=\"token punctuation\">><\/span><\/span> \n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;<\/span>div<\/span> <span class=\"token attr-name\">class<\/span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=<\/span><span class=\"token punctuation\">\"<\/span>box5<span class=\"token punctuation\">\"<\/span><\/span><span class=\"token punctuation\">><\/span><\/span><span class=\"token number\">05<\/span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/<\/span>div<\/span><span class=\"token punctuation\">><\/span><\/span> \n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;<\/span>div<\/span> <span class=\"token attr-name\">class<\/span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=<\/span><span class=\"token punctuation\">\"<\/span>box6<span class=\"token punctuation\">\"<\/span><\/span><span class=\"token punctuation\">><\/span><\/span><span class=\"token number\">06<\/span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/<\/span>div<\/span><span class=\"token punctuation\">><\/span><\/span> \n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;<\/span>div<\/span> <span class=\"token attr-name\">class<\/span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=<\/span><span class=\"token punctuation\">\"<\/span>box7<span class=\"token punctuation\">\"<\/span><\/span><span class=\"token punctuation\">><\/span><\/span><span class=\"token number\">07<\/span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/<\/span>div<\/span><span class=\"token punctuation\">><\/span><\/span> \n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;<\/span>div<\/span> <span class=\"token attr-name\">class<\/span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=<\/span><span class=\"token punctuation\">\"<\/span>box8<span class=\"token punctuation\">\"<\/span><\/span><span class=\"token punctuation\">><\/span><\/span><span class=\"token number\">08<\/span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/<\/span>div<\/span><span class=\"token punctuation\">><\/span><\/span> \n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;<\/span>div<\/span> <span class=\"token attr-name\">class<\/span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=<\/span><span class=\"token punctuation\">\"<\/span>box9<span class=\"token punctuation\">\"<\/span><\/span><span class=\"token punctuation\">><\/span><\/span><span class=\"token number\">09<\/span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/<\/span>div<\/span><span class=\"token punctuation\">><\/span><\/span> \n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;<\/span>div<\/span> <span class=\"token attr-name\">class<\/span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=<\/span><span class=\"token punctuation\">\"<\/span>box10<span class=\"token punctuation\">\"<\/span><\/span><span class=\"token punctuation\">><\/span><\/span><span class=\"token number\">10<\/span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/<\/span>div<\/span><span class=\"token punctuation\">><\/span><\/span> \n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;<\/span>div<\/span> <span class=\"token attr-name\">class<\/span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=<\/span><span class=\"token punctuation\">\"<\/span>box11<span class=\"token punctuation\">\"<\/span><\/span><span class=\"token punctuation\">><\/span><\/span><span class=\"token number\">11<\/span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/<\/span>div<\/span><span class=\"token punctuation\">><\/span><\/span> \n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;<\/span>div<\/span> <span class=\"token attr-name\">class<\/span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=<\/span><span class=\"token punctuation\">\"<\/span>box12<span class=\"token punctuation\">\"<\/span><\/span><span class=\"token punctuation\">><\/span><\/span><span class=\"token number\">12<\/span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/<\/span>div<\/span><span class=\"token punctuation\">><\/span><\/span>    \n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/<\/span>body<\/span><span class=\"token punctuation\">><\/span><\/span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/<\/span>html<\/span><span class=\"token punctuation\">><\/span><\/span>\n<\/code><\/pre>\n<p><img src=\"/uploads/2020/01/Figura-01-código-base.jpg\" alt=\"CSS Grid\"><\/p>\n<p><strong>Figura 01 - CSS Grid<\/strong><\/p>\n<p>No <em>HTML<\/em> criamos 12 &lt;<em>divs<\/em>&gt; cada uma contendo classes cujo o nome é “box” de 1 até 12, já no CSS temos um <em>margin<\/em> de 20 pixels em volta do <em>body<\/em>, com uma altura de 100% subtraindo 40px da margem de cima e de baixo. Na &lt;div&gt; temos um display flex, ou seja, os elementos vão ser <em>flexbox<\/em>, os atributos “<em>alingn-items<\/em> e <em>justify-content<\/em>” é para que o número que está dentro da &lt;<em>div<\/em>&gt; fique alinhado ao centro, depois definimos o tamanho da fonte e a borda junto com o background. Essas configurações foram feitas para facilita nosso entendimento a respeito do <strong><em>CSS Grid<\/em><\/strong>, perceba que o recurso Flex Box aliado com <strong><em>CSS Grid<\/em><\/strong> é bastante interessante, breve teremos artigos sobre <em>FlexBox<\/em>.<\/p>\n<p>Agora que temos nosso código base, iremos inicia os estudos sobre <em><strong>CSS Grid<\/strong><\/em>, esse artigo será muito prático, temos vários códigos e exemplos. Vamos começar, para dizer ao browser que vamos trabalhar com <strong><em>CSS Grid<\/em><\/strong> escrevemos o seguinte código:<\/p>\n<pre><code>body <span class=\"token punctuation\">{<\/span>\n    <span class=\"token literal-property property\">display<\/span><span class=\"token operator\">:<\/span> grid<span class=\"token punctuation\">;<\/span>\n<span class=\"token punctuation\">}<\/span>\n<\/code><\/pre>\n<p><img src=\"/uploads/2020/01/Figura-02-Aplicação-do-CSS-Grid.jpg\" alt=\"\"><\/p>\n<p><strong>Figura 02 - Aplicação do CSS Grid<\/strong><\/p>\n<p>Note que houver uma pequena alteração em nosso layout, ele agora está ocupando todo o espaço, ou seja os 100% da altura, isso está acontecendo pois estamos usando no código base o “height” 100%. O <strong><em>CSS Grid<\/em><\/strong> possui linhas e colunas, ou seja, ele é bidimensional trabalha com duas dimensões, vamos explorar cada propriedade que envolve o <em><strong>CSS Grid<\/strong><\/em>, vamos a primeira delas:<\/p>\n<h2>Grid-template-columns - CSS Grid<\/h2>\n<pre><code>grid<span class=\"token operator\">-<\/span>template<span class=\"token operator\">-<\/span>columns<span class=\"token operator\">:<\/span> <span class=\"token number\">50<\/span><span class=\"token operator\">%<\/span> <span class=\"token number\">50<\/span><span class=\"token operator\">%<\/span><span class=\"token punctuation\">;<\/span>\n<\/code><\/pre>\n<p>O “<em>grid-template-columns<\/em>” defini qual será a organização das colunas em nosso Layout, o nosso layout tem apenas 1 coluna, então vamos defini duas colunas para o nosso grid, então escrevemos “50%” e “50%” aqui estamos dizendo que, a primeira coluna ocupará 50% do espaço e a segunda coluna também ocupará 50% do espaço, neste cenário passamos a ter duas colunas. Veja o resultado na figura 03.<\/p>\n<p><img src=\"/uploads/2020/01/Figura-03-Duas-colunas.jpg\" alt=\"CSS Grid\n\"><\/p>\n<p><strong><em>Figura 03 - Duas colunas<\/em><\/strong> <strong>| CSS Grid<\/strong><\/p>\n<p>Quando temos valores iguais na propriedade “grid-template-columns” que é o nosso caso onde temos 50% e 50%, podemos utilizar a função repeat().<\/p>\n<pre><code>grid<span class=\"token operator\">-<\/span>template<span class=\"token operator\">-<\/span>columns<span class=\"token operator\">:<\/span> <span class=\"token function\">repeat<\/span><span class=\"token punctuation\">(<\/span><span class=\"token number\">4<\/span><span class=\"token punctuation\">,<\/span> <span class=\"token number\">8.33<\/span><span class=\"token operator\">%<\/span> <span class=\"token number\">8.33<\/span><span class=\"token operator\">%<\/span> <span class=\"token number\">8.33<\/span><span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">;<\/span>\n<\/code><\/pre>\n<p>Aqui colocamos o seguinte (4, 8.33% 8.33% 8.33%), estamos pedindo para repetir 4 vezes com 3 colunas um ocupado 8.33% multiplicado por 4 que da 8.33 12 vezes, isso significa que ao invés de termos apenas 2 colunas vamos ter 12 colunas. A função repeat() vai lhe dá a possibilidade de pega um determinado conjunto de valores e repetir pela quantidade de vezes que passamos no primeiro parâmetro.<\/p>\n<p><img src=\"/uploads/2020/01/Figura-04-12-colunas.jpg\" alt=\"CSS Grid\"><\/p>\n<p><strong>Figura 04 - 12 colunas CSS Grid<\/strong><\/p>\n<pre><code>grid<span class=\"token operator\">-<\/span>template<span class=\"token operator\">-<\/span>columns<span class=\"token operator\">:<\/span> 200px <span class=\"token number\">20<\/span><span class=\"token operator\">%<\/span> 1fr<span class=\"token punctuation\">;<\/span>\n<\/code><\/pre>\n<p>Neste código estamos dizendo que teremos 3 colunas para organiza os elementos, onde a primeira coluna irá ocupa 200 pixels do espaço, ou seja, um valor absoluto fixo, segundo coluna terá 20% e a terceira coluna 1fr (fr significa 1 fragmento), ou seja, a terceira coluna irá ocupado todo o restante do espaço que sobrou desses (200 pixels – os 20%). <strong><em>Observação esses 20% será variável conforme o tamanho da tela.<\/em><\/strong><\/p>\n<p><img src=\"/uploads/2020/01/Figura-05-3-coulunas-200-20-fr.jpg\" alt=\"CSS Grid\"><\/p>\n<p><strong>Figura 05 - 3 colunas CSS Grid<\/strong><\/p>\n<p>Podemos também usar a propriedade “grid-template-columns” só utilizando a unidade fr (fragmento) então podemos escrever algo assim:<\/p>\n<pre><code>grid<span class=\"token operator\">-<\/span>template<span class=\"token operator\">-<\/span>columns<span class=\"token operator\">:<\/span> 3fr 6fr 3fr<span class=\"token punctuation\">;<\/span>\n<\/code><\/pre>\n<p>Aqui estamos quebrando a largura em 12 colunas, onde a primeira coluna irá ocupado 3fr neste caso 12 avos, a segunda irá ocupa 6fr de 12 avos e a terceira 3fr de 12 avos, observe que a soma das colunas irá da 12 onde cada uma irá pega uma parcela desse fragmento. Veja o resultado na figura 06.<\/p>\n<p><img src=\"/uploads/2020/01/Figura-06-Unidade-FR.jpg\" alt=\"CSS Grid\"><\/p>\n<p><strong>Figura 06 - unidade fr - CSS Grid<\/strong><\/p>\n<h2>grid-template-rows - CSS Grid<\/h2>\n<p>CSS Grid nos permiti também fazer manipulação nas linhas, até então estávamos manipulando apenas as colunas, para fazemos isso escrevemos assim:<\/p>\n<pre><code> grid<span class=\"token operator\">-<\/span>template<span class=\"token operator\">-<\/span>rows<span class=\"token operator\">:<\/span> <span class=\"token number\">50<\/span><span class=\"token operator\">%<\/span> <span class=\"token number\">25<\/span><span class=\"token operator\">%<\/span> <span class=\"token number\">12.5<\/span><span class=\"token operator\">%<\/span> <span class=\"token number\">12.5<\/span><span class=\"token operator\">%<\/span><span class=\"token punctuation\">;<\/span>\n<\/code><\/pre>\n<p>Neste código estamos dizendo o seguinte que a primeira linha terá 50%, segunda 25%, terceira e quarta linha 12.5% cada uma. Vamos ver o resultado na figura 07<\/p>\n<p><img src=\"/uploads/2020/01/Figura-07-row.jpg\" alt=\"CSS Grid\"><\/p>\n<p>Figura 07 - Row | CSS Grid<\/p>\n<p>Note que é bem tranquilo trabalhar com <em>CSS Grid<\/em>, podemos fazer várias variações e criar o template de acordo com o projeto, recomendo que você de uma olhada no curso <a href=\"http://bit.ly/tipscode-curso-programador-full-stack-javascript\" target=\"_blank\" rel=\"noopener\">PROGRAMADOR FULL STACK EM 8 SEMANAs<\/a>, neste curso tem um módulo especifico de <em>CSS GRID<\/em> onde é explicado essas variações que você pode fazer aplicando em projetos reais, onde você irá aprender ir do ZERO a ser TORNAR um PROGRAMADOR FULL STACK.<\/p>\n<p><a href=\"/programador-fullstack-8-semanas\"><img src=\"/uploads/2020/01/banner-JS8-1080x1080-2-1024x1024.png\" alt=\"\"><\/a><\/p>\n<h3>Programador Full Stack<\/h3>\n<p>+ 1.800 minutos;<\/p>\n<p>Acesso vitalício;<\/p>\n<p>+ módulos;<\/p>\n<p>+ 200 Vídeos.<\/p>\n<p><a href=\"/programador-fullstack-8-semanas\">Inscreve-se<\/a><\/p>\n<p>Continuando nossos estudos com CSS Grid.<\/p>\n<pre><code>grid<span class=\"token operator\">-<\/span>template<span class=\"token operator\">-<\/span>rows<span class=\"token operator\">:<\/span> 100px 1fr<span class=\"token punctuation\">;<\/span>\n<\/code><\/pre>\n<p>Aqui a primeiro linha irá ocupa 100px e a segunda linha 1 fr (um fragmento) e agora chegamos a uma dúvida, pois nos definimos no código acima que temos 3 colunas com 12 itens, ou seja, precisamos configura para 4 linhas e não duas certo? Neste caso vai acontece o seguinte, os 100px será usado na primeira linha e 1 fr pra segunda linha, as outras duas que nos não configuramos irá pegar o espaço que sobrar de acordo com que você configurou na primeira e segunda. Veja o resultado na figura 08:<\/p>\n<p><img src=\"/uploads/2020/01/Figura-08-duas-linha.jpg\" alt=\"CSS Grid\"><\/p>\n<p>Figura 08 - Duas linhas | CSS Grid<\/p>\n<pre><code>grid<span class=\"token operator\">-<\/span>template<span class=\"token operator\">-<\/span>rows<span class=\"token operator\">:<\/span> 100px auto<span class=\"token punctuation\">;<\/span>\n<\/code><\/pre>\n<p>Estamos configurando a primeira linha com 100 pixels e as demais com o atributo <strong>auto<\/strong> (automático), ou seja, o browser irá distribuir às 3 linhas restante e dividir de maneira igualitária. Veja o resultado na figura 09:<\/p>\n<p><img src=\"/uploads/2020/01/Figura-09-1-linha-e-3-auto.jpg\" alt=\"CSS Grid\"><\/p>\n<p><strong>Figura 09 - 1 linha | CSS Grid<\/strong><\/p>\n<p>Antes da gente continua nossos estudos em <strong><em>CSS Grid<\/em><\/strong> tem uma coisa que quero lhe mostrar a respeito do navegador Firefox, pois ele tem uma ferramenta muito legal e que facilita bastante nossa vida ao trabalhar com <strong><em>CSS Grid<\/em><\/strong>, vamos conhece agora.<\/p>\n<p><img src=\"/uploads/2020/01/Figura-10-Firefox-1024x558.png\" alt=\"\"><\/p>\n<p><strong>Figura 10 - Firefox | CSS Grid<\/strong><\/p>\n<p>Veja que na aba Layout temos uma seção chama Grid, note que é bem mais fácil temos uma noção de como está organizado nosso layout, pois ele mostra graficamente como está as colunas e linhas e informa os números das colunas e linhas que temos.<\/p>\n<h2>Manipulando de forma especifica ás colunas<\/h2>\n<pre><code><span class=\"token punctuation\">.<\/span>box8 <span class=\"token punctuation\">{<\/span>\n    grid<span class=\"token operator\">-<\/span>column<span class=\"token operator\">-<\/span>start<span class=\"token operator\">:<\/span> <span class=\"token number\">2<\/span><span class=\"token punctuation\">;<\/span>\n    grid<span class=\"token operator\">-<\/span>column<span class=\"token operator\">-<\/span>end<span class=\"token operator\">:<\/span> <span class=\"token number\">4<\/span><span class=\"token punctuation\">;<\/span>\n<span class=\"token punctuation\">}<\/span>\n<\/code><\/pre>\n<p>O elemento marcado com a classe &quot;box8&quot; irá inicia a partir da coluna 2 e terminar na linha 4 é isso que estamos fazendo com as propriedades _grid-column-star_t e <em>grid-column-end<\/em>. Veja o resultado na figura 11:<\/p>\n<p><img src=\"/uploads/2020/01/Figura-11-stard-e-end.jpg\" alt=\"CSS Grid\"><\/p>\n<p><strong>Figura 11 - Start e End | CSS Grid<\/strong><\/p>\n<h2>Manipulando de forma especifica ás linhas<\/h2>\n<pre><code>grid<span class=\"token operator\">-<\/span>row<span class=\"token operator\">-<\/span>start<span class=\"token operator\">:<\/span> <span class=\"token number\">3<\/span><span class=\"token punctuation\">;<\/span>\ngrid<span class=\"token operator\">-<\/span>row<span class=\"token operator\">-<\/span>end<span class=\"token operator\">:<\/span> <span class=\"token number\">5<\/span><span class=\"token punctuation\">;<\/span>\n<\/code><\/pre>\n<p>Estamos manipulando a linha 3 com a propriedade grid-row-start, estamos configurando para iniciar na linha 3, até a linha 5 com a propriedade grid-row-end. Veja o resultado na figura 12:<\/p>\n<h2>Manipulando de forma especifica ás linhas<\/h2>\n<p><img src=\"/uploads/2020/01/Figura-12-linha-start-e-end-1024x655.jpg\" alt=\"CSS Grid\"><\/p>\n<p><strong>Figura 12 - Linha start e End<\/strong><\/p>\n<p>Veja que com essa configuração a coluna 8 irá ocupa mais uma linha, ou seja 4 espaço e a coluna 11 e 12 vai para parte de baixo do layout.<\/p>\n<h2>Problema de sobreposição - CSS Grid<\/h2>\n<p>Ao usarmos o <strong>CSS Grid<\/strong> podemos enfrenta um “problema” que é a <em>sobreposição<\/em> de célula, temos que ter cuidado ao definir nosso layout, farei um exercício para forçar a sobreposição para vermos como funciona, então vamos ao código.<\/p>\n<pre><code><span class=\"token punctuation\">.<\/span>box10<span class=\"token punctuation\">,<\/span>\n<span class=\"token punctuation\">.<\/span>box11 <span class=\"token punctuation\">{<\/span>\n      grid<span class=\"token operator\">-<\/span>column<span class=\"token operator\">-<\/span>start<span class=\"token operator\">:<\/span> <span class=\"token number\">1<\/span><span class=\"token punctuation\">;<\/span>\n      grid<span class=\"token operator\">-<\/span>column<span class=\"token operator\">-<\/span>end<span class=\"token operator\">:<\/span> <span class=\"token number\">3<\/span><span class=\"token punctuation\">;<\/span>\n      grid<span class=\"token operator\">-<\/span>row<span class=\"token operator\">-<\/span>start<span class=\"token operator\">:<\/span> <span class=\"token number\">5<\/span><span class=\"token punctuation\">;<\/span>\n      grid<span class=\"token operator\">-<\/span>row<span class=\"token operator\">-<\/span>end<span class=\"token operator\">:<\/span> span <span class=\"token number\">1<\/span><span class=\"token punctuation\">;<\/span>\n<span class=\"token punctuation\">}<\/span>\n<\/code><\/pre>\n<p>Estamos manipulando duas classes especifica “box10 e box 11” onde a coluna irá inicia na coluna 1 e vai até a coluna 3, ou seja, irá ocupa 3 espaços, vamos dizer também que a linha vai iniciar na linha 5 e vamos da um span 1, ou seja, irá pula uma linha. Veja o resultado na figura 13:<\/p>\n<p><img src=\"/uploads/2020/01/Figura-13-sobreposição-1024x411.jpg\" alt=\"CSS Grid\"><\/p>\n<p><strong>Figura 13 - Sobreposição | CSS Grid<\/strong><\/p>\n<p>Aqui temos a sobreposição como vocês podem ver na figura 13 a coluna 10 sumiu, e a coluna 11 sobrepôs a coluna 10. Como podemos resolver esse problema? Existe uma propriedade que pode nós ajudar a resolver que o <strong><em>z-index<\/em><\/strong>, essa propriedade configura o nível de profundidade dos elementos CSS, vamos a um exemplo com ele:<\/p>\n<pre><code><span class=\"token punctuation\">.<\/span>box10 <span class=\"token punctuation\">{<\/span>\n     z<span class=\"token operator\">-<\/span>index<span class=\"token operator\">:<\/span> <span class=\"token number\">10<\/span><span class=\"token punctuation\">;<\/span>\n<span class=\"token punctuation\">}<\/span>\n<\/code><\/pre>\n<p>O elemento que está marcado com a classe “box10” está por baixo do elemento 11, o z-index irá sobrepor, quanto maior o número que você atribuir maior a ordem de precedência do elemento. Veja o resultado na figura 14:<\/p>\n<p><img src=\"/uploads/2020/01/Figura-14-z-index-1024x408.jpg\" alt=\"CSS Grid\"><\/p>\n<p><strong>Figura 14 - z-index | CSS Grid<\/strong><\/p>\n<p>Bom pessoal, tem mais conteúdo sobre CSS Grid, mas não vou continua neste artigo pois se não irá fica muito grande e cansativo a leitura, então vou está dividindo esse conteúdo em 3 partes ok. Deixa seu like, comenta aí se você aprendeu ou não com esse artigo que deu um trabalho mostro para escreve-lo, teremos também ele em formato de vídeo em nosso canal do Youtube em breve, caso não conheça nosso canal <a href=\"https://www.youtube.com/channel/UCZKLK7o6IVayeEjkkoWLwbQ?view_as=subscriber\" target=\"_blank\" rel=\"noopener\">CLIQUE AQU<\/a>I, inscreva-se para receber as notificações no seu e-mail quando sair artigo novo aqui no site. Abraço e até o próximo artigo!!<\/p>\n<p><a href=\"http://bit.ly/tipscode-curso-programador-full-stack-javascript\" target=\"_blank\" rel=\"noopener\"><img src=\"/uploads/2020/01/banner-JS8-1200x628-pouco-texto-1024x536.png\" alt=\"CSS Grid\"><\/a><\/p>\n<p><strong>Programador Full Stack<\/strong><\/p>\n<p><strong>Deseja ser torna um programador full stack profissional? Se a resposta for sim, você precisa conhece o curso PROGRAMADOR FULL STACK EM 8 SEMANAS, onde ele trás uma metodologia de ensino EXTREMAMENTE diferenciada com o foco 100% no MERCADO de trabalho.<\/strong><\/p>\n<p><a href=\"http://bit.ly/tipscode-curso-programador-full-stack-javascript\" target=\"_blank\" rel=\"noopener\">Quero me tornar um programador full stack<\/a><\/p>\n<p>Visite nossa área de cursos clicando <a href=\"/cursos/\">AQUI<\/a><\/p>\n","date":"2020-01-19T00:00:00.000Z","readingTime":13,"title":"CSS Grid - Tudo o que você não aprendeu | Parte 1","categories":["css"],"tags":["css","css-grid","css3","desenvolvimento","frontend"],"description":"Neste artigo vamos estudar CSS Grid, esse recurso maravilhoso do CSS3, tenho certeza que irá lhe ajuda bastante em criar seus próprios Layouts. Vamos a prática, bora coda!","imgArticle":"/thumbnail-article/css-grid-parte-1.png","imgHome":"/thumbnail-home/css-grid-parte-1.png"},{"slug":"foreach-javascript","content":"<p>Fala dev, vamos a mais um artigo, neste vamos abordar um tema bastante importante e que vai lhe trazer bastante produtividade na hora de escrever seus códigos em JavaScript, estudaremos neste artigo o <em>foreach JavaScript.<\/em><\/p>\n<h2>O que é Foreach?<\/h2>\n<p>Foreach é uma função nativa da API do JavaScript, onde a mesma nos permiti percorrer os elementos de um array, existem várias formas de percorrer um array, breve estarei publicando aqui no site. Vamos ao nosso editor de texto para vermos na prática o funcionamento do foreach JavaScript.<\/p>\n<pre><code><span class=\"token keyword\">const<\/span> aprovados <span class=\"token operator\">=<\/span> <span class=\"token punctuation\">[<\/span><span class=\"token string\">'Emanuel'<\/span><span class=\"token punctuation\">,<\/span> <span class=\"token string\">'Maria'<\/span><span class=\"token punctuation\">,<\/span> <span class=\"token string\">'João'<\/span><span class=\"token punctuation\">,<\/span> <span class=\"token string\">'Roberto'<\/span><span class=\"token punctuation\">,<\/span> <span class=\"token string\">'Gabriel'<\/span><span class=\"token punctuation\">]<\/span>\n\naprovados<span class=\"token punctuation\">.<\/span><span class=\"token function\">forEach<\/span><span class=\"token punctuation\">(<\/span> <span class=\"token keyword\">function<\/span><span class=\"token punctuation\">(<\/span><span class=\"token parameter\">nome<span class=\"token punctuation\">,<\/span> indice<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">{<\/span>\n    console<span class=\"token punctuation\">.<\/span><span class=\"token function\">log<\/span><span class=\"token punctuation\">(<\/span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`<\/span><span class=\"token string\"> <\/span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${<\/span>indice <span class=\"token operator\">+<\/span> <span class=\"token number\">1<\/span><span class=\"token interpolation-punctuation punctuation\">}<\/span><\/span><span class=\"token string\"> <\/span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${<\/span>nome<span class=\"token interpolation-punctuation punctuation\">}<\/span><\/span><span class=\"token string\"> <\/span><span class=\"token template-punctuation string\">`<\/span><\/span><span class=\"token punctuation\">)<\/span>\n<span class=\"token punctuation\">}<\/span> <span class=\"token punctuation\">)<\/span>\n<\/code><\/pre>\n<p><img src=\"/uploads/2020/01/Saide-do-exemplo-1.jpg\" alt=\"foreact javascript\"><\/p>\n<p>foreach javascript<\/p>\n<p>Começamos criando um array de elementos cujo o nome é “aprovados” e agora vamos percorrer essa lista de aprovados e imprimir na tela, então escrevemos aprovados.foreach(), neste momento passamos como parâmetro uma função <em>callback<\/em>, onde essa função será chamada para cada iteração do nosso array de aprovados passando o próprio elemento e o índice correspondente ao array, ou seja, ele irá percorrer os elementos por exemplo “Emanuel” e o índice do mesmo, depois “Maria” e o índice e assim sucessivamente para cada elemento de aprovados.<\/p>\n<h2>Foreach sem Indice<\/h2>\n<p>Caso você não precise mostrar o índice do array é possível oculta o índice, pois não é obrigatório passa os parâmetros da função call-back no JavaScript, veja como é simples.<\/p>\n<pre><code>aprovados<span class=\"token punctuation\">.<\/span><span class=\"token function\">forEach<\/span><span class=\"token punctuation\">(<\/span> <span class=\"token parameter\">nome<\/span> <span class=\"token operator\">=><\/span> console<span class=\"token punctuation\">.<\/span><span class=\"token function\">log<\/span><span class=\"token punctuation\">(<\/span> nome <span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">)<\/span>\n<\/code><\/pre>\n<p><img src=\"/uploads/2020/01/saida-do-exemplo-2.jpg\" alt=\"foreact javascript\"><\/p>\n<p>foreach javascript<\/p>\n<p>Neste caso estamos usando o novo recurso do JavaScript ás <em>arrow function<\/em>, neste cenário estamos interessados somente em imprimir o nome de cada elemento, caso você desconheça as arrow function <a href=\"http://bit.ly/tipscode-curso-programador-full-stack-javascript\" target=\"_blank\" rel=\"noopener\">clique aqui para saber mais<\/a>. Observação importante, aqui o índice ele é passado sim, porém o JavaScript o ignorar.<\/p>\n<h2>Percorrendo com Variável<\/h2>\n<p>Outro cenário bem interessante é armazenar uma função em uma variável e passar a mesma como parâmetro. Veja como:<\/p>\n<pre><code><span class=\"token keyword\">const<\/span> <span class=\"token function-variable function\">exibirAprovados<\/span> <span class=\"token operator\">=<\/span> <span class=\"token parameter\">aprovado<\/span> <span class=\"token operator\">=><\/span> console<span class=\"token punctuation\">.<\/span><span class=\"token function\">log<\/span><span class=\"token punctuation\">(<\/span>aprovado<span class=\"token punctuation\">)<\/span>\n\naprovados<span class=\"token punctuation\">.<\/span><span class=\"token function\">forEach<\/span><span class=\"token punctuation\">(<\/span>exibirAprovados<span class=\"token punctuation\">)<\/span>\n<\/code><\/pre>\n<p><img src=\"/uploads/2020/01/saida-do-exemplo-2-1.jpg\" alt=\"foreact javascript\"><\/p>\n<p>foreach javascript<\/p>\n<p>Criamos uma constante “exibirAprovados” atribuímos uma arrow function com o nome de “aprovado” onde será exibido no console.log os “aprovados”, ou seja, com essa função armazenada em uma variável, podemos passa como parâmetro para o foreach, como mostro na linha 3.<\/p>\n<h2>Detalhando o Foreach<\/h2>\n<p>Foreach recebe dois parâmetros sempre, o name e o índice, caso não queira o índice podemos suprimir esse parâmetro, caso queira somente o índice somos obrigados a escrever o primeiro parâmetro, por que o índice sempre é passado como ultimo e não como primeiro. Cabe uma observação muito importante, o foreach na verdade tem 3 parâmetros, o próprio array do elemento é passado como parâmetro do foreach. Vamos ao código:<\/p>\n<pre><code>aprovados<span class=\"token punctuation\">.<\/span><span class=\"token function\">forEach<\/span><span class=\"token punctuation\">(<\/span> <span class=\"token keyword\">function<\/span><span class=\"token punctuation\">(<\/span><span class=\"token parameter\">nome<span class=\"token punctuation\">,<\/span> indice<span class=\"token punctuation\">,<\/span> array<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">{<\/span>\n    console<span class=\"token punctuation\">.<\/span><span class=\"token function\">log<\/span><span class=\"token punctuation\">(<\/span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`<\/span><span class=\"token string\"> <\/span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${<\/span>indice <span class=\"token operator\">+<\/span> <span class=\"token number\">1<\/span><span class=\"token interpolation-punctuation punctuation\">}<\/span><\/span><span class=\"token string\"> <\/span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${<\/span>nome<span class=\"token interpolation-punctuation punctuation\">}<\/span><\/span><span class=\"token string\"> <\/span><span class=\"token template-punctuation string\">`<\/span><\/span><span class=\"token punctuation\">)<\/span>\n    console<span class=\"token punctuation\">.<\/span><span class=\"token function\">log<\/span><span class=\"token punctuation\">(<\/span>array<span class=\"token punctuation\">)<\/span>\n<span class=\"token punctuation\">}<\/span> <span class=\"token punctuation\">)<\/span>\n<\/code><\/pre>\n<p><img src=\"/uploads/2020/01/saida-do-exemplo-4.jpg\" alt=\"foreact javascript\"><\/p>\n<p>foreach javascript<\/p>\n<p>Veja que foi impresso o elemento e depois o próprio array, ou seja, a função call-back que passamos para o Foreach JavaScript receber 3 parâmetros, o nome, o índice e o próprio array. Lembrando que podemos suprimi-los, dependendo do seu problema em questão.<\/p>\n<h2>Reescrevendo o Foreact<\/h2>\n<p>Para entendemos de uma vez por todas o Foreact JavaScript, vamos reescreve-lo e observar como ele funciona por debaixo dos panos, então vamos coda!!<\/p>\n<pre><code><span class=\"token keyword\">const<\/span> aprovados <span class=\"token operator\">=<\/span> <span class=\"token punctuation\">[<\/span><span class=\"token string\">'Emanuel'<\/span><span class=\"token punctuation\">,<\/span> <span class=\"token string\">'Maria'<\/span><span class=\"token punctuation\">,<\/span> <span class=\"token string\">'João'<\/span><span class=\"token punctuation\">,<\/span> <span class=\"token string\">'Roberto'<\/span><span class=\"token punctuation\">,<\/span> <span class=\"token string\">'Gabriel'<\/span><span class=\"token punctuation\">]<\/span>\n\naprovados<span class=\"token punctuation\">.<\/span><span class=\"token function\">forEachPersonalizado<\/span><span class=\"token punctuation\">(<\/span> <span class=\"token keyword\">function<\/span><span class=\"token punctuation\">(<\/span><span class=\"token parameter\">nome<span class=\"token punctuation\">,<\/span> indice<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">{<\/span>\n    console<span class=\"token punctuation\">.<\/span><span class=\"token function\">log<\/span><span class=\"token punctuation\">(<\/span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`<\/span><span class=\"token string\"> <\/span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${<\/span>indice <span class=\"token operator\">+<\/span> <span class=\"token number\">1<\/span><span class=\"token interpolation-punctuation punctuation\">}<\/span><\/span><span class=\"token string\"> <\/span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${<\/span>nome<span class=\"token interpolation-punctuation punctuation\">}<\/span><\/span><span class=\"token string\"> <\/span><span class=\"token template-punctuation string\">`<\/span><\/span><span class=\"token punctuation\">)<\/span>\n    \n<span class=\"token punctuation\">}<\/span> <span class=\"token punctuation\">)<\/span>\n<\/code><\/pre>\n<p><img src=\"/uploads/2020/01/saida-do-exemplo-5.jpg\" alt=\"foreact javascript\"><\/p>\n<p>foreach javascript<\/p>\n<p>Note que a função forEachPersonalizado() não existe, então vamos escrever nosso proprio foreach JavaScript. Vamos voltar ao visualCode.<\/p>\n<pre><code><span class=\"token class-name\">Array<\/span><span class=\"token punctuation\">.<\/span>prototype<span class=\"token punctuation\">.<\/span><span class=\"token function-variable function\">forEachPersonalizado<\/span> <span class=\"token operator\">=<\/span> <span class=\"token keyword\">function<\/span><span class=\"token punctuation\">(<\/span><span class=\"token parameter\">callback<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">{<\/span>\n    <span class=\"token keyword\">for<\/span> <span class=\"token punctuation\">(<\/span><span class=\"token keyword\">let<\/span> i <span class=\"token operator\">=<\/span> <span class=\"token number\">0<\/span><span class=\"token punctuation\">;<\/span> i <span class=\"token operator\">&lt;<\/span> <span class=\"token keyword\">this<\/span><span class=\"token punctuation\">.<\/span>length<span class=\"token punctuation\">;<\/span> i<span class=\"token operator\">++<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">{<\/span>\n        <span class=\"token function\">callback<\/span><span class=\"token punctuation\">(<\/span><span class=\"token keyword\">this<\/span><span class=\"token punctuation\">[<\/span>i<span class=\"token punctuation\">]<\/span><span class=\"token punctuation\">,<\/span> i<span class=\"token punctuation\">,<\/span> <span class=\"token keyword\">this<\/span><span class=\"token punctuation\">)<\/span>\n    <span class=\"token punctuation\">}<\/span>\n<span class=\"token punctuation\">}<\/span>\n<span class=\"token keyword\">const<\/span> aprovados <span class=\"token operator\">=<\/span> <span class=\"token punctuation\">[<\/span><span class=\"token string\">'Emanuel'<\/span><span class=\"token punctuation\">,<\/span> <span class=\"token string\">'Maria'<\/span><span class=\"token punctuation\">,<\/span> <span class=\"token string\">'João'<\/span><span class=\"token punctuation\">,<\/span> <span class=\"token string\">'Roberto'<\/span><span class=\"token punctuation\">,<\/span> <span class=\"token string\">'Gabriel'<\/span><span class=\"token punctuation\">]<\/span>\n\naprovados<span class=\"token punctuation\">.<\/span><span class=\"token function\">forEachPersonalizado<\/span><span class=\"token punctuation\">(<\/span> <span class=\"token keyword\">function<\/span><span class=\"token punctuation\">(<\/span><span class=\"token parameter\">nome<span class=\"token punctuation\">,<\/span> indice<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">{<\/span>\n    console<span class=\"token punctuation\">.<\/span><span class=\"token function\">log<\/span><span class=\"token punctuation\">(<\/span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`<\/span><span class=\"token string\"> <\/span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${<\/span>indice <span class=\"token operator\">+<\/span> <span class=\"token number\">1<\/span><span class=\"token interpolation-punctuation punctuation\">}<\/span><\/span><span class=\"token string\"> <\/span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${<\/span>nome<span class=\"token interpolation-punctuation punctuation\">}<\/span><\/span><span class=\"token string\"> <\/span><span class=\"token template-punctuation string\">`<\/span><\/span><span class=\"token punctuation\">)<\/span>\n    \n<span class=\"token punctuation\">}<\/span> <span class=\"token punctuation\">)<\/span>\n<\/code><\/pre>\n<p>Criamos dentro de <em>prototype<\/em> de um array e associamos a uma função, onde a mesma recebe uma função call-back como parâmetro. No corpo dessa função estamos percorrendo o array utilizando a estrutura de repetição <em>FOR<\/em> do JavaScript. Então escrevemos “let i = 0, i &lt; this.length; i++”, o <em>this<\/em> representa o nosso array, onde acessamos o array dentro de uma função que pertence ao <em>prototype<\/em>, ou seja, acessamos a instancia do array através do “<em>this<\/em>” neste FOR estamos percorrendo os índices. Dentro do <em>FOR<\/em> estamos chamando a função call-back passando três parâmetros, primeiro parâmetro é o próprio valor, segundo é o índice e o terceiro é o array completo. Vamos testar e ver o resultado.<\/p>\n<p><img src=\"/uploads/2020/01/saida-do-exemplo-6.jpg\" alt=\"foreact javascript\"><\/p>\n<h2>Conclusão<\/h2>\n<p>Chegamos ao fim de mais um artigo galera, espero ter lhe ajudado de algum forma. Que ingressa no mercado de trabalho? Se sua resposta for SIM. Participe do MEGA treinamento PROGRAMADOR FULL STACK EM 8 SEMANAS. Esse curso é 100% voltado para o mercado de trabalho, o acesso é vitalicio. <a href=\"http://bit.ly/tipscode-curso-programador-full-stack-javascript\" target=\"_blank\" rel=\"noopener\">QUERO ME TORNAR UM PROGRAMADOR FULL STACK<\/a><\/p>\n<p><a href=\"/programador-fullstack-8-semanas\"><img src=\"/uploads/2020/01/banner-JS8-1080x1080-2.png\" alt=\"\"><\/a><\/p>\n<h4>DO ZERO A PROGRAMADOR<\/h4>\n<p>FULL STACK JAVASCRIPT (REACT + NODEJS)<\/p>\n<p>Nele você vai aprender do zero: HTML 5, CSS, Bulma para criar sites responsivos, JavaScript + Lógica de programação, Git e Github, JavaScript moderno (es6+), React que é uma das libs mais pedidas pelo mercado, Express.js que é uma ferramenta de backend construída com NodeJs e muito mais!<\/p>\n<p><a href=\"/programador-fullstack-8-semanas\">Saiba Mias!<\/a><\/p>\n<p>Leia o artigo sobre NodeJS <a href=\"/conhecendo-nodejs/\">CLIQUE AQUI<\/a><\/p>\n","date":"2020-01-11T00:00:00.000Z","readingTime":6,"title":"Como usar o Foreach JavaScript","description":"Fala dev, vamos a mais um artigo, neste vamos abordar um tema bastante importante e que vai lhe trazer bastante produtividade na hora de escrever seus códigos em JavaScript, estudaremos neste artigo o foreach JavaScript.","imgArticle":"/thumbnail-article/como-usar-foreach.png","imgHome":"/thumbnail-home/como-usar-foreach.png"},{"slug":"criando-uma-aplicacao-em-nodejs","content":"<p>Fala dev, tudo bem? Neste artigo vamos criar nossa primeira <strong>aplicação em Nodejs,<\/strong> então sem mais conversa bora coda?<\/p>\n<h3>Instalando o Nodejs e o Yarn<\/h3>\n<p>Temos dois artigos aqui no site, onde ensino passo a passo a instalação do Nodejs e o Yarn, no artigo ensino instalar no Linux, caso você use o da uma pesquisada no Google é bem simples a instalação.<\/p>\n<p><a href=\"/conhecendo-nodejs/\">Instalando o NodeJS<\/a><\/p>\n<p><a href=\"/instalando-nodejs-no-manjaro/\">Instalando o Yarn<\/a><\/p>\n<p>Agora vamos colocar a mão na massa. Siga os passos a baixo !!<\/p>\n<ul>\n<li>Passo 01: Crie um diretório [nome você escolhe];<\/li>\n<li>Passo 02: Entre neste diretório que você criou;<\/li>\n<li>Passo 03: Abra o terminal dentro do diretório;<\/li>\n<li>Passo 04: Escreva o seguinte código:<\/li>\n<\/ul>\n<pre><code>yarn init <span class=\"token operator\">-<\/span>y\n<\/code><\/pre>\n<p>Seu terminal deverá está parecido com esse:<\/p>\n<p><img src=\"/uploads/2020/01/Terminal-01.png\" alt=\"\"><\/p>\n<p><strong>aplicação em Nodejs,<\/strong><\/p>\n<p>O comando <em>yarn init -y<\/em> cria um arquivo chamado <em>package.json<\/em>, vamos abrir o nosso editor de código, neste artigo estarei usando o <em>vccode<\/em>, mas fique a vontade para usa um de sua preferencia.<\/p>\n<p><img src=\"/uploads/2020/01/visualcode-aberto.png\" alt=\"\"><\/p>\n<p><strong>aplicação em Nodejs,<\/strong><\/p>\n<p>O arquivo package.json contém algumas informações, tais como o nome da aplicação, a versão, o arquivo base e a licença, porém essas informações só serão utilizadas caso o nosso projeto fosse ser disponibilizado para terceiro, caso contrário não vamos fazer uso. O package.json tem é responsabilidade por gerenciar nossos módulos e dependências, ou seja, tudo que instalarmos de terceiros vai ficar neste arquivo..<\/p>\n<h2>Instalando express<\/h2>\n<p>O Express é um microframework do Nodejs, o Express vai nos dá algumas funcionalidades padrão e irá facilitar muito a nossa vida. Claro que o Express é bem mais complexo do que citei, caso você tenha interesse em estudar e aprender de forma 100% prática com projetos reais CLIQUE AQUI. Então vamos instalar o Express em nosso projeto com o seguinte comando.<\/p>\n<pre><code>yarn add express\n<\/code><\/pre>\n<p><img src=\"/uploads/2020/01/package.jpg\" alt=\"\"><\/p>\n<p><strong>aplicação em Nodejs<\/strong><\/p>\n<p>Observe que o arquivo package.json foi alterado, agora temos um objeto com o nome “dependencies” e o nosso Express com o número da versão atual, isso é muito importante pois se outro programador pegar o nosso projeto ele não precisará o Express na mão, só é necessário executar o seguinte comando no terminal yarn e automaticamente todas as dependências serão instaladas.<\/p>\n<h2>Arquivo Raiz<\/h2>\n<p>Vamos criar nosso arquivo raiz, nele será escrito a base de toda a aplicação, então vamos criar o o nome &quot;index.js&quot; outro nome bastante utilizado é o &quot;app.js&quot; fica a sua escolha beleza, neste arquivo vamos escrever o seguinte código:<\/p>\n<pre><code><span class=\"token keyword\">const<\/span> express <span class=\"token operator\">=<\/span> <span class=\"token function\">require<\/span><span class=\"token punctuation\">(<\/span><span class=\"token string\">'express'<\/span><span class=\"token punctuation\">)<\/span>\n\n<span class=\"token keyword\">const<\/span> server <span class=\"token operator\">=<\/span> <span class=\"token function\">express<\/span><span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">)<\/span>\n\nserver<span class=\"token punctuation\">.<\/span><span class=\"token function\">get<\/span><span class=\"token punctuation\">(<\/span><span class=\"token string\">'/teste'<\/span><span class=\"token punctuation\">,<\/span> <span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token operator\">=><\/span><span class=\"token punctuation\">{<\/span>\n    console<span class=\"token punctuation\">.<\/span><span class=\"token function\">log<\/span><span class=\"token punctuation\">(<\/span><span class=\"token string\">'Estamos no caminho certo !!'<\/span><span class=\"token punctuation\">)<\/span>\n<span class=\"token punctuation\">}<\/span><span class=\"token punctuation\">)<\/span>\n\nserver<span class=\"token punctuation\">.<\/span><span class=\"token function\">listen<\/span><span class=\"token punctuation\">(<\/span><span class=\"token number\">3000<\/span><span class=\"token punctuation\">)<\/span>\n<\/code><\/pre>\n<p>Começamos importando o Express, a partir deste momento todas as funcionalidades que o Express expõe vai está presente na variável &quot;express&quot;. Agora vamos iniciar nosso servidor criando uma const &quot;server&quot; e instanciando o express. Para vermos isso funcionando precisamos criar nossa primeira rota, existem quatro tipos de métodos de rotas diferentes, são ele o get, post, put e o delete. Na linha 5 estamos falando o seguinte, oh quando a url /teste for chamada execute a função console.log() e exiba a mensagem no terminal. Vamos iniciar servidor, para fazer isso precisamos que ele escute alguma porta, então na linha 9 estamos mandando o servidor fica ouvindo a porta 3000, vamos testar, abra o terminal, e execute seguinte comando:<\/p>\n<pre><code>node index<span class=\"token punctuation\">.<\/span>js \n<\/code><\/pre>\n<p>Abra navegador e digite na barra de endereço: <em><strong>https://localhost:3000/teste.<\/strong><\/em> Note que o navegador ficou carregando, isso está acontecendo porque ele está esperando alguma resposta do nosso servidor, se formos olhar no terminal, veremos que a mensagem que escrevemos na função <em>consolo.log()<\/em> está aparecendo. Para paramos a execução do servidor no terminal, pressionamos ás teclas ( ctrl + c ).<\/p>\n<h3>Passando um retorno para o front-end<\/h3>\n<pre><code><span class=\"token keyword\">const<\/span> express <span class=\"token operator\">=<\/span> <span class=\"token function\">require<\/span><span class=\"token punctuation\">(<\/span><span class=\"token string\">'express'<\/span><span class=\"token punctuation\">)<\/span>\n\n<span class=\"token keyword\">const<\/span> server <span class=\"token operator\">=<\/span> <span class=\"token function\">express<\/span><span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">)<\/span>\n\nserver<span class=\"token punctuation\">.<\/span><span class=\"token function\">get<\/span><span class=\"token punctuation\">(<\/span><span class=\"token string\">'/teste'<\/span><span class=\"token punctuation\">,<\/span> <span class=\"token punctuation\">(<\/span><span class=\"token parameter\">req<span class=\"token punctuation\">,<\/span> res<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token operator\">=><\/span><span class=\"token punctuation\">{<\/span>\n    <span class=\"token keyword\">return<\/span> res<span class=\"token punctuation\">.<\/span><span class=\"token function\">send<\/span><span class=\"token punctuation\">(<\/span><span class=\"token string\">'Hello world'<\/span><span class=\"token punctuation\">)<\/span>\n<span class=\"token punctuation\">}<\/span><span class=\"token punctuation\">)<\/span>\n\nserver<span class=\"token punctuation\">.<\/span><span class=\"token function\">listen<\/span><span class=\"token punctuation\">(<\/span><span class=\"token number\">3000<\/span><span class=\"token punctuation\">)<\/span>\n<\/code><\/pre>\n<p>Essa função que criamos depois do &quot;/teste&quot; ela possui dois parâmetros o &quot;req&quot; e o &quot;res&quot; o req representa todos os dados da nossa requisição, o usuário pode enviar vários parâmetros através do req são eles:<\/p>\n<p>Query Params;<\/p>\n<p>Route Params;<\/p>\n<p>request body<\/p>\n<p>Não vou entrar em detalhes neste artigo aqui sobre, caso você tenha interesse em se aprofunda em Nodejs te recomendo o nosso curso <a href=\"http://bit.ly/tipscode-curso-programador-full-stack-javascript\" target=\"_blank\" rel=\"noopener\">Programador Full Stack JavaScript em 8 semanas!<\/a> la explicamos tudo com detalhes e exemplos, criando na prática aplicações reais usando o Nodejs. No parâmetro &quot;res&quot; vamos ter todas as informações que precisamos para retorna uma resposta para o meu front-end, então vamos retorna um simples texto usando a função send(). Para testar rode o seguinte comando no terminal:<\/p>\n<pre><code>node index<span class=\"token punctuation\">.<\/span>js\n<\/code><\/pre>\n<p>Abra o navegador e digite localhost:3000/teste<\/p>\n<p><img src=\"/uploads/2020/01/Retorno-com-sucesso.png\" alt=\"\"><\/p>\n<p><strong>aplicação em Nodejs,<\/strong><\/p>\n<p>Uma API normalmente não retornar texto, e sim formatos como JSON ou XML, para enviamos um JSON por exemplo, vamos ao código:<\/p>\n<pre><code><span class=\"token keyword\">const<\/span> express <span class=\"token operator\">=<\/span> <span class=\"token function\">require<\/span><span class=\"token punctuation\">(<\/span><span class=\"token string\">'express'<\/span><span class=\"token punctuation\">)<\/span>\n\n<span class=\"token keyword\">const<\/span> server <span class=\"token operator\">=<\/span> <span class=\"token function\">express<\/span><span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">)<\/span>\n\nserver<span class=\"token punctuation\">.<\/span><span class=\"token function\">get<\/span><span class=\"token punctuation\">(<\/span><span class=\"token string\">'/teste'<\/span><span class=\"token punctuation\">,<\/span> <span class=\"token punctuation\">(<\/span><span class=\"token parameter\">req<span class=\"token punctuation\">,<\/span> res<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token operator\">=><\/span><span class=\"token punctuation\">{<\/span>\n    <span class=\"token keyword\">return<\/span> res<span class=\"token punctuation\">.<\/span><span class=\"token function\">json<\/span><span class=\"token punctuation\">(<\/span> <span class=\"token punctuation\">{<\/span><span class=\"token literal-property property\">message<\/span><span class=\"token operator\">:<\/span> <span class=\"token string\">'Hello World'<\/span> <span class=\"token punctuation\">}<\/span> <span class=\"token punctuation\">)<\/span>\n<span class=\"token punctuation\">}<\/span><span class=\"token punctuation\">)<\/span>\n\nserver<span class=\"token punctuation\">.<\/span><span class=\"token function\">listen<\/span><span class=\"token punctuation\">(<\/span><span class=\"token number\">3000<\/span><span class=\"token punctuation\">)<\/span>\n<\/code><\/pre>\n<p>Faça o mesmo procedimento para executar o código e agora temos uma API retornando um json.<\/p>\n<h3>Criando as rotas post, put e delete<\/h3>\n<p>Para podemos testar esses métodos, vamos precisar de uma ferramente, neste artigo vou usar o <a href=\"https://insomnia.rest/download/\" target=\"_blank\" rel=\"noopener\">Insomnia<\/a>, tem versão para Mac, Linux e Windows existe também o <a href=\"https://www.getpostman.com/\" target=\"_blank\" rel=\"noopener\">postman<\/a>, fique a vontade na escolha.<\/p>\n<p>Antes de criamos nossos métodos com o Insomnia, precisamos entender um pouco sobre como funciona os métodos e como podemos captura-los através da url, vamos a um exemplo. Vamos ao navegador e digitamos o seguinte: <a href=\"http://localhost:3000/teste?nome=Joao\" target=\"_blank\" rel=\"noopener\">http://localhost:3000/teste?nome=Joao<\/a><\/p>\n<p><img src=\"/uploads/2020/01/nenhum-retorno.png\" alt=\"\"><\/p>\n<p><strong>aplicação em Nodejs,<\/strong><\/p>\n<p>Não temos nenhum feedback visual, pelo menos por enquanto, mas digamos que queremos que o nome que digitamos na barra do navegador apareça no corpo da mensagem, vamos ao código:<\/p>\n<pre><code><span class=\"token keyword\">const<\/span> express <span class=\"token operator\">=<\/span> <span class=\"token function\">require<\/span><span class=\"token punctuation\">(<\/span><span class=\"token string\">'express'<\/span><span class=\"token punctuation\">)<\/span>\n\n<span class=\"token keyword\">const<\/span> server <span class=\"token operator\">=<\/span> <span class=\"token function\">express<\/span><span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">)<\/span>\n\nserver<span class=\"token punctuation\">.<\/span><span class=\"token function\">get<\/span><span class=\"token punctuation\">(<\/span><span class=\"token string\">'/teste'<\/span><span class=\"token punctuation\">,<\/span> <span class=\"token punctuation\">(<\/span><span class=\"token parameter\">req<span class=\"token punctuation\">,<\/span> res<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token operator\">=><\/span><span class=\"token punctuation\">{<\/span>\n    \n    <span class=\"token keyword\">const<\/span> nome <span class=\"token operator\">=<\/span> req<span class=\"token punctuation\">.<\/span>query<span class=\"token punctuation\">.<\/span>nome\n\n    <span class=\"token keyword\">return<\/span> res<span class=\"token punctuation\">.<\/span><span class=\"token function\">json<\/span><span class=\"token punctuation\">(<\/span> <span class=\"token punctuation\">{<\/span><span class=\"token literal-property property\">message<\/span><span class=\"token operator\">:<\/span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`<\/span><span class=\"token string\">Buscando o usuário <\/span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${<\/span>nome<span class=\"token interpolation-punctuation punctuation\">}<\/span><\/span><span class=\"token string\"> <\/span><span class=\"token template-punctuation string\">`<\/span><\/span><span class=\"token punctuation\">}<\/span> <span class=\"token punctuation\">)<\/span>\n<span class=\"token punctuation\">}<\/span><span class=\"token punctuation\">)<\/span>\n\nserver<span class=\"token punctuation\">.<\/span><span class=\"token function\">listen<\/span><span class=\"token punctuation\">(<\/span><span class=\"token number\">3000<\/span><span class=\"token punctuation\">)<\/span>\n<\/code><\/pre>\n<p>Criamos uma const chamada &quot;nome&quot; onde essa variável receberá o req.query.nome, ou seja, então a variável nome irá receber o conteúdo que digitamos lá no navegador, e para mostrar esse nome, vou usar um recurso novo do JavaScript que é as templates string. Bom com essa alteração, podemos continuar nossa API, lembrando que temos um super treinamento onde passamos por cada detalhe do Nodejs para sabe mais <a href=\"http://bit.ly/tipscode-curso-programador-full-stack-javascript\" target=\"_blank\" rel=\"noopener\">clique aqui<\/a>.<\/p>\n<h3>Capturando um id pela url<\/h3>\n<p>Abra seu navegador e digite <a href=\"https://localhost/teste/1\" target=\"_blank\" rel=\"noopener\">https://localhost/teste/1<\/a><\/p>\n<pre><code><span class=\"token keyword\">const<\/span> express <span class=\"token operator\">=<\/span> <span class=\"token function\">require<\/span><span class=\"token punctuation\">(<\/span><span class=\"token string\">'express'<\/span><span class=\"token punctuation\">)<\/span>\n\n<span class=\"token keyword\">const<\/span> server <span class=\"token operator\">=<\/span> <span class=\"token function\">express<\/span><span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">)<\/span>\n\nserver<span class=\"token punctuation\">.<\/span><span class=\"token function\">get<\/span><span class=\"token punctuation\">(<\/span><span class=\"token string\">'/teste/:id'<\/span><span class=\"token punctuation\">,<\/span> <span class=\"token punctuation\">(<\/span><span class=\"token parameter\">req<span class=\"token punctuation\">,<\/span> res<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token operator\">=><\/span><span class=\"token punctuation\">{<\/span>\n    <span class=\"token keyword\">const<\/span> id <span class=\"token operator\">=<\/span> req<span class=\"token punctuation\">.<\/span>params<span class=\"token punctuation\">.<\/span>id\n\n    <span class=\"token keyword\">return<\/span> res<span class=\"token punctuation\">.<\/span><span class=\"token function\">json<\/span><span class=\"token punctuation\">(<\/span> <span class=\"token punctuation\">{<\/span><span class=\"token literal-property property\">message<\/span><span class=\"token operator\">:<\/span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`<\/span><span class=\"token string\">Buscando o usuário <\/span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${<\/span>id<span class=\"token interpolation-punctuation punctuation\">}<\/span><\/span><span class=\"token template-punctuation string\">`<\/span><\/span> <span class=\"token punctuation\">}<\/span> <span class=\"token punctuation\">)<\/span>\n<span class=\"token punctuation\">}<\/span><span class=\"token punctuation\">)<\/span>\n\nserver<span class=\"token punctuation\">.<\/span><span class=\"token function\">listen<\/span><span class=\"token punctuation\">(<\/span><span class=\"token number\">3000<\/span><span class=\"token punctuation\">)<\/span>\n<\/code><\/pre>\n<p>Vamos fazer uma pequena alteração em nosso código para capturamos o nosso ID:<\/p>\n<pre><code>server<span class=\"token punctuation\">.<\/span><span class=\"token function\">get<\/span><span class=\"token punctuation\">(<\/span><span class=\"token string\">'/teste/:id'<\/span><span class=\"token punctuation\">,<\/span> <span class=\"token punctuation\">(<\/span><span class=\"token parameter\">req<span class=\"token punctuation\">,<\/span> res<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token operator\">=><\/span><span class=\"token punctuation\">{<\/span>\n    <span class=\"token keyword\">const<\/span> id <span class=\"token operator\">=<\/span> req<span class=\"token punctuation\">.<\/span>params<span class=\"token punctuation\">.<\/span>id\n\n    <span class=\"token keyword\">return<\/span> res<span class=\"token punctuation\">.<\/span><span class=\"token function\">json<\/span><span class=\"token punctuation\">(<\/span> <span class=\"token punctuation\">{<\/span><span class=\"token literal-property property\">message<\/span><span class=\"token operator\">:<\/span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`<\/span><span class=\"token string\">Buscando o usuário <\/span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${<\/span>id<span class=\"token interpolation-punctuation punctuation\">}<\/span><\/span><span class=\"token template-punctuation string\">`<\/span><\/span> <span class=\"token punctuation\">}<\/span> <span class=\"token punctuation\">)<\/span>\n<span class=\"token punctuation\">}<\/span><span class=\"token punctuation\">)<\/span>\n<\/code><\/pre>\n<p>Com essa pequena alteração, conseguimos capturar o id especifico digitado na url do navegador. Agora vamos abrir nossa ferramente para realizamos nossos testes.<\/p>\n<p><img src=\"/uploads/2020/01/Insomnia-1024x537.png\" alt=\"\"><\/p>\n<p><strong>aplicação em Nodejs,<\/strong><\/p>\n<h3>Criando Requisições<\/h3>\n<p>Abra seu navegador e digite <a href=\"https://localhost/teste/1\" target=\"_blank\" rel=\"noopener\">https://localhost/teste/1<\/a><\/p>\n<p><img src=\"/uploads/2020/01/Insomnia-criando-rota.png\" alt=\"\"><\/p>\n<p><img src=\"/uploads/2020/01/sucesso-insomnia.png\" alt=\"\"><\/p>\n<p><strong>aplicação em Nodejs,<\/strong><\/p>\n<h3>Melhorando nossa API<\/h3>\n<pre><code><span class=\"token keyword\">const<\/span> express <span class=\"token operator\">=<\/span> <span class=\"token function\">require<\/span><span class=\"token punctuation\">(<\/span><span class=\"token string\">'express'<\/span><span class=\"token punctuation\">)<\/span>\n\n<span class=\"token keyword\">const<\/span> server <span class=\"token operator\">=<\/span> <span class=\"token function\">express<\/span><span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">)<\/span>\n\n<span class=\"token keyword\">const<\/span> users <span class=\"token operator\">=<\/span> <span class=\"token punctuation\">[<\/span><span class=\"token string\">'Tipscode'<\/span><span class=\"token punctuation\">,<\/span> <span class=\"token string\">'Dukeza'<\/span><span class=\"token punctuation\">,<\/span> <span class=\"token string\">'Tux'<\/span><span class=\"token punctuation\">]<\/span>\n\nserver<span class=\"token punctuation\">.<\/span><span class=\"token function\">get<\/span><span class=\"token punctuation\">(<\/span><span class=\"token string\">'/teste/:index'<\/span><span class=\"token punctuation\">,<\/span> <span class=\"token punctuation\">(<\/span><span class=\"token parameter\">req<span class=\"token punctuation\">,<\/span> res<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token operator\">=><\/span><span class=\"token punctuation\">{<\/span>\n    <span class=\"token keyword\">const<\/span> <span class=\"token punctuation\">{<\/span> index <span class=\"token punctuation\">}<\/span> <span class=\"token operator\">=<\/span> req<span class=\"token punctuation\">.<\/span>params\n\n    <span class=\"token keyword\">return<\/span> res<span class=\"token punctuation\">.<\/span><span class=\"token function\">json<\/span><span class=\"token punctuation\">(<\/span>users<span class=\"token punctuation\">[<\/span>index<span class=\"token punctuation\">]<\/span><span class=\"token punctuation\">)<\/span>\n<span class=\"token punctuation\">}<\/span><span class=\"token punctuation\">)<\/span>\n\nserver<span class=\"token punctuation\">.<\/span><span class=\"token function\">listen<\/span><span class=\"token punctuation\">(<\/span><span class=\"token number\">3000<\/span><span class=\"token punctuation\">)<\/span>\n<\/code><\/pre>\n<p>Precisamos salvar esses usuários em algum lugar da aplicação, como esse artigo não se propõe a mostrar nenhum banco de dados, não vamos utilizar dessa forma. O Nodejs quando é executado ele guarda em memoria todas as variáveis criadas no projeto, e o legal é que elas não são recriadas quando o usuário faz uma nova requisição, então vamos criar um array “users” para guarda esses usuários, em nosso parâmetro ao invés de receber o id vou pegamos o index que é a posição do usuário e no retorno, retornamos só users que é nosso array de acordo com a posição do index.<\/p>\n<h3>Finalizando API<\/h3>\n<p>CRUD - Create, Read, Update, Delete<\/p>\n<p>Nossa aplicação está começando a ganha forma. Nesta parte, vamos escrever o GRUD na nossa aplicação, GRUD significa create, read, update e delete, não vou foca em explicar detalhadamente se não o artigo ficará muito grande, mas basicamente nossa API vai criar um usuário, listar, alterar e deleta esses usuários. Vamos ao código fazer essas modificações.<\/p>\n<h3>Listando usuários<\/h3>\n<pre><code><span class=\"token keyword\">const<\/span> users <span class=\"token operator\">=<\/span> <span class=\"token punctuation\">[<\/span><span class=\"token string\">'Tipscode'<\/span><span class=\"token punctuation\">,<\/span> <span class=\"token string\">'Dukeza'<\/span><span class=\"token punctuation\">,<\/span> <span class=\"token string\">'Tux'<\/span><span class=\"token punctuation\">]<\/span>\n\nserver<span class=\"token punctuation\">.<\/span><span class=\"token function\">get<\/span><span class=\"token punctuation\">(<\/span><span class=\"token string\">'/users'<\/span><span class=\"token punctuation\">,<\/span> <span class=\"token punctuation\">(<\/span><span class=\"token parameter\">req<span class=\"token punctuation\">,<\/span> res<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token operator\">=><\/span><span class=\"token punctuation\">{<\/span>\n    <span class=\"token keyword\">return<\/span> res<span class=\"token punctuation\">.<\/span><span class=\"token function\">json<\/span><span class=\"token punctuation\">(<\/span>users<span class=\"token punctuation\">)<\/span>\n<span class=\"token punctuation\">}<\/span><span class=\"token punctuation\">)<\/span>\n<\/code><\/pre>\n<p>Criarmos uma rota, onde lista todos os usuários essa função não precisa receber parâmetros, apenas um json com todos os usuários que estiver em memória. Vamos abrir o Insomnia para testar a lista de usuários.<\/p>\n<p><img src=\"/uploads/2020/01/Listando-usuários-1024x281.jpg\" alt=\"\"><\/p>\n<h3>Criando usuário<\/h3>\n<p>Vamos ao código<\/p>\n<pre><code>server<span class=\"token punctuation\">.<\/span><span class=\"token function\">post<\/span><span class=\"token punctuation\">(<\/span><span class=\"token string\">'/users'<\/span><span class=\"token punctuation\">,<\/span> <span class=\"token punctuation\">(<\/span><span class=\"token parameter\">req<span class=\"token punctuation\">,<\/span> res<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token operator\">=><\/span> <span class=\"token punctuation\">{<\/span>\n    <span class=\"token keyword\">const<\/span> <span class=\"token punctuation\">{<\/span> name <span class=\"token punctuation\">}<\/span> <span class=\"token operator\">=<\/span> req<span class=\"token punctuation\">.<\/span>body\n\n    users<span class=\"token punctuation\">.<\/span><span class=\"token function\">push<\/span><span class=\"token punctuation\">(<\/span>name<span class=\"token punctuation\">)<\/span>\n\n    <span class=\"token keyword\">return<\/span> res<span class=\"token punctuation\">.<\/span><span class=\"token function\">json<\/span><span class=\"token punctuation\">(<\/span>users<span class=\"token punctuation\">)<\/span>\n<span class=\"token punctuation\">}<\/span><span class=\"token punctuation\">)<\/span>\n<\/code><\/pre>\n<p>Criamos uma const “name” onde receberá o corpo da requisição, depois fazemos users.push(name) e o médoto push() adiciona ao array o elemento que passamos, neste caso o conteúdo da variável “nome” e por fim retornamos esse users. Salvamos e executamos o código com node index.js, agora vamos abrir o insommnia e criar as requisições para testamos nossa aplicação. Veja a figura abaixo.<\/p>\n<p><img src=\"/uploads/2020/01/Método-post-1024x425.jpg\" alt=\"\"><\/p>\n<p><strong>aplicação em Nodejs,<\/strong><\/p>\n<p><img src=\"/uploads/2020/01/Erro-método-1024x301.jpg\" alt=\"\"><\/p>\n<p><strong>aplicação em Nodejs,<\/strong><\/p>\n<p>Veja que deu um erro, isso aconteceu por que o express tem várias formas de receber o corpo da requisição, uma delas é o json, vamos usar o json na maiorias das vezes, mas precisamos dizer isso ao express, oh express vamosa usar o formato json beleza, passando isso para o código escrevemos o seguinte:<\/p>\n<pre><code>server<span class=\"token punctuation\">.<\/span><span class=\"token function\">use<\/span><span class=\"token punctuation\">(<\/span>express<span class=\"token punctuation\">.<\/span><span class=\"token function\">json<\/span><span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">)<\/span>\n<\/code><\/pre>\n<p>Vamos testar novamente !!<\/p>\n<p><img src=\"/uploads/2020/01/criar-e-lista-funcionando-1024x463.jpg\" alt=\"\"><\/p>\n<p><strong>aplicação em Nodejs,<\/strong><\/p>\n<p>Agora nossa aplicação está fazendo as duas operações básicas do GRUD, criando usuário e listando usuário, vamos agora editar esse usuário.<\/p>\n<h3>Editando usuário<\/h3>\n<p>Para fazer a alteração do usuário precisamos saber qual o usuário especifico para editar, então precisamos localizar esse usuário, para fazermos isso, precisamos percorrer o nosso array e identificar o usuário na posição do array. Vamos ao código!<\/p>\n<pre><code>server<span class=\"token punctuation\">.<\/span><span class=\"token function\">put<\/span><span class=\"token punctuation\">(<\/span><span class=\"token string\">'/users/:index'<\/span><span class=\"token punctuation\">,<\/span> <span class=\"token punctuation\">(<\/span><span class=\"token parameter\">req<span class=\"token punctuation\">,<\/span> res<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token operator\">=><\/span> <span class=\"token punctuation\">{<\/span>\n    <span class=\"token keyword\">const<\/span> <span class=\"token punctuation\">{<\/span> index <span class=\"token punctuation\">}<\/span> <span class=\"token operator\">=<\/span> req<span class=\"token punctuation\">.<\/span>params\n    <span class=\"token keyword\">const<\/span> <span class=\"token punctuation\">{<\/span> name <span class=\"token punctuation\">}<\/span> <span class=\"token operator\">=<\/span> req<span class=\"token punctuation\">.<\/span>body\n\n    users<span class=\"token punctuation\">[<\/span>index<span class=\"token punctuation\">]<\/span> <span class=\"token operator\">=<\/span> name\n\n    <span class=\"token keyword\">return<\/span> res<span class=\"token punctuation\">.<\/span><span class=\"token function\">json<\/span><span class=\"token punctuation\">(<\/span>users<span class=\"token punctuation\">)<\/span>\n<span class=\"token punctuation\">}<\/span><span class=\"token punctuation\">)<\/span>\n<\/code><\/pre>\n<p>Primeiro vamos fazer uma alteração no parâmetro da função put(), /users/:index' esse trecho de código que dizer que tudo depois da /: conseguimos captura, depois criamos uma variável “index” e atribuímos o re.params, ou conteúdo do index lá da url será guardada na variável index que criamos, depois criamos outra variável com o nome “name” recebendo o req.body, ou seja, todo o corpo da requisição. Para finalizamos, setamos o array users na posição do índice que capturamos e atribuímos ao name, por fim retornarmos um json com o array users. Agora vamos testar usando a ferramente Insomnia.<\/p>\n<p><img src=\"/uploads/2020/01/editando-usuário-1024x301.jpg\" alt=\"\"><\/p>\n<p><strong>aplicação em Nodejs,<\/strong><\/p>\n<h3>Deletando usuário<\/h3>\n<pre><code>server<span class=\"token punctuation\">.<\/span><span class=\"token function\">delete<\/span><span class=\"token punctuation\">(<\/span><span class=\"token string\">'/users/:index'<\/span><span class=\"token punctuation\">,<\/span> <span class=\"token punctuation\">(<\/span><span class=\"token parameter\">req<span class=\"token punctuation\">,<\/span> res<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token operator\">=><\/span> <span class=\"token punctuation\">{<\/span>\n    <span class=\"token keyword\">const<\/span> <span class=\"token punctuation\">{<\/span> index <span class=\"token punctuation\">}<\/span> <span class=\"token operator\">=<\/span> req<span class=\"token punctuation\">.<\/span>params\n\n    users<span class=\"token punctuation\">.<\/span><span class=\"token function\">splice<\/span><span class=\"token punctuation\">(<\/span>index<span class=\"token punctuation\">,<\/span> <span class=\"token number\">1<\/span><span class=\"token punctuation\">)<\/span>\n<span class=\"token punctuation\">}<\/span><span class=\"token punctuation\">)<\/span>\n<\/code><\/pre>\n<p>Para deleta usamos o método delete(), precisamos também identificar qual usuário deletar, então vamos usar a mesma estratégia do editar, capturando o índice do array, e ai usamos o método splice() basicamente ele percorre todo o array, vai chegar no índice que passamos, ele deleta a posição a partir do elemento encontrado.<\/p>\n<p><img src=\"/uploads/2020/01/Deletando-sucess-1024x564.jpg\" alt=\"\"><\/p>\n<p><strong>aplicação em Nodejs,<\/strong><\/p>\n<p>Nossa aplicação em NodeJS está pronta, estamos realizando as quatro tarefas básicas do CRUD são elas criar, listar, editar e deletar. Caso você queira clona o código, segue o link do repositório no GitHub <a href=\"https://github.com/alissonsuassuna/crud-nodejs\" target=\"_blank\" rel=\"noopener\">clique aqui<\/a>.<\/p>\n<p><a href=\"/programador-fullstack-8-semanas\"><img src=\"/uploads/2020/01/banner-Porgramador-full-stack-Javascript-1024x1024.png\" alt=\"\"><\/a><\/p>\n<h3>Se torne um desenvolvedor FULL STACK em apenas 8 SEMANAS<\/h3>\n<p>O maior treinamento online de JAVASCRIPT voltado 100% para o MERCADO DE TRABALHO. Você vai aprender JavaScript, Lógica de Programação, HTML5, CSS3, Bulma, NodeJs, Express, React, Git, Github.<\/p>\n<p><a href=\"/programador-fullstack-8-semanas\">Quero Participar<\/a><\/p>\n","date":"2020-01-07T00:00:00.000Z","readingTime":13,"title":"Criando uma aplicação em Nodejs","categories":["artigos"],"tags":["aplicacao-em-node","nodejs"],"description":"Fala dev, tudo bem? Neste artigo vamos criar nossa primeira aplicação em Nodejs, então sem mais conversa bora coda?","imgArticle":"/thumbnail-article/criando-app-nodejs.png","imgHome":"/thumbnail-home/criando-app-nodejs.png"},{"slug":"conhecendo-nodejs","content":"<p>Neste artigo vamos conhece e saber com mais detalhes sobre essa plataforma de desenvolvimento que vem evolucionando o mercado web. NodeJS, a final de contas o que é? Por que ele está dominando o mercado? Quais são suas características? Quais são os benefícios? Todas essas perguntas esse artigo se propõe a responde-las, então sem mais delongas vamos la !!<\/p>\n<h2>O que é NodeJS<\/h2>\n<ul>\n<li>JavaScript no back-end;\n<ul>\n<li>Não lidamos com eventos do usuário final;<\/li>\n<li>Rotas e integrações;<\/li>\n<\/ul><\/li>\n<li>Plataforma (não linguagem);<\/li>\n<li>Construída em cima da <a href=\"https://v8.dev/\" target=\"_blank\" rel=\"noopener\">engine V8<\/a>;<\/li>\n<li>Comparável a PHP / Ruby / Python / Go;<\/li>\n<\/ul>\n<p><em>NodeJs<\/em> nos possibilita utilizar a linguagem <em>JavaScript<\/em> no <em>back-end<\/em>, o <em>back-end<\/em> é tudo o que o usuário não enxerga, ou seja, todo parte visual de um determinado site, cliques de botões, imagens, vídeos, áudios e links. O back-end é uma camada onde fica a regra de negócio da aplicação, a comunicação com banco de dados, integrações de serviços de terceiros como por exemplo plataformas de pagamentos, sistema de notas fiscais. Outra coisa que temos que levar em conta, quando iniciamos os estudos em <em>NodeJS<\/em> é que não vamos lidar com nenhum tipo de evento vinda do usuário final, ou seja, não vamos fazer nenhum tratamento com cliques em botões, passar o mouse por cima de algum elemento, que é dessa forma que o JavaScript é utilizado nos navegadores, quando estamos desenvolvendo em NodeJs a única forma de ouvir eventos dos usuários é usando as rotas, ou seja, quando o usuário acessa alguma url e disparamos alguma resposta para o <em><strong>client-server.<\/strong><\/em><\/p>\n<p><img src=\"/uploads/2019/12/O-que-é-NodeJS-1024x427.jpg\" alt=\"\"><\/p>\n<p>NodeJS não é uma linguagem de programação, vejo vários programadores fazendo essa confusão. NodeJS é uma plataforma para desenvolvimento <em>back-end<\/em>, ele foi construído em cima da engine V8, V8 é o motor que está por trás do navegador Google Chrome, ele utiliza dessa engine para conseguir roda códigos JavaScript no back-end, isso faz com que ele seja muito rápido e conseguimos usar todos os recursos disponíveis na linguagem JavaScript no back-end. Podemos comparar o NodeJS com linguagens como PHP, Ruby, Python, GO que também rodam no <em>back-end<\/em>, ou qualquer outra que se aplique no lado do back-end.<\/p>\n<h3>O que é NPM e YARN ?<\/h3>\n<p><img src=\"/uploads/2019/12/detective-1424831_640-297x300.png\" alt=\"\"><\/p>\n<ul>\n<li>Instalar bibliotecas de terceiros;<\/li>\n<li>Fornece bibliotecas<\/li>\n<\/ul>\n<p>Antes de falarmos algumas características do NodeJS em relação as linguagens mais tradicionais, temos que falar um pouco sobre os gerenciadores de pacotes que temos, exemplos são o <strong><em>NPM<\/em><\/strong> e o <strong><em>Yarn<\/em><\/strong> os dois são ferramentas similares. Esses gerenciadores nos permitem que fazemos instalações de pacotes de terceiros, exemplo, digamos que nossa aplicação precise de alguma <strong><em>lib<\/em><\/strong> de pagamentos como exemplo o PagSeguro, Paypal, geralmente não criamos do zero, apenas instalamos em nossos projetos e utilizamos. Podemos também fornecer nossas próprias bibliotecas e disponibiliza-las através desses gerenciadores de pacotes através de um repositório global. Podemos comparar o <strong><em>NPM<\/em><\/strong> e o <strong><em>Yarn<\/em><\/strong> com alguns gerenciadores de outras linguagens tais como:<\/p>\n<ul>\n<li>Composer do PHP;<\/li>\n<li>Gems do Ruby;<\/li>\n<li>PIP do Python<\/li>\n<\/ul>\n<h3>Principais Características<\/h3>\n<p>Vamos explorar algumas das características do Node e entender o porque que ele está tão “famoso” e dominando a maior parte do mercado.<\/p>\n<ul>\n<li>Arquitetura Event-loop\n<ul>\n<li>Baseada em eventos (Rotas na maiorias das vezes);<\/li>\n<li>Call Stack<\/li>\n<\/ul><\/li>\n<li>Node single-thread;\n<ul>\n<li>C++ por trás com libUV;<\/li>\n<li>background threads;<\/li>\n<\/ul><\/li>\n<li>Non-blocking I/O<\/li>\n<\/ul>\n<p>O Node segue uma arquitetura bem diferente das tradicionais, essa arquitetura se chama <em>Event-loop<\/em> ela é totalmente baseada em eventos e tem um ponto central que é o <strong>call Stack<\/strong>. <em>O call stack<\/em> nada mais é do que uma pilha de eventos, podemos imagina um evento como se fosse uma função, e o Node processa através de um loop eterno, onde o mesmo fica verificando se existe alguma nova função, e executa em formato de pilha, caso tenha interesse em estudar com mais detalhes, recomendo o treinamento <a href=\"http://bit.ly/tipscode-curso-programador-full-stack-javascript\" target=\"_blank\" rel=\"noopener\"><strong>INCRÍVEL E COM UMA METODOLOGIA INOVADORA DE ENSINO<\/strong> PROGRANADOR FULL STACK JAVASCRIPT em 8 SEMANAS<\/a>. Outra característica do Node é que ele é <strong><em>single-thread<\/em><\/strong>, ou seja, ele executa o processo em apenas um core do processador, mesmo que tenha vários cores, porém como ele utiliza várias libs do C++ por trás, e a mais famosa é a <strong><em>libuv<\/em><\/strong>, essa lib permite que utilizamos <em>multitheads<\/em>, isso que dizer que por baixo dos panos estamos utilizando mais de uma thread do processador, deixando nossa aplicação mais rápida. Outra característica muito poderosa do Node é o <strong><em>Non-blocking I/O<\/em><\/strong> traduzindo para português que dizer input e output não bloqueante, isso que dizer que quando é feita uma requisição para o Node, exemplo digamos que pedimos uma listagem de compras, não precisamos mandar a lista completa, conseguimos fazer essa listagem por partes, a conexão não será bloqueada, isso não acontece por exemplo em PHP que no momento que fazemos a requisição ela é respondida e a conexão é fechada imediatamente.<\/p>\n<h3>Conceito Client-Server (Cliente - Servidor)<\/h3>\n<p>Algo de extrema importância para quem quer estudar e desenvolver aplicações com o NodeJs é entender o conceito de cliente-server, mas o que é um servidor? O servidor nada mais é do que uma aplicação com diversos serviços e pode ser requisitados por outras aplicações, já o client é uma aplicação capaz de fazer requisições para aplicação servidora, normalmente essas aplicações são executadas em maquinas distintas, mas por se trata de aplicações nada impede das duas coexista em uma mesma máquina, isso é muito comum no estágio do desenvolvimento.<\/p>\n<p><img src=\"/uploads/2019/12/client-server-1024x487.jpg\" alt=\"\"><\/p>\n<p>Para que essa comunicação exista entre cliente e um servidor é necessário que ambas obedeça algumas regras de troca de mensagens, ou seja, um protocolo padrão de comunicação, no universo web, no lado do cliente estão os navegadores, google chrome, Firefox entre outros, no lado de servidores web conhecidos também como servidores HTTP, exemplos o apache e tomcat. A dinâmica é simples, a aplicação do lado do cliente é responsável por enviar uma requisição (request) para aplicação servidora, o mesmo faz todas as tratativas e enviar uma resposta (response) e por fim a aplicação cliente renderia todos os dados em tela.<\/p>\n<p><img src=\"/uploads/2019/12/Comunicação-entre-client-e-server-1024x427.jpg\" alt=\"\"><\/p>\n<h3>Conclusões<\/h3>\n<p>Chegamos ao fim de mais um artigo, espero que tenha conseguido esclarece um pouco mais sobre o NodeJs, deixar seu comentário, vamos discutir mais sobre o assunto, feedbacks é muito bem-vindos e vão me ajudar a criar ainda mais conteúdo e com mais qualidade para vocês, até a próxima !<\/p>\n<h3>Programador Full Stack JavaScript em 8 Semanas<\/h3>\n<p>Se você quer se tornar um desenvolvedor web de alta qualidade, que irá conseguir as melhores vagas, você precisa ter uma base sólida de conhecimentos e uma visão geral de como o mercado funciona.<\/p>\n<p>JavaScript (HTML5, CSS3 e Lógica de Programação);<\/p>\n<p>NodeJs (Back-End usando o Express);<\/p>\n<p>CSS3 (Framework Bulma);<\/p>\n<p>React<\/p>\n<p>Git e GitHub.<\/p>\n<p>Fazer deploy da aplicação;<\/p>\n<p>Esse curso é um dos mais completos e atualizados do mercado que já vi, o Professor o <a href=\"https://www.linkedin.com/in/leonardo-scorza-7aba352b\" target=\"_blank\" rel=\"noopener\">Leonardo Scorza<\/a> tem uma didática incrível e <strong>INOVADORA<\/strong>, além de ter uma vasta EXPERIÊNCIA no mercado <strong>NACIONAL<\/strong> E <strong>INTERNACIONAL.<\/strong> Neste curso você realmente vai aprender e domina o JavaScript e seu ecossistema para ser torna um verdadeiro desenvolvedor Full Stack.<\/p>\n<p><img src=\"/uploads/2020/01/banner-de-chamada-para-dentro-dos-artigos-1024x304.jpg\" alt=\"\"><\/p>\n<p>[<\/p>\n<h6>Garanta já sua Vaga !<\/h6>\n<p>Programador Full Stack em 8 SEMANAS!<\/p>\n<p>](/programador-fullstack-8-semanas)<\/p>\n<p>https://www.youtube.com/watch?v=apg0tmnWERE&amp;t=26s<\/p>\n","date":"2020-01-01T00:00:00.000Z","readingTime":5,"title":"Conhecendo NodeJs","categories":["artigos"],"description":"Neste artigo vamos conhece e saber com mais detalhes sobre essa plataforma de desenvolvimento que vem evolucionando o mercado web. NodeJS, a final de contas o que é? Por que ele está dominando o mercado? Quais são suas características? Quais são os benefícios? Todas essas perguntas esse artigo se propõe a responde-las, então sem mais delongas vamos la !!","imgArticle":"/thumbnail-article/conhecendo-nodejs.png","imgHome":"/thumbnail-home/conhecendo-nodejs.png"}],"count":81},"n-0-0-4-0-0":{"expanded":false},"n-0-0-4-0-0-0-0-0-0-1-0":{},"n-0-0-4-0-1-1-0-0":{"loading":false}}, "page": {"image":"/image-1200x630.png","status":200,"locale":"pt-BR","title":"TipsCode - TipsCode","description":"TipsCode Descomplicando a Tecnologia"}}