{"instances":{"application":{"persistent":false},"FacebookPixel/0-0-0-0-0":{"persistent":false},"GoogleAnalytics/0-0-0-0-1":{"persistent":false},"Articles_Articles/0-0-4/artigos/5":{"persistent":false,"articles":[{"slug":"criando-uma-aplicacao-em-nodejs","content":"<p>Fala dev, tudo bem? Neste artigo vamos criar nossa primeira <strong>aplicação em Nodejs,</strong> então sem mais conversa bora coda?</p>\n<h3>Instalando o Nodejs e o Yarn</h3>\n<p>Temos dois artigos aqui no site, onde ensino passo a passo a instalação do Nodejs e o Yarn, no artigo ensino instalar no Linux, caso você use o da uma pesquisada no Google é bem simples a instalação.</p>\n<p><a href=\"/conhecendo-nodejs/\">Instalando o NodeJS</a></p>\n<p><a href=\"/instalando-nodejs-no-manjaro/\">Instalando o Yarn</a></p>\n<p>Agora vamos colocar a mão na massa. Siga os passos a baixo !!</p>\n<ul>\n<li>Passo 01: Crie um diretório [nome você escolhe];</li>\n<li>Passo 02: Entre neste diretório que você criou;</li>\n<li>Passo 03: Abra o terminal dentro do diretório;</li>\n<li>Passo 04: Escreva o seguinte código:</li>\n</ul>\n<pre><code>yarn init <span class=\"token operator\">-</span>y\n</code></pre>\n<p>Seu terminal deverá está parecido com esse:</p>\n<p><img src=\"/uploads/2020/01/Terminal-01.png\" alt=\"\"></p>\n<p><strong>aplicação em Nodejs,</strong></p>\n<p>O comando <em>yarn init -y</em> cria um arquivo chamado <em>package.json</em>, vamos abrir o nosso editor de código, neste artigo estarei usando o <em>vccode</em>, mas fique a vontade para usa um de sua preferencia.</p>\n<p><img src=\"/uploads/2020/01/visualcode-aberto.png\" alt=\"\"></p>\n<p><strong>aplicação em Nodejs,</strong></p>\n<p>O arquivo package.json contém algumas informações, tais como o nome da aplicação, a versão, o arquivo base e a licença, porém essas informações só serão utilizadas caso o nosso projeto fosse ser disponibilizado para terceiro, caso contrário não vamos fazer uso. O package.json tem é responsabilidade por gerenciar nossos módulos e dependências, ou seja, tudo que instalarmos de terceiros vai ficar neste arquivo..</p>\n<h2>Instalando express</h2>\n<p>O Express é um microframework do Nodejs, o Express vai nos dá algumas funcionalidades padrão e irá facilitar muito a nossa vida. Claro que o Express é bem mais complexo do que citei, caso você tenha interesse em estudar e aprender de forma 100% prática com projetos reais CLIQUE AQUI. Então vamos instalar o Express em nosso projeto com o seguinte comando.</p>\n<pre><code>yarn add express\n</code></pre>\n<p><img src=\"/uploads/2020/01/package.jpg\" alt=\"\"></p>\n<p><strong>aplicação em Nodejs</strong></p>\n<p>Observe que o arquivo package.json foi alterado, agora temos um objeto com o nome “dependencies” e o nosso Express com o número da versão atual, isso é muito importante pois se outro programador pegar o nosso projeto ele não precisará o Express na mão, só é necessário executar o seguinte comando no terminal yarn e automaticamente todas as dependências serão instaladas.</p>\n<h2>Arquivo Raiz</h2>\n<p>Vamos criar nosso arquivo raiz, nele será escrito a base de toda a aplicação, então vamos criar o o nome &quot;index.js&quot; outro nome bastante utilizado é o &quot;app.js&quot; fica a sua escolha beleza, neste arquivo vamos escrever o seguinte código:</p>\n<pre><code><span class=\"token keyword\">const</span> express <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'express'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> server <span class=\"token operator\">=</span> <span class=\"token function\">express</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\nserver<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/teste'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span><span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Estamos no caminho certo !!'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\nserver<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">3000</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>Começamos importando o Express, a partir deste momento todas as funcionalidades que o Express expõe vai está presente na variável &quot;express&quot;. Agora vamos iniciar nosso servidor criando uma const &quot;server&quot; e instanciando o express. Para vermos isso funcionando precisamos criar nossa primeira rota, existem quatro tipos de métodos de rotas diferentes, são ele o get, post, put e o delete. Na linha 5 estamos falando o seguinte, oh quando a url /teste for chamada execute a função console.log() e exiba a mensagem no terminal. Vamos iniciar servidor, para fazer isso precisamos que ele escute alguma porta, então na linha 9 estamos mandando o servidor fica ouvindo a porta 3000, vamos testar, abra o terminal, e execute seguinte comando:</p>\n<pre><code>node index<span class=\"token punctuation\">.</span>js \n</code></pre>\n<p>Abra navegador e digite na barra de endereço: <em><strong>https://localhost:3000/teste.</strong></em> Note que o navegador ficou carregando, isso está acontecendo porque ele está esperando alguma resposta do nosso servidor, se formos olhar no terminal, veremos que a mensagem que escrevemos na função <em>consolo.log()</em> está aparecendo. Para paramos a execução do servidor no terminal, pressionamos ás teclas ( ctrl + c ).</p>\n<h3>Passando um retorno para o front-end</h3>\n<pre><code><span class=\"token keyword\">const</span> express <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'express'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> server <span class=\"token operator\">=</span> <span class=\"token function\">express</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\nserver<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/teste'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hello world'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\nserver<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">3000</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>Essa função que criamos depois do &quot;/teste&quot; ela possui dois parâmetros o &quot;req&quot; e o &quot;res&quot; o req representa todos os dados da nossa requisição, o usuário pode enviar vários parâmetros através do req são eles:</p>\n<p>Query Params;</p>\n<p>Route Params;</p>\n<p>request body</p>\n<p>Não vou entrar em detalhes neste artigo aqui sobre, caso você tenha interesse em se aprofunda em Nodejs te recomendo o nosso curso <a href=\"http://bit.ly/tipscode-curso-programador-full-stack-javascript\" target=\"_blank\" rel=\"noopener\">Programador Full Stack JavaScript em 8 semanas!</a> la explicamos tudo com detalhes e exemplos, criando na prática aplicações reais usando o Nodejs. No parâmetro &quot;res&quot; vamos ter todas as informações que precisamos para retorna uma resposta para o meu front-end, então vamos retorna um simples texto usando a função send(). Para testar rode o seguinte comando no terminal:</p>\n<pre><code>node index<span class=\"token punctuation\">.</span>js\n</code></pre>\n<p>Abra o navegador e digite localhost:3000/teste</p>\n<p><img src=\"/uploads/2020/01/Retorno-com-sucesso.png\" alt=\"\"></p>\n<p><strong>aplicação em Nodejs,</strong></p>\n<p>Uma API normalmente não retornar texto, e sim formatos como JSON ou XML, para enviamos um JSON por exemplo, vamos ao código:</p>\n<pre><code><span class=\"token keyword\">const</span> express <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'express'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> server <span class=\"token operator\">=</span> <span class=\"token function\">express</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\nserver<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/teste'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">message</span><span class=\"token operator\">:</span> <span class=\"token string\">'Hello World'</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\nserver<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">3000</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>Faça o mesmo procedimento para executar o código e agora temos uma API retornando um json.</p>\n<h3>Criando as rotas post, put e delete</h3>\n<p>Para podemos testar esses métodos, vamos precisar de uma ferramente, neste artigo vou usar o <a href=\"https://insomnia.rest/download/\" target=\"_blank\" rel=\"noopener\">Insomnia</a>, tem versão para Mac, Linux e Windows existe também o <a href=\"https://www.getpostman.com/\" target=\"_blank\" rel=\"noopener\">postman</a>, fique a vontade na escolha.</p>\n<p>Antes de criamos nossos métodos com o Insomnia, precisamos entender um pouco sobre como funciona os métodos e como podemos captura-los através da url, vamos a um exemplo. Vamos ao navegador e digitamos o seguinte: <a href=\"http://localhost:3000/teste?nome=Joao\" target=\"_blank\" rel=\"noopener\">http://localhost:3000/teste?nome=Joao</a></p>\n<p><img src=\"/uploads/2020/01/nenhum-retorno.png\" alt=\"\"></p>\n<p><strong>aplicação em Nodejs,</strong></p>\n<p>Não temos nenhum feedback visual, pelo menos por enquanto, mas digamos que queremos que o nome que digitamos na barra do navegador apareça no corpo da mensagem, vamos ao código:</p>\n<pre><code><span class=\"token keyword\">const</span> express <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'express'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> server <span class=\"token operator\">=</span> <span class=\"token function\">express</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\nserver<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/teste'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span><span class=\"token punctuation\">{</span>\n    \n    <span class=\"token keyword\">const</span> nome <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span>query<span class=\"token punctuation\">.</span>nome\n\n    <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">message</span><span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Buscando o usuário </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>nome<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> </span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">}</span> <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\nserver<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">3000</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>Criamos uma const chamada &quot;nome&quot; onde essa variável receberá o req.query.nome, ou seja, então a variável nome irá receber o conteúdo que digitamos lá no navegador, e para mostrar esse nome, vou usar um recurso novo do JavaScript que é as templates string. Bom com essa alteração, podemos continuar nossa API, lembrando que temos um super treinamento onde passamos por cada detalhe do Nodejs para sabe mais <a href=\"http://bit.ly/tipscode-curso-programador-full-stack-javascript\" target=\"_blank\" rel=\"noopener\">clique aqui</a>.</p>\n<h3>Capturando um id pela url</h3>\n<p>Abra seu navegador e digite <a href=\"https://localhost/teste/1\" target=\"_blank\" rel=\"noopener\">https://localhost/teste/1</a></p>\n<pre><code><span class=\"token keyword\">const</span> express <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'express'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> server <span class=\"token operator\">=</span> <span class=\"token function\">express</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\nserver<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/teste/:id'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> id <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">.</span>id\n\n    <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">message</span><span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Buscando o usuário </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>id<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\nserver<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">3000</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>Vamos fazer uma pequena alteração em nosso código para capturamos o nosso ID:</p>\n<pre><code>server<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/teste/:id'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> id <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">.</span>id\n\n    <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">message</span><span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Buscando o usuário </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>id<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>Com essa pequena alteração, conseguimos capturar o id especifico digitado na url do navegador. Agora vamos abrir nossa ferramente para realizamos nossos testes.</p>\n<p><img src=\"/uploads/2020/01/Insomnia-1024x537.png\" alt=\"\"></p>\n<p><strong>aplicação em Nodejs,</strong></p>\n<h3>Criando Requisições</h3>\n<p>Abra seu navegador e digite <a href=\"https://localhost/teste/1\" target=\"_blank\" rel=\"noopener\">https://localhost/teste/1</a></p>\n<p><img src=\"/uploads/2020/01/Insomnia-criando-rota.png\" alt=\"\"></p>\n<p><img src=\"/uploads/2020/01/sucesso-insomnia.png\" alt=\"\"></p>\n<p><strong>aplicação em Nodejs,</strong></p>\n<h3>Melhorando nossa API</h3>\n<pre><code><span class=\"token keyword\">const</span> express <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'express'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> server <span class=\"token operator\">=</span> <span class=\"token function\">express</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> users <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'Tipscode'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Dukeza'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Tux'</span><span class=\"token punctuation\">]</span>\n\nserver<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/teste/:index'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> index <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span>params\n\n    <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span>users<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\nserver<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">3000</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>Precisamos salvar esses usuários em algum lugar da aplicação, como esse artigo não se propõe a mostrar nenhum banco de dados, não vamos utilizar dessa forma. O Nodejs quando é executado ele guarda em memoria todas as variáveis criadas no projeto, e o legal é que elas não são recriadas quando o usuário faz uma nova requisição, então vamos criar um array “users” para guarda esses usuários, em nosso parâmetro ao invés de receber o id vou pegamos o index que é a posição do usuário e no retorno, retornamos só users que é nosso array de acordo com a posição do index.</p>\n<h3>Finalizando API</h3>\n<p>CRUD - Create, Read, Update, Delete</p>\n<p>Nossa aplicação está começando a ganha forma. Nesta parte, vamos escrever o GRUD na nossa aplicação, GRUD significa create, read, update e delete, não vou foca em explicar detalhadamente se não o artigo ficará muito grande, mas basicamente nossa API vai criar um usuário, listar, alterar e deleta esses usuários. Vamos ao código fazer essas modificações.</p>\n<h3>Listando usuários</h3>\n<pre><code><span class=\"token keyword\">const</span> users <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'Tipscode'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Dukeza'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Tux'</span><span class=\"token punctuation\">]</span>\n\nserver<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/users'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span>users<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>Criarmos uma rota, onde lista todos os usuários essa função não precisa receber parâmetros, apenas um json com todos os usuários que estiver em memória. Vamos abrir o Insomnia para testar a lista de usuários.</p>\n<p><img src=\"/uploads/2020/01/Listando-usuários-1024x281.jpg\" alt=\"\"></p>\n<h3>Criando usuário</h3>\n<p>Vamos ao código</p>\n<pre><code>server<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/users'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> name <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span>body\n\n    users<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span>users<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>Criamos uma const “name” onde receberá o corpo da requisição, depois fazemos users.push(name) e o médoto push() adiciona ao array o elemento que passamos, neste caso o conteúdo da variável “nome” e por fim retornamos esse users. Salvamos e executamos o código com node index.js, agora vamos abrir o insommnia e criar as requisições para testamos nossa aplicação. Veja a figura abaixo.</p>\n<p><img src=\"/uploads/2020/01/Método-post-1024x425.jpg\" alt=\"\"></p>\n<p><strong>aplicação em Nodejs,</strong></p>\n<p><img src=\"/uploads/2020/01/Erro-método-1024x301.jpg\" alt=\"\"></p>\n<p><strong>aplicação em Nodejs,</strong></p>\n<p>Veja que deu um erro, isso aconteceu por que o express tem várias formas de receber o corpo da requisição, uma delas é o json, vamos usar o json na maiorias das vezes, mas precisamos dizer isso ao express, oh express vamosa usar o formato json beleza, passando isso para o código escrevemos o seguinte:</p>\n<pre><code>server<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>express<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>Vamos testar novamente !!</p>\n<p><img src=\"/uploads/2020/01/criar-e-lista-funcionando-1024x463.jpg\" alt=\"\"></p>\n<p><strong>aplicação em Nodejs,</strong></p>\n<p>Agora nossa aplicação está fazendo as duas operações básicas do GRUD, criando usuário e listando usuário, vamos agora editar esse usuário.</p>\n<h3>Editando usuário</h3>\n<p>Para fazer a alteração do usuário precisamos saber qual o usuário especifico para editar, então precisamos localizar esse usuário, para fazermos isso, precisamos percorrer o nosso array e identificar o usuário na posição do array. Vamos ao código!</p>\n<pre><code>server<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/users/:index'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> index <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span>params\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> name <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span>body\n\n    users<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> name\n\n    <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span>users<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>Primeiro vamos fazer uma alteração no parâmetro da função put(), /users/:index' esse trecho de código que dizer que tudo depois da /: conseguimos captura, depois criamos uma variável “index” e atribuímos o re.params, ou conteúdo do index lá da url será guardada na variável index que criamos, depois criamos outra variável com o nome “name” recebendo o req.body, ou seja, todo o corpo da requisição. Para finalizamos, setamos o array users na posição do índice que capturamos e atribuímos ao name, por fim retornarmos um json com o array users. Agora vamos testar usando a ferramente Insomnia.</p>\n<p><img src=\"/uploads/2020/01/editando-usuário-1024x301.jpg\" alt=\"\"></p>\n<p><strong>aplicação em Nodejs,</strong></p>\n<h3>Deletando usuário</h3>\n<pre><code>server<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/users/:index'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> index <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span>params\n\n    users<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>Para deleta usamos o método delete(), precisamos também identificar qual usuário deletar, então vamos usar a mesma estratégia do editar, capturando o índice do array, e ai usamos o método splice() basicamente ele percorre todo o array, vai chegar no índice que passamos, ele deleta a posição a partir do elemento encontrado.</p>\n<p><img src=\"/uploads/2020/01/Deletando-sucess-1024x564.jpg\" alt=\"\"></p>\n<p><strong>aplicação em Nodejs,</strong></p>\n<p>Nossa aplicação em NodeJS está pronta, estamos realizando as quatro tarefas básicas do CRUD são elas criar, listar, editar e deletar. Caso você queira clona o código, segue o link do repositório no GitHub <a href=\"https://github.com/alissonsuassuna/crud-nodejs\" target=\"_blank\" rel=\"noopener\">clique aqui</a>.</p>\n<p><a href=\"/programador-fullstack-8-semanas\"><img src=\"/uploads/2020/01/banner-Porgramador-full-stack-Javascript-1024x1024.png\" alt=\"\"></a></p>\n<h3>Se torne um desenvolvedor FULL STACK em apenas 8 SEMANAS</h3>\n<p>O maior treinamento online de JAVASCRIPT voltado 100% para o MERCADO DE TRABALHO. Você vai aprender JavaScript, Lógica de Programação, HTML5, CSS3, Bulma, NodeJs, Express, React, Git, Github.</p>\n<p><a href=\"/programador-fullstack-8-semanas\">Quero Participar</a></p>\n","date":"2020-01-07T00:00:00.000Z","readingTime":13,"title":"Criando uma aplicação em Nodejs","categories":["artigos"],"tags":["aplicacao-em-node","nodejs"],"description":"Fala dev, tudo bem? Neste artigo vamos criar nossa primeira aplicação em Nodejs, então sem mais conversa bora coda?","imgArticle":"/thumbnail-article/criando-app-nodejs.png","imgHome":"/thumbnail-home/criando-app-nodejs.png"},{"slug":"conhecendo-nodejs","content":"<p>Neste artigo vamos conhece e saber com mais detalhes sobre essa plataforma de desenvolvimento que vem evolucionando o mercado web. NodeJS, a final de contas o que é? Por que ele está dominando o mercado? Quais são suas características? Quais são os benefícios? Todas essas perguntas esse artigo se propõe a responde-las, então sem mais delongas vamos la !!</p>\n<h2>O que é NodeJS</h2>\n<ul>\n<li>JavaScript no back-end;\n<ul>\n<li>Não lidamos com eventos do usuário final;</li>\n<li>Rotas e integrações;</li>\n</ul></li>\n<li>Plataforma (não linguagem);</li>\n<li>Construída em cima da <a href=\"https://v8.dev/\" target=\"_blank\" rel=\"noopener\">engine V8</a>;</li>\n<li>Comparável a PHP / Ruby / Python / Go;</li>\n</ul>\n<p><em>NodeJs</em> nos possibilita utilizar a linguagem <em>JavaScript</em> no <em>back-end</em>, o <em>back-end</em> é tudo o que o usuário não enxerga, ou seja, todo parte visual de um determinado site, cliques de botões, imagens, vídeos, áudios e links. O back-end é uma camada onde fica a regra de negócio da aplicação, a comunicação com banco de dados, integrações de serviços de terceiros como por exemplo plataformas de pagamentos, sistema de notas fiscais. Outra coisa que temos que levar em conta, quando iniciamos os estudos em <em>NodeJS</em> é que não vamos lidar com nenhum tipo de evento vinda do usuário final, ou seja, não vamos fazer nenhum tratamento com cliques em botões, passar o mouse por cima de algum elemento, que é dessa forma que o JavaScript é utilizado nos navegadores, quando estamos desenvolvendo em NodeJs a única forma de ouvir eventos dos usuários é usando as rotas, ou seja, quando o usuário acessa alguma url e disparamos alguma resposta para o <em><strong>client-server.</strong></em></p>\n<p><img src=\"/uploads/2019/12/O-que-é-NodeJS-1024x427.jpg\" alt=\"\"></p>\n<p>NodeJS não é uma linguagem de programação, vejo vários programadores fazendo essa confusão. NodeJS é uma plataforma para desenvolvimento <em>back-end</em>, ele foi construído em cima da engine V8, V8 é o motor que está por trás do navegador Google Chrome, ele utiliza dessa engine para conseguir roda códigos JavaScript no back-end, isso faz com que ele seja muito rápido e conseguimos usar todos os recursos disponíveis na linguagem JavaScript no back-end. Podemos comparar o NodeJS com linguagens como PHP, Ruby, Python, GO que também rodam no <em>back-end</em>, ou qualquer outra que se aplique no lado do back-end.</p>\n<h3>O que é NPM e YARN ?</h3>\n<p><img src=\"/uploads/2019/12/detective-1424831_640-297x300.png\" alt=\"\"></p>\n<ul>\n<li>Instalar bibliotecas de terceiros;</li>\n<li>Fornece bibliotecas</li>\n</ul>\n<p>Antes de falarmos algumas características do NodeJS em relação as linguagens mais tradicionais, temos que falar um pouco sobre os gerenciadores de pacotes que temos, exemplos são o <strong><em>NPM</em></strong> e o <strong><em>Yarn</em></strong> os dois são ferramentas similares. Esses gerenciadores nos permitem que fazemos instalações de pacotes de terceiros, exemplo, digamos que nossa aplicação precise de alguma <strong><em>lib</em></strong> de pagamentos como exemplo o PagSeguro, Paypal, geralmente não criamos do zero, apenas instalamos em nossos projetos e utilizamos. Podemos também fornecer nossas próprias bibliotecas e disponibiliza-las através desses gerenciadores de pacotes através de um repositório global. Podemos comparar o <strong><em>NPM</em></strong> e o <strong><em>Yarn</em></strong> com alguns gerenciadores de outras linguagens tais como:</p>\n<ul>\n<li>Composer do PHP;</li>\n<li>Gems do Ruby;</li>\n<li>PIP do Python</li>\n</ul>\n<h3>Principais Características</h3>\n<p>Vamos explorar algumas das características do Node e entender o porque que ele está tão “famoso” e dominando a maior parte do mercado.</p>\n<ul>\n<li>Arquitetura Event-loop\n<ul>\n<li>Baseada em eventos (Rotas na maiorias das vezes);</li>\n<li>Call Stack</li>\n</ul></li>\n<li>Node single-thread;\n<ul>\n<li>C++ por trás com libUV;</li>\n<li>background threads;</li>\n</ul></li>\n<li>Non-blocking I/O</li>\n</ul>\n<p>O Node segue uma arquitetura bem diferente das tradicionais, essa arquitetura se chama <em>Event-loop</em> ela é totalmente baseada em eventos e tem um ponto central que é o <strong>call Stack</strong>. <em>O call stack</em> nada mais é do que uma pilha de eventos, podemos imagina um evento como se fosse uma função, e o Node processa através de um loop eterno, onde o mesmo fica verificando se existe alguma nova função, e executa em formato de pilha, caso tenha interesse em estudar com mais detalhes, recomendo o treinamento <a href=\"http://bit.ly/tipscode-curso-programador-full-stack-javascript\" target=\"_blank\" rel=\"noopener\"><strong>INCRÍVEL E COM UMA METODOLOGIA INOVADORA DE ENSINO</strong> PROGRANADOR FULL STACK JAVASCRIPT em 8 SEMANAS</a>. Outra característica do Node é que ele é <strong><em>single-thread</em></strong>, ou seja, ele executa o processo em apenas um core do processador, mesmo que tenha vários cores, porém como ele utiliza várias libs do C++ por trás, e a mais famosa é a <strong><em>libuv</em></strong>, essa lib permite que utilizamos <em>multitheads</em>, isso que dizer que por baixo dos panos estamos utilizando mais de uma thread do processador, deixando nossa aplicação mais rápida. Outra característica muito poderosa do Node é o <strong><em>Non-blocking I/O</em></strong> traduzindo para português que dizer input e output não bloqueante, isso que dizer que quando é feita uma requisição para o Node, exemplo digamos que pedimos uma listagem de compras, não precisamos mandar a lista completa, conseguimos fazer essa listagem por partes, a conexão não será bloqueada, isso não acontece por exemplo em PHP que no momento que fazemos a requisição ela é respondida e a conexão é fechada imediatamente.</p>\n<h3>Conceito Client-Server (Cliente - Servidor)</h3>\n<p>Algo de extrema importância para quem quer estudar e desenvolver aplicações com o NodeJs é entender o conceito de cliente-server, mas o que é um servidor? O servidor nada mais é do que uma aplicação com diversos serviços e pode ser requisitados por outras aplicações, já o client é uma aplicação capaz de fazer requisições para aplicação servidora, normalmente essas aplicações são executadas em maquinas distintas, mas por se trata de aplicações nada impede das duas coexista em uma mesma máquina, isso é muito comum no estágio do desenvolvimento.</p>\n<p><img src=\"/uploads/2019/12/client-server-1024x487.jpg\" alt=\"\"></p>\n<p>Para que essa comunicação exista entre cliente e um servidor é necessário que ambas obedeça algumas regras de troca de mensagens, ou seja, um protocolo padrão de comunicação, no universo web, no lado do cliente estão os navegadores, google chrome, Firefox entre outros, no lado de servidores web conhecidos também como servidores HTTP, exemplos o apache e tomcat. A dinâmica é simples, a aplicação do lado do cliente é responsável por enviar uma requisição (request) para aplicação servidora, o mesmo faz todas as tratativas e enviar uma resposta (response) e por fim a aplicação cliente renderia todos os dados em tela.</p>\n<p><img src=\"/uploads/2019/12/Comunicação-entre-client-e-server-1024x427.jpg\" alt=\"\"></p>\n<h3>Conclusões</h3>\n<p>Chegamos ao fim de mais um artigo, espero que tenha conseguido esclarece um pouco mais sobre o NodeJs, deixar seu comentário, vamos discutir mais sobre o assunto, feedbacks é muito bem-vindos e vão me ajudar a criar ainda mais conteúdo e com mais qualidade para vocês, até a próxima !</p>\n<h3>Programador Full Stack JavaScript em 8 Semanas</h3>\n<p>Se você quer se tornar um desenvolvedor web de alta qualidade, que irá conseguir as melhores vagas, você precisa ter uma base sólida de conhecimentos e uma visão geral de como o mercado funciona.</p>\n<p>JavaScript (HTML5, CSS3 e Lógica de Programação);</p>\n<p>NodeJs (Back-End usando o Express);</p>\n<p>CSS3 (Framework Bulma);</p>\n<p>React</p>\n<p>Git e GitHub.</p>\n<p>Fazer deploy da aplicação;</p>\n<p>Esse curso é um dos mais completos e atualizados do mercado que já vi, o Professor o <a href=\"https://www.linkedin.com/in/leonardo-scorza-7aba352b\" target=\"_blank\" rel=\"noopener\">Leonardo Scorza</a> tem uma didática incrível e <strong>INOVADORA</strong>, além de ter uma vasta EXPERIÊNCIA no mercado <strong>NACIONAL</strong> E <strong>INTERNACIONAL.</strong> Neste curso você realmente vai aprender e domina o JavaScript e seu ecossistema para ser torna um verdadeiro desenvolvedor Full Stack.</p>\n<p><img src=\"/uploads/2020/01/banner-de-chamada-para-dentro-dos-artigos-1024x304.jpg\" alt=\"\"></p>\n<p>[</p>\n<h6>Garanta já sua Vaga !</h6>\n<p>Programador Full Stack em 8 SEMANAS!</p>\n<p>](/programador-fullstack-8-semanas)</p>\n<p>https://www.youtube.com/watch?v=apg0tmnWERE&amp;t=26s</p>\n","date":"2020-01-01T00:00:00.000Z","readingTime":5,"title":"Conhecendo NodeJs","categories":["artigos"],"description":"Neste artigo vamos conhece e saber com mais detalhes sobre essa plataforma de desenvolvimento que vem evolucionando o mercado web. NodeJS, a final de contas o que é? Por que ele está dominando o mercado? Quais são suas características? Quais são os benefícios? Todas essas perguntas esse artigo se propõe a responde-las, então sem mais delongas vamos la !!","imgArticle":"/thumbnail-article/conhecendo-nodejs.png","imgHome":"/thumbnail-home/conhecendo-nodejs.png"},{"slug":"instalando-nodejs-no-manjaro","content":"<p>O artigo de hoje, vou está ensinando como instalar o NodeJS e o gerenciador de pacotes Yarn na distribuição <strong>Manjaro Linux</strong>, sou usuário dessa distro há mais de quatro anos e sou apaixonado por ela, esse artigo foi um pedido de um membro da nossa comunidade oficial do manjaro no telegram, caso queira participar clique aqui.</p>\n<h2>Instalando o NodeJS no Manjaro</h2>\n<p>Primeiro passo é acessar o site oficial do <a href=\"https://nodejs.org/en/\" target=\"_blank\" rel=\"noopener\">NodeJs</a>.</p>\n<p><img src=\"/uploads/2019/12/Site-nodejs-1024x614.png\" alt=\"NodeJS\"></p>\n<p>No momento da criação desse artigo a versão 12.14.0 LTS é a mais recente, uma dica sempre procure instalar as versões LTS elas possuir um nível de confiabilidade maior. Aqui poderiamos instalar o Node clicando em Other Downloads e seguir os passos, ou abrir o pamac e instalar ou até mesmo abrindo o terminal e instalando por lá, mas isso poderia trazer algumas dores de cabeça quando quisemos atualizar ou até mesmo remover o NodeJs, então iremos fazer a instalação usando o <a href=\"https://github.com/nvm-sh/nvm\" target=\"_blank\" rel=\"noopener\">NVM - Node Version Manager</a> realizar a instalação com essa ferramente nos da alguns benefícios tais como:</p>\n<ul>\n<li>Instalar versões diferentes dentro da nossa máquina;</li>\n<li>Instalar versões mais atualizadas;</li>\n<li>Podemos mudar de versões do Node de acordo com o projeto que está sendo desenvolvido no momento.</li>\n</ul>\n<p>A instalação é bastante simples abra o site do NVM e role o scroll do mouse para a seção de installation and Update.</p>\n<p><img src=\"/uploads/2019/12/instalação-nvm.png\" alt=\"\"></p>\n<p>Aqui você pode instalar de duas formas, primeira usando o curl e segunda o wget, vou está usando o curl neste artigo, então vamos abrir o terminal do manjaro e copiar esse link</p>\n<pre><code>curl <span class=\"token operator\">-</span>o<span class=\"token operator\">-</span> https<span class=\"token operator\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span>raw<span class=\"token punctuation\">.</span>githubusercontent<span class=\"token punctuation\">.</span>com<span class=\"token operator\">/</span>nvm<span class=\"token operator\">-</span>sh<span class=\"token operator\">/</span>nvm<span class=\"token operator\">/</span>v0<span class=\"token punctuation\">.</span><span class=\"token number\">35.2</span><span class=\"token operator\">/</span>install<span class=\"token punctuation\">.</span>sh <span class=\"token operator\">|</span> bash\n</code></pre>\n<p>O seu terminal deverá fica assim:</p>\n<p><img src=\"/uploads/2019/12/instalando-nvm-vias-terminal-1024x437.jpg\" alt=\"\"></p>\n<p>Agora precisamos configurar algumas variáveis na nossa variável PATH que é nossa variável de ambiente, por padrão o manjaro vem com o bash, caso você use outro, da uma rápida pesquisada onde o arquivo se encontra, o bash está localizado no diretório /home normalmete ele vem oculto, para você visualizar ele abra seu diretório /home e pressione ctrl + H veja a imagem:</p>\n<p><img src=\"/uploads/2019/12/variavel-bash-1024x544.png\" alt=\"\"></p>\n<p>Copie o código que está no site:</p>\n<pre><code><span class=\"token keyword\">export</span> <span class=\"token constant\">NVM_DIR</span><span class=\"token operator\">=</span><span class=\"token string\">\"$([ -z \"</span>$<span class=\"token punctuation\">{</span><span class=\"token constant\">XDG_CONFIG_HOME</span><span class=\"token operator\">-</span><span class=\"token punctuation\">}</span><span class=\"token string\">\" ] &amp;&amp; printf %s \"</span>$<span class=\"token punctuation\">{</span><span class=\"token constant\">HOME</span><span class=\"token punctuation\">}</span><span class=\"token operator\">/</span><span class=\"token punctuation\">.</span>nvm<span class=\"token string\">\" || printf %s \"</span>$<span class=\"token punctuation\">{</span><span class=\"token constant\">XDG_CONFIG_HOME</span><span class=\"token punctuation\">}</span><span class=\"token operator\">/</span>nvm<span class=\"token string\">\")\"</span>\n<span class=\"token punctuation\">[</span> <span class=\"token operator\">-</span>s <span class=\"token string\">\"$NVM_DIR/nvm.sh\"</span> <span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;&amp;</span> \\<span class=\"token punctuation\">.</span> <span class=\"token string\">\"$NVM_DIR/nvm.sh\"</span> # This loads nvm\n</code></pre>\n<p>Seu arquivo .bashrc deverá ficar assim:</p>\n<p><img src=\"/uploads/2019/12/bashrc-1024x484.png\" alt=\"\"></p>\n<p>Para testar se realmente o nvm foi devidamente instalado, entre como superusuário e digite no terminal o seguinte código:</p>\n<pre><code>nvm <span class=\"token operator\">-</span>h\n</code></pre>\n<p>A saída do terminal deverá ser essa:</p>\n<p><img src=\"/uploads/2019/12/nvm-rodando-1024x594.jpg\" alt=\"\"></p>\n<p>Agora que já estamos com o nvm rodando em nossa máquina, vamos a instalação do NodeJS, abra seu terminal novamente entre como administrador, digite o código:</p>\n<pre><code>nvm alias <span class=\"token keyword\">default</span> <span class=\"token number\">12.14</span><span class=\"token number\">.0</span>\n</code></pre>\n<p><img src=\"/uploads/2019/12/nodejs-instalado-1024x595.jpg\" alt=\"\"></p>\n<p>Note que o npm já vem instalado por padrão, caso você se sinta mais aventado utilizando ele, fique a vontade, vamos agora instalar o YARN.</p>\n<h2>Instalando o YARN no Manjaro Linux</h2>\n<p>O Yarn trás consigo um leg de ferramentas bem mais avançadas, na hora de criar projetos NodeJs, React e React Native. Então vamos lá para instalação, primeiro vamos acessar o site oficial <a href=\"https://yarnpkg.com/lang/en/\" target=\"_blank\" rel=\"noopener\">www.yarnpkg.com</a> depois que abrir o site clique no botão INSTALL YARN e escolha o sistema operacional Arch Linux, veja a imagem:</p>\n<p><img src=\"/uploads/2019/12/escolha-arth.png\" alt=\"\"></p>\n<p>Abra o terminal e digite o seguinte código:</p>\n<pre><code>sudo pacman <span class=\"token operator\">-</span><span class=\"token constant\">S</span> yarn\n</code></pre>\n<p>Depois temos que configurar mais uma variável de ambiente, então abra seu diretório /home e edite o arquivo .bashrc com o seguinte código:</p>\n<pre><code><span class=\"token keyword\">export</span> <span class=\"token constant\">PATH</span><span class=\"token operator\">=</span><span class=\"token string\">\"$PATH:/opt/yarn-[version]/bin\"</span>\n</code></pre>\n<p><img src=\"/uploads/2019/12/variavel-de-yarn-1024x485.png\" alt=\"\"></p>\n<p>Por fim, vamos verificar se o yarn está funcionando corretamente, abra novamente o terminal e digite o seguinte código:</p>\n<pre><code>yarn <span class=\"token operator\">-</span>version\n</code></pre>\n<p>A saída no terminal deverá ser o número da versão do yarn.</p>\n<h2>Conclusão</h2>\n<p>E isso galera, espero ter ajudado vocês com esse tutorial como instalar o NodeJS e o gerenciador de pacotes Yarn em seu manjaro linux, por favor deixar seu comentário aqui em baixo com seu feedback ele é muito importante para a melhoria dos artigos, ate mais abraço !!</p>\n<h2>Venha Participar da nossa comunidade no Facebook</h2>\n<p>Ambiente saudável, onde tiramos dúvidas e teremos um contato mais direto!</p>\n<p><img src=\"/uploads/2020/01/Facebook-150x150.png\" alt=\"\"></p>\n<p><a href=\"https://web.facebook.com/groups/469979653689791/?ref=bookmarks\" target=\"_blank\" rel=\"noopener\">Entrar</a></p>\n","date":"2020-01-01T00:00:00.000Z","readingTime":3,"title":"Instalando o NodeJS e o Yarn no Manjaro Linux","tags":["linux","manjaro","nodejs"],"description":"O artigo de hoje, vou está ensinando como instalar o NodeJS e o gerenciador de pacotes Yarn na distribuição Manjaro Linux, sou usuário dessa distro há mais de quatro anos e sou apaixonado por ela, esse artigo foi um pedido de um membro da nossa comunidade oficial do manjaro no telegram, caso queira participar clique aqui.","imgArticle":"/thumbnail-article/node-manjaro.png","imgHome":"/thumbnail-home/node-manjaro.png"}],"count":83},"Navigation/0-0-4-0-0":{"expanded":false,"persistent":false},"Icon1/0-0-4-0-0-0-0-0-0-1-0":{"persistent":false},"LeadForm/0-0-4-0-1-1-0-0":{"loading":false,"persistent":false}},"page":{"image":"/image-1200x630.png","status":200,"locale":"pt-BR","title":"TipsCode - TipsCode","description":"TipsCode Descomplicando a Tecnologia"}}