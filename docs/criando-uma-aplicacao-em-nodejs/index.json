{"instances":{"application":{"persistent":false},"FacebookPixel/0-0-0-0-0":{"persistent":false},"GoogleAnalytics/0-0-0-0-1":{"persistent":false},"Article_Articles/0-0-12/criando-uma-aplicacao-em-nodejs":{"persistent":false,"slug":"criando-uma-aplicacao-em-nodejs","content":"<p>Fala dev, tudo bem? Neste artigo vamos criar nossa primeira <strong>aplicação em Nodejs,</strong> então sem mais conversa bora coda?</p>\n<h3>Instalando o Nodejs e o Yarn</h3>\n<p>Temos dois artigos aqui no site, onde ensino passo a passo a instalação do Nodejs e o Yarn, no artigo ensino instalar no Linux, caso você use o da uma pesquisada no Google é bem simples a instalação.</p>\n<p><a href=\"/conhecendo-nodejs/\">Instalando o NodeJS</a></p>\n<p><a href=\"/instalando-nodejs-no-manjaro/\">Instalando o Yarn</a></p>\n<p>Agora vamos colocar a mão na massa. Siga os passos a baixo !!</p>\n<ul>\n<li>Passo 01: Crie um diretório [nome você escolhe];</li>\n<li>Passo 02: Entre neste diretório que você criou;</li>\n<li>Passo 03: Abra o terminal dentro do diretório;</li>\n<li>Passo 04: Escreva o seguinte código:</li>\n</ul>\n<pre><code>yarn init <span class=\"token operator\">-</span>y\n</code></pre>\n<p>Seu terminal deverá está parecido com esse:</p>\n<p><img src=\"/uploads/2020/01/Terminal-01.png\" alt=\"\"></p>\n<p><strong>aplicação em Nodejs,</strong></p>\n<p>O comando <em>yarn init -y</em> cria um arquivo chamado <em>package.json</em>, vamos abrir o nosso editor de código, neste artigo estarei usando o <em>vccode</em>, mas fique a vontade para usa um de sua preferencia.</p>\n<p><img src=\"/uploads/2020/01/visualcode-aberto.png\" alt=\"\"></p>\n<p><strong>aplicação em Nodejs,</strong></p>\n<p>O arquivo package.json contém algumas informações, tais como o nome da aplicação, a versão, o arquivo base e a licença, porém essas informações só serão utilizadas caso o nosso projeto fosse ser disponibilizado para terceiro, caso contrário não vamos fazer uso. O package.json tem é responsabilidade por gerenciar nossos módulos e dependências, ou seja, tudo que instalarmos de terceiros vai ficar neste arquivo..</p>\n<h2>Instalando express</h2>\n<p>O Express é um microframework do Nodejs, o Express vai nos dá algumas funcionalidades padrão e irá facilitar muito a nossa vida. Claro que o Express é bem mais complexo do que citei, caso você tenha interesse em estudar e aprender de forma 100% prática com projetos reais CLIQUE AQUI. Então vamos instalar o Express em nosso projeto com o seguinte comando.</p>\n<pre><code>yarn add express\n</code></pre>\n<p><img src=\"/uploads/2020/01/package.jpg\" alt=\"\"></p>\n<p><strong>aplicação em Nodejs</strong></p>\n<p>Observe que o arquivo package.json foi alterado, agora temos um objeto com o nome “dependencies” e o nosso Express com o número da versão atual, isso é muito importante pois se outro programador pegar o nosso projeto ele não precisará o Express na mão, só é necessário executar o seguinte comando no terminal yarn e automaticamente todas as dependências serão instaladas.</p>\n<h2>Arquivo Raiz</h2>\n<p>Vamos criar nosso arquivo raiz, nele será escrito a base de toda a aplicação, então vamos criar o o nome &quot;index.js&quot; outro nome bastante utilizado é o &quot;app.js&quot; fica a sua escolha beleza, neste arquivo vamos escrever o seguinte código:</p>\n<pre><code><span class=\"token keyword\">const</span> express <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'express'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> server <span class=\"token operator\">=</span> <span class=\"token function\">express</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\nserver<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/teste'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span><span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Estamos no caminho certo !!'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\nserver<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">3000</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>Começamos importando o Express, a partir deste momento todas as funcionalidades que o Express expõe vai está presente na variável &quot;express&quot;. Agora vamos iniciar nosso servidor criando uma const &quot;server&quot; e instanciando o express. Para vermos isso funcionando precisamos criar nossa primeira rota, existem quatro tipos de métodos de rotas diferentes, são ele o get, post, put e o delete. Na linha 5 estamos falando o seguinte, oh quando a url /teste for chamada execute a função console.log() e exiba a mensagem no terminal. Vamos iniciar servidor, para fazer isso precisamos que ele escute alguma porta, então na linha 9 estamos mandando o servidor fica ouvindo a porta 3000, vamos testar, abra o terminal, e execute seguinte comando:</p>\n<pre><code>node index<span class=\"token punctuation\">.</span>js \n</code></pre>\n<p>Abra navegador e digite na barra de endereço: <em><strong>https://localhost:3000/teste.</strong></em> Note que o navegador ficou carregando, isso está acontecendo porque ele está esperando alguma resposta do nosso servidor, se formos olhar no terminal, veremos que a mensagem que escrevemos na função <em>consolo.log()</em> está aparecendo. Para paramos a execução do servidor no terminal, pressionamos ás teclas ( ctrl + c ).</p>\n<h3>Passando um retorno para o front-end</h3>\n<pre><code><span class=\"token keyword\">const</span> express <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'express'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> server <span class=\"token operator\">=</span> <span class=\"token function\">express</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\nserver<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/teste'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hello world'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\nserver<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">3000</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>Essa função que criamos depois do &quot;/teste&quot; ela possui dois parâmetros o &quot;req&quot; e o &quot;res&quot; o req representa todos os dados da nossa requisição, o usuário pode enviar vários parâmetros através do req são eles:</p>\n<p>Query Params;</p>\n<p>Route Params;</p>\n<p>request body</p>\n<p>Não vou entrar em detalhes neste artigo aqui sobre, caso você tenha interesse em se aprofunda em Nodejs te recomendo o nosso curso <a href=\"http://bit.ly/tipscode-curso-programador-full-stack-javascript\" target=\"_blank\" rel=\"noopener\">Programador Full Stack JavaScript em 8 semanas!</a> la explicamos tudo com detalhes e exemplos, criando na prática aplicações reais usando o Nodejs. No parâmetro &quot;res&quot; vamos ter todas as informações que precisamos para retorna uma resposta para o meu front-end, então vamos retorna um simples texto usando a função send(). Para testar rode o seguinte comando no terminal:</p>\n<pre><code>node index<span class=\"token punctuation\">.</span>js\n</code></pre>\n<p>Abra o navegador e digite localhost:3000/teste</p>\n<p><img src=\"/uploads/2020/01/Retorno-com-sucesso.png\" alt=\"\"></p>\n<p><strong>aplicação em Nodejs,</strong></p>\n<p>Uma API normalmente não retornar texto, e sim formatos como JSON ou XML, para enviamos um JSON por exemplo, vamos ao código:</p>\n<pre><code><span class=\"token keyword\">const</span> express <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'express'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> server <span class=\"token operator\">=</span> <span class=\"token function\">express</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\nserver<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/teste'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">message</span><span class=\"token operator\">:</span> <span class=\"token string\">'Hello World'</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\nserver<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">3000</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>Faça o mesmo procedimento para executar o código e agora temos uma API retornando um json.</p>\n<h3>Criando as rotas post, put e delete</h3>\n<p>Para podemos testar esses métodos, vamos precisar de uma ferramente, neste artigo vou usar o <a href=\"https://insomnia.rest/download/\" target=\"_blank\" rel=\"noopener\">Insomnia</a>, tem versão para Mac, Linux e Windows existe também o <a href=\"https://www.getpostman.com/\" target=\"_blank\" rel=\"noopener\">postman</a>, fique a vontade na escolha.</p>\n<p>Antes de criamos nossos métodos com o Insomnia, precisamos entender um pouco sobre como funciona os métodos e como podemos captura-los através da url, vamos a um exemplo. Vamos ao navegador e digitamos o seguinte: <a href=\"http://localhost:3000/teste?nome=Joao\" target=\"_blank\" rel=\"noopener\">http://localhost:3000/teste?nome=Joao</a></p>\n<p><img src=\"/uploads/2020/01/nenhum-retorno.png\" alt=\"\"></p>\n<p><strong>aplicação em Nodejs,</strong></p>\n<p>Não temos nenhum feedback visual, pelo menos por enquanto, mas digamos que queremos que o nome que digitamos na barra do navegador apareça no corpo da mensagem, vamos ao código:</p>\n<pre><code><span class=\"token keyword\">const</span> express <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'express'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> server <span class=\"token operator\">=</span> <span class=\"token function\">express</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\nserver<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/teste'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span><span class=\"token punctuation\">{</span>\n    \n    <span class=\"token keyword\">const</span> nome <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span>query<span class=\"token punctuation\">.</span>nome\n\n    <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">message</span><span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Buscando o usuário </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>nome<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> </span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">}</span> <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\nserver<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">3000</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>Criamos uma const chamada &quot;nome&quot; onde essa variável receberá o req.query.nome, ou seja, então a variável nome irá receber o conteúdo que digitamos lá no navegador, e para mostrar esse nome, vou usar um recurso novo do JavaScript que é as templates string. Bom com essa alteração, podemos continuar nossa API, lembrando que temos um super treinamento onde passamos por cada detalhe do Nodejs para sabe mais <a href=\"http://bit.ly/tipscode-curso-programador-full-stack-javascript\" target=\"_blank\" rel=\"noopener\">clique aqui</a>.</p>\n<h3>Capturando um id pela url</h3>\n<p>Abra seu navegador e digite <a href=\"https://localhost/teste/1\" target=\"_blank\" rel=\"noopener\">https://localhost/teste/1</a></p>\n<pre><code><span class=\"token keyword\">const</span> express <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'express'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> server <span class=\"token operator\">=</span> <span class=\"token function\">express</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\nserver<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/teste/:id'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> id <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">.</span>id\n\n    <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">message</span><span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Buscando o usuário </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>id<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\nserver<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">3000</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>Vamos fazer uma pequena alteração em nosso código para capturamos o nosso ID:</p>\n<pre><code>server<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/teste/:id'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> id <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">.</span>id\n\n    <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">message</span><span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Buscando o usuário </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>id<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>Com essa pequena alteração, conseguimos capturar o id especifico digitado na url do navegador. Agora vamos abrir nossa ferramente para realizamos nossos testes.</p>\n<p><img src=\"/uploads/2020/01/Insomnia-1024x537.png\" alt=\"\"></p>\n<p><strong>aplicação em Nodejs,</strong></p>\n<h3>Criando Requisições</h3>\n<p>Abra seu navegador e digite <a href=\"https://localhost/teste/1\" target=\"_blank\" rel=\"noopener\">https://localhost/teste/1</a></p>\n<p><img src=\"/uploads/2020/01/Insomnia-criando-rota.png\" alt=\"\"></p>\n<p><img src=\"/uploads/2020/01/sucesso-insomnia.png\" alt=\"\"></p>\n<p><strong>aplicação em Nodejs,</strong></p>\n<h3>Melhorando nossa API</h3>\n<pre><code><span class=\"token keyword\">const</span> express <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'express'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> server <span class=\"token operator\">=</span> <span class=\"token function\">express</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> users <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'Tipscode'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Dukeza'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Tux'</span><span class=\"token punctuation\">]</span>\n\nserver<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/teste/:index'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> index <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span>params\n\n    <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span>users<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\nserver<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">3000</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>Precisamos salvar esses usuários em algum lugar da aplicação, como esse artigo não se propõe a mostrar nenhum banco de dados, não vamos utilizar dessa forma. O Nodejs quando é executado ele guarda em memoria todas as variáveis criadas no projeto, e o legal é que elas não são recriadas quando o usuário faz uma nova requisição, então vamos criar um array “users” para guarda esses usuários, em nosso parâmetro ao invés de receber o id vou pegamos o index que é a posição do usuário e no retorno, retornamos só users que é nosso array de acordo com a posição do index.</p>\n<h3>Finalizando API</h3>\n<p>CRUD - Create, Read, Update, Delete</p>\n<p>Nossa aplicação está começando a ganha forma. Nesta parte, vamos escrever o GRUD na nossa aplicação, GRUD significa create, read, update e delete, não vou foca em explicar detalhadamente se não o artigo ficará muito grande, mas basicamente nossa API vai criar um usuário, listar, alterar e deleta esses usuários. Vamos ao código fazer essas modificações.</p>\n<h3>Listando usuários</h3>\n<pre><code><span class=\"token keyword\">const</span> users <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'Tipscode'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Dukeza'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Tux'</span><span class=\"token punctuation\">]</span>\n\nserver<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/users'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span>users<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>Criarmos uma rota, onde lista todos os usuários essa função não precisa receber parâmetros, apenas um json com todos os usuários que estiver em memória. Vamos abrir o Insomnia para testar a lista de usuários.</p>\n<p><img src=\"/uploads/2020/01/Listando-usuários-1024x281.jpg\" alt=\"\"></p>\n<h3>Criando usuário</h3>\n<p>Vamos ao código</p>\n<pre><code>server<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/users'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> name <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span>body\n\n    users<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span>users<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>Criamos uma const “name” onde receberá o corpo da requisição, depois fazemos users.push(name) e o médoto push() adiciona ao array o elemento que passamos, neste caso o conteúdo da variável “nome” e por fim retornamos esse users. Salvamos e executamos o código com node index.js, agora vamos abrir o insommnia e criar as requisições para testamos nossa aplicação. Veja a figura abaixo.</p>\n<p><img src=\"/uploads/2020/01/Método-post-1024x425.jpg\" alt=\"\"></p>\n<p><strong>aplicação em Nodejs,</strong></p>\n<p><img src=\"/uploads/2020/01/Erro-método-1024x301.jpg\" alt=\"\"></p>\n<p><strong>aplicação em Nodejs,</strong></p>\n<p>Veja que deu um erro, isso aconteceu por que o express tem várias formas de receber o corpo da requisição, uma delas é o json, vamos usar o json na maiorias das vezes, mas precisamos dizer isso ao express, oh express vamosa usar o formato json beleza, passando isso para o código escrevemos o seguinte:</p>\n<pre><code>server<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>express<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>Vamos testar novamente !!</p>\n<p><img src=\"/uploads/2020/01/criar-e-lista-funcionando-1024x463.jpg\" alt=\"\"></p>\n<p><strong>aplicação em Nodejs,</strong></p>\n<p>Agora nossa aplicação está fazendo as duas operações básicas do GRUD, criando usuário e listando usuário, vamos agora editar esse usuário.</p>\n<h3>Editando usuário</h3>\n<p>Para fazer a alteração do usuário precisamos saber qual o usuário especifico para editar, então precisamos localizar esse usuário, para fazermos isso, precisamos percorrer o nosso array e identificar o usuário na posição do array. Vamos ao código!</p>\n<pre><code>server<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/users/:index'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> index <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span>params\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> name <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span>body\n\n    users<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> name\n\n    <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span>users<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>Primeiro vamos fazer uma alteração no parâmetro da função put(), /users/:index' esse trecho de código que dizer que tudo depois da /: conseguimos captura, depois criamos uma variável “index” e atribuímos o re.params, ou conteúdo do index lá da url será guardada na variável index que criamos, depois criamos outra variável com o nome “name” recebendo o req.body, ou seja, todo o corpo da requisição. Para finalizamos, setamos o array users na posição do índice que capturamos e atribuímos ao name, por fim retornarmos um json com o array users. Agora vamos testar usando a ferramente Insomnia.</p>\n<p><img src=\"/uploads/2020/01/editando-usuário-1024x301.jpg\" alt=\"\"></p>\n<p><strong>aplicação em Nodejs,</strong></p>\n<h3>Deletando usuário</h3>\n<pre><code>server<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/users/:index'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> index <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span>params\n\n    users<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>Para deleta usamos o método delete(), precisamos também identificar qual usuário deletar, então vamos usar a mesma estratégia do editar, capturando o índice do array, e ai usamos o método splice() basicamente ele percorre todo o array, vai chegar no índice que passamos, ele deleta a posição a partir do elemento encontrado.</p>\n<p><img src=\"/uploads/2020/01/Deletando-sucess-1024x564.jpg\" alt=\"\"></p>\n<p><strong>aplicação em Nodejs,</strong></p>\n<p>Nossa aplicação em NodeJS está pronta, estamos realizando as quatro tarefas básicas do CRUD são elas criar, listar, editar e deletar. Caso você queira clona o código, segue o link do repositório no GitHub <a href=\"https://github.com/alissonsuassuna/crud-nodejs\" target=\"_blank\" rel=\"noopener\">clique aqui</a>.</p>\n<p><a href=\"/programador-fullstack-8-semanas\"><img src=\"/uploads/2020/01/banner-Porgramador-full-stack-Javascript-1024x1024.png\" alt=\"\"></a></p>\n<h3>Se torne um desenvolvedor FULL STACK em apenas 8 SEMANAS</h3>\n<p>O maior treinamento online de JAVASCRIPT voltado 100% para o MERCADO DE TRABALHO. Você vai aprender JavaScript, Lógica de Programação, HTML5, CSS3, Bulma, NodeJs, Express, React, Git, Github.</p>\n<p><a href=\"/programador-fullstack-8-semanas\">Quero Participar</a></p>\n","date":"2020-01-07T00:00:00.000Z","readingTime":13,"title":"Criando uma aplicação em Nodejs","categories":["artigos"],"tags":["aplicacao-em-node","nodejs"],"description":"Fala dev, tudo bem? Neste artigo vamos criar nossa primeira aplicação em Nodejs, então sem mais conversa bora coda?","imgArticle":"/thumbnail-article/criando-app-nodejs.png","imgHome":"/thumbnail-home/criando-app-nodejs.png"},"Navigation/0-0-12-0-0":{"expanded":false,"persistent":false},"Icon1/0-0-12-0-0-0-0-0-0-1-0":{"persistent":false}},"page":{"image":"/thumbnail-article/criando-app-nodejs.png","status":200,"locale":"pt-BR","title":"Criando uma aplicação em Nodejs - [dev] TipsCode","description":"Fala dev, tudo bem? Neste artigo vamos criar nossa primeira aplicação em Nodejs, então sem mais conversa bora coda?"}}