{"instances": {"application":{},"n-0-0-0-0":{},"n-0-0-10":{"slug":"let-e-const-no-javascript-entenda-as-diferenca-de-uma-vez-por-todas","content":"<p>Neste artigo, vou lhe mostrar alguns pontos sobre as diferenças entre <strong>let e const no javascript</strong>, duas novas palavras-chave adicionadas ao JavaScript com a chegada da versão ES6 (<a href=\"https://youtu.be/PlFlKxZbVqs\" target=\"_blank\" rel=\"noopener\">caso você queira entender mais sobre esse tal ES6 tem um vídeo no canal sobre isso</a>), essa mesma que mudou muito o jeito que alguns via a linguagem. Essa versão trouce muitas que aprimoraram.</p>\n<p>Este artigo é um dos muitos que cobrem novos recursos de JavaScript introduzidos com <strong>ES6</strong>, incluindo <strong>Map</strong> e <strong>WeakMap</strong>, <strong>Set</strong> e <strong>WeakSet</strong>, novos métodos disponíveis para <strong>String</strong> , <strong>Number</strong> e <strong>Array</strong>, e a nova sintaxe disponível para funções.</p>\n<h2>Palavra reservada let</h2>\n<p>Até ES5, JavaScript tinha apenas dois tipos de escopo, o <strong>escopo de função</strong> e <strong>escopo global</strong>. Isso causou muita frustração e comportamentos inesperados para os desenvolvedores vindos de outras linguagens como C, C ++ ou Java. JavaScript não tinha escopo de bloco, o que significa que uma variável só pode ser acessada dentro do bloco no qual está definida. Um bloco é tudo dentro de uma chave de abertura e fechamento. Vamos dar uma olhada no seguinte exemplo:</p>\n<pre><code><span class=\"token keyword\">function</span> <span class=\"token function\">fora</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> dentroV <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>dentroV <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> dentroF <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>dentroV<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// saída 1</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>dentroF<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// saída 2</span>\n  <span class=\"token punctuation\">}</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>dentroV<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// saída 1</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>dentroF<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// saída 2</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">fora</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>Depois de executar esse código, você verá a seguinte saída no console:</p>\n<pre><code><span class=\"token number\">1</span>\n<span class=\"token number\">2</span>\n<span class=\"token number\">1</span>\n<span class=\"token number\">2</span>\n</code></pre>\n<p>O que a maioria dos desenvolvedores vindos das linguagens mencionadas acima esperariam é que a função <strong>fora()</strong> do bloco do <strong>if</strong> você não pode acessar a variável <strong>dentoF</strong>. Por exemplo, executar o código equivalente em C resulta no erro 'dentroF' undeclared at line …que se refere ao uso da variável &quot;dentroF&quot; fora do if.</p>\n<p><a href=\"/ebook-gratuito-html\"><img src=\"/uploads/2020/09/ebook-guia-completo-html.png\" alt=\"Ebook HTML\"></a></p>\n<p>Ebook HTML</p>\n<p>Esta situação mudou no ES6 com a disponibilidade do escopo do bloco. Os membros da organização ECMA sabiam que não podiam alterar o comportamento da palavra-chave var, pois isso quebraria a compatibilidade com versões anteriores. Então, eles decidiram introduzir uma nova palavra-chave chamada let. O último pode ser usado para definir variáveis ​​que limitam seu escopo ao bloco em que são declaradas. Além disso, ao contrário var, as variáveis ​​declaradas usando let não são içadas . Se você referenciar uma variável em um bloco antes que a <strong>let</strong> declaração dessa variável seja encontrada, isso resultará em a <strong>ReferenceError</strong>. Mas o que isso significa na prática? É bom apenas para iniciantes? De modo nenhum!</p>\n<p>Para explicar por que você vai gosta de usa o <strong>let</strong>, considere o seguinte código retirado do meu artigo:</p>\n<pre><code><span class=\"token comment\">// Código HTML</span>\n<span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>utf-8<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>TipsCode<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span>Palavra reservada <span class=\"token constant\">VAR</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>var<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Clique <span class=\"token number\">01</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>var<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Clique <span class=\"token number\">02</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>var<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Clique <span class=\"token number\">03</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token keyword\">var</span> nodes <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementsByTagName</span><span class=\"token punctuation\">(</span><span class=\"token string\">'button'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> nodes<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  nodes<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'You clicked element #'</span> <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// JS</span>\n<span class=\"token keyword\">var</span> nodes <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelectorAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">'button'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> nodes<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  nodes<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Você clicou no Elemento'</span> <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>Aqui você pode reconhecer um problema conhecido que vem da declaração de variáveis, seu escopo e manipuladores de eventos.</p>\n<p><img src=\"/uploads/2020/11/Problemas-no-var.png\" alt=\"\"></p>\n<p>Código sendo executado no Codepen</p>\n<p>Graças ao <strong>ES6</strong>, podemos facilmente resolver esse problema declarando a variável <strong>i</strong> no <strong>loop for</strong> usando <strong>let</strong></p>\n<pre><code><span class=\"token comment\">// html</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>utf-8<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>TipsCode<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span>Palavra reservada <span class=\"token constant\">LET</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>let<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Clique <span class=\"token number\">01</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>let<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Clique <span class=\"token number\">02</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>let<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Clique <span class=\"token number\">03</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token comment\">// js</span>\n<span class=\"token keyword\">var</span> nodes <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelectorAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">'button'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> nodes<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  nodes<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Você clicou no Elemento '</span> <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><img src=\"/uploads/2020/11/resolvido-com-let.png\" alt=\"let e const no javascript\"></p>\n<p>let</p>\n<p>A declaração <strong>let</strong> é compatível com o Node e todos os navegadores modernos. Existem, no entanto, alguns truques no Internet Explorer 11 que você pode ler na tabela de compatibilidade do ES6.</p>\n<p>Uma demonstração ao vivo que mostra a diferença entre var e let é mostrada abaixo e também está disponível <a href=\"https://kangax.github.io/compat-table/es6/\" target=\"_blank\" rel=\"noopener\">aqui</a>:</p>\n<p>As palavras <strong><em>let e cont no javascript</em></strong>, veio realmente para levar o javascript para outro nível, já vimos um pouco com o let, agora vamos estudar o const.</p>\n<h2>Palavra Reservada Const</h2>\n<p>O <strong>const</strong> aborda a necessidade comum dos desenvolvedores de associar um nome <strong>mnemônico</strong> a um determinado valor, de forma que o valor não possa ser alterado (ou, em termos mais simples, defina uma constante).</p>\n<p>Por exemplo, se estiver trabalhando com fórmulas matemáticas, pode ser necessário criar um <strong>objeto Math</strong>. Dentro desse objeto, você deseja associar os valores de PI (π ) PI é um valor mnemônico.</p>\n<p>A palavra <strong>const</strong> permite que você alcance esse objetivo. Usando-o, você pode criar uma constante que pode ser <strong>global</strong> ou <strong>local</strong> para a função na qual é declarada.</p>\n<p>Constantes definidas com const seguem as mesmas regras de escopo das variáveis, mas não podem ser declaradas novamente. Constantes também compartilham um recurso com variáveis ​​declaradas usando o let fato de que têm escopo de bloco em vez de escopo de função (e, portanto, não são içadas).</p>\n<p>Caso tente acessar uma constante antes de ser declarada, você receberá um <strong>ReferenceError</strong>. Se você tentar atribuir um valor diferente a uma variável declarada com <strong>0</strong>, receberá um <strong>TypeError</strong>.</p>\n<pre><code><span class=\"token keyword\">const</span> fora<span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\nfora<span class=\"token punctuation\">.</span>dentro <span class=\"token operator\">=</span> <span class=\"token number\">37</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>fora<span class=\"token punctuation\">.</span>dentro<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 37</span>\n</code></pre>\n<p>Se você quiser tornar os valores de um objeto verdadeiramente imutáveis, use <a href=\"https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze\" target=\"_blank\" rel=\"noopener\">Object.freeze()</a>.</p>\n<p>O suporte dos navegadores com o recurso <strong>const</strong> é tão bom quanto para o <strong>let</strong>. A declaração <strong>const</strong> é compatível com o Node e todos os navegadores modernos.</p>\n<p>Veja um exemplo de uso do <strong>const</strong>:</p>\n<pre><code><span class=\"token string\">'use strict'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">fora</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> con1 <span class=\"token operator\">=</span> <span class=\"token number\">3.141</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>con1 <span class=\"token operator\">></span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> con2 <span class=\"token operator\">=</span> <span class=\"token number\">1.414</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>con1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// saída 3.141</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>con2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// saída 1.414</span>\n  <span class=\"token punctuation\">}</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>con1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// saída 3.141</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>con2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>ex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Cannot access con2 outside its block'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">fora</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p><img src=\"/uploads/2020/11/const-1024x411.png\" alt=\"let e const no javascript\"></p>\n<p>let e const no javascript</p>\n<h2>Conclusão</h2>\n<p>Neste tutorial, apresentei a você lete const, dois novos métodos para declarar variáveis ​​que foram apresentados à linguagem com ES6. Embora varnão vá desaparecer tão cedo, eu encorajo você a usar conste, letsempre que possível, reduzir a suscetibilidade do seu código a erros. Para ler mais, você também pode gostar de nossa dica rápida Como declarar variáveis ​​em JavaScript , que se aprofunda na mecânica da declaração de variáveis.</p>\n<h3>Recomendação</h3>\n","date":"2020-11-01T00:00:00.000Z","readingTime":9,"title":"Let e Const no JavaScript: Entenda as Diferença de uma vez por Todas","description":"Neste artigo, vou lhe mostrar alguns pontos sobre as diferenças entre let e const no javascript, duas novas palavras-chave adicionadas ao JavaScript com a chegada da versão ES6 ([caso você queira entender mais sobre esse tal ES6 tem um vídeo no canal sobre isso](https//youtu.be/PlFlKxZbVqs)), essa mesma que mudou muito o jeito que alguns via a linguagem. Essa versão trouce muitas que aprimoraram.","imgArticle":"/thumbnail-article/let-e-const.png","imgHome":"/thumbnail-home/let-e-const.png"},"n-0-0-10-0-0":{"expanded":false},"n-0-0-10-0-0-0-0-0-0-1-0":{}}, "page": {"image":"/image-1200x630.png","status":200,"locale":"pt-BR","title":"Let e Const no JavaScript: Entenda as Diferença de uma vez por Todas","description":"Neste artigo, vou lhe mostrar alguns pontos sobre as diferenças entre let e const no javascript, duas novas palavras-chave adicionadas ao JavaScript com a chegada da versão ES6 ([caso você queira entender mais sobre esse tal ES6 tem um vídeo no canal sobre isso](https//youtu.be/PlFlKxZbVqs)), essa mesma que mudou muito o jeito que alguns via a linguagem. Essa versão trouce muitas que aprimoraram."}}