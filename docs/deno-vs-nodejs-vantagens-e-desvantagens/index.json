{"instances": {"application":{},"n-0-0-0-0":{},"n-0-0-0-1":{},"n-0-0-0-2":{},"n-0-0-0-3":{},"n-0-0-10/deno-vs-nodejs-vantagens-e-desvantagens":{"slug":"deno-vs-nodejs-vantagens-e-desvantagens","content":"<p>Quando o <a href=\"https://youtu.be/Z-mGgOz5NEA\" target=\"_blank\" rel=\"noopener\">Deno<\/a> foi anunciado gerou bastante interesse na comunidade JavaScript, fiz até um vídeo lá no meu canal do Youtube explicando o que era esse tal de <a href=\"https://youtu.be/Z-mGgOz5NEA\" target=\"_blank\" rel=\"noopener\">Deno<\/a>. Existe muitas semelhanças entre as duas plataformas. No entanto, também existem diferenças <strong>importantes<\/strong>, o que significa que você não pode simplesmente substituir um pelo outro.<\/p>\n<p>Neste artigo vou analisar o Deno em relação ao seu “primo mais velho” o NodeJS para ajudar a entender o que eles têm em comum e o que os diferencia. (<a href=\"https://youtu.be/Z-mGgOz5NEA\" target=\"_blank\" rel=\"noopener\">Se você quiser conhecer Deno primeiro, confira o vídeo que fiz lá em nosso canal do Youtube<\/a>)<\/p>\n<p><img src=\"/uploads/2020/07/diferenças.jpg\" alt=\"Deno\"><\/p>\n<p>Figura 01: Diferenças<\/p>\n<h2>Suporte de Linguagem<\/h2>\n<p>Ambos os projetos tem como objetivo de leva a linguagem JavaScript para o backend, permitindo que o código JavaScript seja executado em um computador fora de um navegador da web. Vamos ver como eles se comparam em termos de suporte linguagem.<\/p>\n<h3>Node.js<\/h3>\n<p><img src=\"/uploads/2020/07/nodejs.png\" alt=\"Deno\"><\/p>\n<p>A versão atual do LTS do Node (v12.18.1 até a data de escrita deste artigo) ele suporta a sintaxe e os recursos modernos do JavaScript. Ele também suporta cerca de <strong>77% das especificações do ES2020<\/strong>. Os módulos <strong>ECMAScript<\/strong> também são suportados, mas atualmente são classificados apenas como <strong>experimentais<\/strong>: você precisa usar a extensão <strong><code>.mjs<\/code><\/strong> do arquivo ou adicionar a propriedade &quot;<strong>type<\/strong>&quot;: &quot;<strong>module<\/strong>&quot;ao <strong>package.json<\/strong> arquivo do seu projeto .<\/p>\n<p>Para executar o <strong>TypeScript<\/strong> (ou qualquer outra linguagem) no Node, o código precisa ser compilado no JavaScript que o mecanismo V8 pode executar. Existem várias maneiras diferentes de fazer isso, com diferentes prós e contras, portanto, começar a funcionar significa escolher um deles e seguir o processo de configuração necessário.<\/p>\n<h3>Deno<\/h3>\n<p><img src=\"/uploads/2020/07/deno-300x300.png\" alt=\"\"><\/p>\n<p>Não consegui encontrar nenhuma menção à especificação de JavaScript suportada pelo Deno, mas como ele também usa o V8 sob o capô, eu assumi um nível de suporte semelhante ao do Node. Meus próprios testes mostram que o Deno suporta recursos do ES2020 como <strong>Promise.allSettled()<\/strong> e a palavra-chave <strong>globalThis<\/strong>. Os módulos <strong>ECMAScript<\/strong> são o padrão, com os módulos <strong>CommonJS<\/strong> não suportados, a menos que você use a biblioteca de compatibilidade.<\/p>\n<p>O TypeScript é suportado como uma linguagem de primeira classe no Deno, o que significa que funciona imediatamente: não é necessário instalar ferramentas adicionais para transpilar para o JavaScript primeiro. Obviamente, o mecanismo V8 não oferece suporte nativo ao TypeScript, por isso o Deno ainda está transpilando o código, mas tudo isso é transparente para você como desenvolvedor.<\/p>\n<p>Também não consegui encontrar menção de qual versão do TypeScript Deno v1.0.1 usa, mas suporta encadeamento opcional e coalescência nula (mas não campos de classe privada) que o chamariam de TS 3.7.<\/p>\n<h3>APIs<\/h3>\n<p>Deno e Node expõem suas próprias APIs aos desenvolvedores, permitindo-nos escrever programas que podem realmente fazer coisas úteis, como ler e gravar arquivos, e enviar e receber solicitações de rede.<\/p>\n<h3>NodeJS<\/h3>\n<p>Quando o Node foi lançado pela primeira vez, não havia suporte interno para <a href=\"/promise-javascript-guia-completo/\">Promises<\/a>. Como resultado disso, a maioria das APIs para operações assíncronas foi gravada para receber um retorno de chamada:<\/p>\n<pre><code><span class=\"token keyword\">const<\/span> fs <span class=\"token operator\">=<\/span> <span class=\"token function\">require<\/span><span class=\"token punctuation\">(<\/span><span class=\"token string\">'fs'<\/span><span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">;<\/span>\nfs<span class=\"token punctuation\">.<\/span><span class=\"token function\">readFile<\/span><span class=\"token punctuation\">(<\/span><span class=\"token string\">'leia.txt'<\/span><span class=\"token punctuation\">,<\/span> <span class=\"token punctuation\">(<\/span><span class=\"token parameter\">err<span class=\"token punctuation\">,<\/span> data<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token operator\">=><\/span> <span class=\"token punctuation\">{<\/span>\n  <span class=\"token keyword\">if<\/span> <span class=\"token punctuation\">(<\/span>err<span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">{<\/span>\n    <span class=\"token comment\">// Tratamento do erro<\/span>\n  <span class=\"token punctuation\">}<\/span>\n  <span class=\"token comment\">// Casso contrário, trate os dados..<\/span>\n<span class=\"token punctuation\">}<\/span><span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">;<\/span>\n<\/code><\/pre>\n<p>Embora os desenvolvedores do Node agora tenham acesso ás <a href=\"/promise-javascript-guia-completo/\">Promises<\/a> e à sintaxe assíncrona as APIs ainda esperam retornos de chamada para manter a compatibilidade com versões anteriores.<\/p>\n<h3>Deno<\/h3>\n<p>A API do <a href=\"https://youtu.be/Z-mGgOz5NEA\" target=\"_blank\" rel=\"noopener\">Deno<\/a> foi projetada para aproveitar os recursos modernos do JavaScript. Todos os métodos assíncronos retornam promessas. O Deno também suporta e aguarda scripts de nível superior, o que significa que você pode usar e aguardar em seu script principal sem precisar envolvê-lo em uma função assíncrona.<\/p>\n<pre><code><span class=\"token keyword\">try<\/span> <span class=\"token punctuation\">{<\/span>\n  <span class=\"token keyword\">const<\/span> data <span class=\"token operator\">=<\/span> <span class=\"token keyword\">await<\/span> Deno<span class=\"token punctuation\">.<\/span><span class=\"token function\">readFile<\/span><span class=\"token punctuation\">(<\/span><span class=\"token string\">'leia.txt'<\/span><span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">;<\/span>\n  <span class=\"token comment\">// manipular os dados<\/span>\n<span class=\"token punctuation\">}<\/span> <span class=\"token keyword\">catch<\/span> <span class=\"token punctuation\">(<\/span>e<span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">{<\/span>\n  <span class=\"token comment\">// trate os erros<\/span>\n<span class=\"token punctuation\">}<\/span>\n<\/code><\/pre>\n<p>A equipe de desenvolvimento também tomou a decisão de usar os padrões da Web sempre que possível, o que significa que eles implementaram APIs do navegador onde é prático fazê-lo. Deno fornece o objeto global <strong>window<\/strong> e APIs como <strong>addEventListener<\/strong> e <strong>fetch<\/strong>. Ter acesso a <strong>fetch<\/strong> é particularmente bom, pois no Node você teria que preencher isso ou usar uma biblioteca de terceiros.<\/p>\n<h3>Módulo de Compatibilidade<\/h3>\n<p>O Deno fornece uma camada de compatibilidade com o objetivo de permitir a reutilização de pacotes existentes. Ainda não está completo, mas atualmente suporta o carregamento de módulos CommonJS via <strong>require()<\/strong>, entre outras coisas.<\/p>\n<h3>Gerenciamento de Pacotes<\/h3>\n<p>O gerenciamento de pacotes é uma área em que Deno representa um afastamento radical da maneira de fazer as coisas como o Node. Como ainda é cedo para Deno, resta saber se sua abordagem será vantajosa.<\/p>\n<h3>NodeJS<\/h3>\n<p>Como você deve saber, o Node vem com seu próprio gerenciador de pacotes chamado <strong>npm<\/strong>, que é usado para instalar e gerenciar pacotes de terceiros. O npm é usado principalmente com o registro on-line do npm , onde a maioria dos pacotes de terceiros disponíveis estão listados.<\/p>\n<p>Quando você usa o npm para instalar um pacote em seu projeto, um arquivo chamado <strong>package.json<\/strong> e é usado para especificar o nome do pacote e o intervalo de versão aceitável. O pacote em si (mais todos os pacotes dos quais depende) são baixados para pasta <strong>node_modules<\/strong> dentro do seu projeto.<\/p>\n<h3>Deno<\/h3>\n<p>Deno acaba com a necessidade de um gerenciador de pacotes. Em vez disso, os pacotes são vinculados diretamente por meio de uma URL:<\/p>\n<pre><code><span class=\"token keyword\">import<\/span> <span class=\"token punctuation\">{<\/span> Response <span class=\"token punctuation\">}<\/span> <span class=\"token keyword\">from<\/span> <span class=\"token string\">\"https://deno.land/std@0.53.0/http/servidor.ts\"<\/span><span class=\"token punctuation\">;<\/span>\n<\/code><\/pre>\n<p>Na primeira execução do seu código, o Deno busca e compila todas as dependências. Eles são armazenados em cache no sistema de arquivos, separadamente do seu projeto, para que as execuções subsequentes sejam muito mais rápidas.<\/p>\n<p>Semelhante ao arquivo <strong>package-lock.json<\/strong> do npm , o Deno permite especificar um arquivo de bloqueio que será usado para garantir que apenas as dependências que correspondem à versão exata que você importou originalmente serão usadas<\/p>\n<h3>Pacotes de Terceiros<\/h3>\n<p>Uma linguagem pode prosperar ou morrer dependendo muito do seu ecossistema, pois a produtividade depende de não ter que reinventar a roda! Aqui, parece que o Node atualmente tem vantagem.<\/p>\n<h3>NodeJS<\/h3>\n<p>O Node possui um amplo e variado ecossistema de bibliotecas e pacotes disponíveis. Nos 11 anos desde seu lançamento, mais de um milhão de pacotes foram registrados no registro npm. Obviamente, a qualidade pode variar muito e muitos não são mais mantidos ativamente, mas ainda é uma grande vantagem para os desenvolvedores do Node.<\/p>\n<h3>Deno<\/h3>\n<p>Como vimos na seção anterior, Deno está tentando ativamente evitar a necessidade de um gerenciador de pacotes ou registro, permitindo que os scripts importem módulos diretamente de qualquer URL pública. Obviamente, é difícil importar pacotes se você não souber o que há por aí; portanto, o site da Deno mantém uma lista de módulos de terceiros compatíveis . Até o momento, existem mais de 642 <strong>módulos<\/strong> na lista.<\/p>\n<h3>Biblioteca Padrão do Deno<\/h3>\n<p>Uma maneira pela qual Deno tenta melhorar a experiência do desenvolvedor é fornecendo uma biblioteca padrão de auxiliares e utilitários para tarefas comuns. Todos os módulos são auditados pelos desenvolvedores principais para garantir código confiável e de alta qualidade. Existem módulos para processar argumentos da linha de comando e colorir a saída do terminal - ambos disponíveis apenas como pacotes de terceiros para o Node.<\/p>\n<h2>Segurança<\/h2>\n<p><img src=\"/uploads/2020/07/segurança-300x300.png\" alt=\"\"><\/p>\n<p>Talvez uma das melhorias mais elogiadas de Deno sobre o Node seja o sistema de permissões. Vamos ver o porquê.<\/p>\n<h3>NodeJS<\/h3>\n<p>O tempo de execução do Node é muito permissivo, permitindo o acesso total do código à rede e ao sistema de arquivos do computador. Existe o potencial de código de terceiros causar estragos em seu sistema, se desmarcado.<\/p>\n<h3>Deno<\/h3>\n<p>Melhorar o modelo de segurança é algo que Ryan Dahl especificamente se propôs a fazer ao projetar o Deno. Por padrão, todo o código é executado em um ambiente seguro de sandbox. Isso impede que o código tenha acesso a coisas como sistema de arquivos, rede e variáveis ​​de ambiente, a menos que o acesso seja concedido especificamente com um argumento da linha de comando.<\/p>\n<pre><code># Allow script to make network requests\ndeno run <span class=\"token operator\">--<\/span>allow<span class=\"token operator\">-<\/span>net servidor<span class=\"token punctuation\">.<\/span>ts\n<\/code><\/pre>\n<p>Melhor ainda, ao permitir acesso de leitura ou gravação ao sistema de arquivos ou à rede, você pode fornecer uma lista de permissões. Isso significa que você pode restringir o acesso de leitura / gravação de um programa Deno à datapasta do projeto , por exemplo, limitando qualquer dano malicioso em potencial.<\/p>\n<h3>Deno: Pilhas Incluídas<\/h3>\n<p>Antes de terminarmos, eu só queria falar sobre mais uma coisa. Se você der uma olhada na seção de ferramentas do manual , notará que o Deno nos fornece alguns recursos interessantes de bônus! A seguir, são apresentadas ferramentas integradas para tornar a experiência do desenvolvedor um pouco mais agradável:<\/p>\n<ul>\n<li><strong>bundler<\/strong>: agrupa um script especificado e suas dependências em um único arquivo;<\/li>\n<li><strong>debugger<\/strong>: permite depurar seus programas Deno com o Chrome Devtools, o VS Code e outras ferramentas (nota: o Node também vem com um depurador);<\/li>\n<li><strong>inspetor de dependência<\/strong>: executar isso em um módulo ES listará todas as dependências em uma árvore;<\/li>\n<li><strong>gerador de documentação<\/strong>: analisa anotações JSDoc em um determinado arquivo e gera documentação;<\/li>\n<li><strong>formatador<\/strong>: formata automaticamente os códigos JavaScript e TypeScript;<\/li>\n<li><strong>test runner<\/strong>: você pode usá-lo para testar seu código JS e TS, em conjunto com o módulo de asserções na biblioteca padrão;<\/li>\n<li><strong>linter<\/strong>: um linter de código (atualmente instável) para ajudar a detectar possíveis problemas em seus programas.<\/li>\n<\/ul>\n<h2>Conclusões<\/h2>\n<p>O objetivo deste artigo não é defender Node ou Deno, mas comparar e contrastar os dois. Agora você deve entender as semelhanças entre os dois tempos de execução e, talvez mais importante, as diferenças.<\/p>\n<p>Deno apresenta algumas vantagens particulares aos desenvolvedores, incluindo um sistema robusto de permissões e suporte TypeScript de primeira classe. As decisões de projeto e as ferramentas internas adicionais visam fornecer um ambiente produtivo e uma boa experiência para o desenvolvedor.<\/p>\n<p>O Node, por outro lado, tem um ecossistema maciço e bem estabelecido ao seu redor, que já faz mais de uma década. Isso, junto com a infinidade de documentação e tutoriais disponíveis, provavelmente torna o Node.js uma aposta segura por algum tempo.<\/p>\n<p>Eu se fosse você não largaria tudo para se dedicar 100% ao Deno, ainda é muito mais muito cedo para ter essa atitude, claro isso pode mudar, mas prossiga seus estudos com NodeJS vale muito a pena.<\/p>\n<h3>Recomendações<\/h3>\n","date":"2020-07-15T00:00:00.000Z","readingTime":8,"title":"Deno VS Node.JS: Veja as Vantagens e Desvantagens","categories":["nodejs"],"tags":["backend","deno","desvantagens","javascript","modulos","node","nodejs","npm","programador","seguranca","vantagens"],"description":"Quando o [Deno](https//youtu.be/Z-mGgOz5NEA) foi anunciado gerou bastante interesse na comunidade JavaScript, fiz até um vídeo lá no meu canal do Youtube explicando o que era esse tal de [Deno](https//youtu.be/Z-mGgOz5NEA). Existe muitas semelhanças entre as duas plataformas. No entanto, também existem diferenças importantes, o que significa que você não pode simplesmente substituir um pelo outro.","imgArticle":"/thumbnail-article/deno-vs-nodejs.png","imgHome":"/thumbnail-home/deno-vs-nodejs.png"},"n-0-0-10-0-0":{"expanded":false},"n-0-0-10-0-0-0-0-0-0-1-0":{}}, "page": {"image":"/thumbnail-article/deno-vs-nodejs.png","status":200,"locale":"pt-BR","title":"Deno VS Node.JS: Veja as Vantagens e Desvantagens - TipsCode","description":"Quando o [Deno](https//youtu.be/Z-mGgOz5NEA) foi anunciado gerou bastante interesse na comunidade JavaScript, fiz até um vídeo lá no meu canal do Youtube explicando o que era esse tal de [Deno](https//youtu.be/Z-mGgOz5NEA). Existe muitas semelhanças entre as duas plataformas. No entanto, também existem diferenças importantes, o que significa que você não pode simplesmente substituir um pelo outro."}}