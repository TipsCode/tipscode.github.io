{"instances": {"application":{},"n-0-0-0-0":{},"n-0-0-0-1":{},"n-0-0-0-2":{},"n-0-0-0-3":{},"n-0-0-13/foreach-javascript":{"slug":"foreach-javascript","content":"<p>Fala dev, vamos a mais um artigo, neste vamos abordar um tema bastante importante e que vai lhe trazer bastante produtividade na hora de escrever seus códigos em JavaScript, estudaremos neste artigo o <em>foreach JavaScript.<\/em><\/p>\n<h2>O que é Foreach?<\/h2>\n<p>Foreach é uma função nativa da API do JavaScript, onde a mesma nos permiti percorrer os elementos de um array, existem várias formas de percorrer um array, breve estarei publicando aqui no site. Vamos ao nosso editor de texto para vermos na prática o funcionamento do foreach JavaScript.<\/p>\n<pre><code><span class=\"token keyword\">const<\/span> aprovados <span class=\"token operator\">=<\/span> <span class=\"token punctuation\">[<\/span><span class=\"token string\">'Emanuel'<\/span><span class=\"token punctuation\">,<\/span> <span class=\"token string\">'Maria'<\/span><span class=\"token punctuation\">,<\/span> <span class=\"token string\">'João'<\/span><span class=\"token punctuation\">,<\/span> <span class=\"token string\">'Roberto'<\/span><span class=\"token punctuation\">,<\/span> <span class=\"token string\">'Gabriel'<\/span><span class=\"token punctuation\">]<\/span>\n\naprovados<span class=\"token punctuation\">.<\/span><span class=\"token function\">forEach<\/span><span class=\"token punctuation\">(<\/span> <span class=\"token keyword\">function<\/span><span class=\"token punctuation\">(<\/span><span class=\"token parameter\">nome<span class=\"token punctuation\">,<\/span> indice<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">{<\/span>\n    console<span class=\"token punctuation\">.<\/span><span class=\"token function\">log<\/span><span class=\"token punctuation\">(<\/span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`<\/span><span class=\"token string\"> <\/span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${<\/span>indice <span class=\"token operator\">+<\/span> <span class=\"token number\">1<\/span><span class=\"token interpolation-punctuation punctuation\">}<\/span><\/span><span class=\"token string\"> <\/span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${<\/span>nome<span class=\"token interpolation-punctuation punctuation\">}<\/span><\/span><span class=\"token string\"> <\/span><span class=\"token template-punctuation string\">`<\/span><\/span><span class=\"token punctuation\">)<\/span>\n<span class=\"token punctuation\">}<\/span> <span class=\"token punctuation\">)<\/span>\n<\/code><\/pre>\n<p><img src=\"/uploads/2020/01/Saide-do-exemplo-1.jpg\" alt=\"foreact javascript\"><\/p>\n<p>foreach javascript<\/p>\n<p>Começamos criando um array de elementos cujo o nome é “aprovados” e agora vamos percorrer essa lista de aprovados e imprimir na tela, então escrevemos aprovados.foreach(), neste momento passamos como parâmetro uma função <em>callback<\/em>, onde essa função será chamada para cada iteração do nosso array de aprovados passando o próprio elemento e o índice correspondente ao array, ou seja, ele irá percorrer os elementos por exemplo “Emanuel” e o índice do mesmo, depois “Maria” e o índice e assim sucessivamente para cada elemento de aprovados.<\/p>\n<h2>Foreach sem Indice<\/h2>\n<p>Caso você não precise mostrar o índice do array é possível oculta o índice, pois não é obrigatório passa os parâmetros da função call-back no JavaScript, veja como é simples.<\/p>\n<pre><code>aprovados<span class=\"token punctuation\">.<\/span><span class=\"token function\">forEach<\/span><span class=\"token punctuation\">(<\/span> <span class=\"token parameter\">nome<\/span> <span class=\"token operator\">=><\/span> console<span class=\"token punctuation\">.<\/span><span class=\"token function\">log<\/span><span class=\"token punctuation\">(<\/span> nome <span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">)<\/span>\n<\/code><\/pre>\n<p><img src=\"/uploads/2020/01/saida-do-exemplo-2.jpg\" alt=\"foreact javascript\"><\/p>\n<p>foreach javascript<\/p>\n<p>Neste caso estamos usando o novo recurso do JavaScript ás <em>arrow function<\/em>, neste cenário estamos interessados somente em imprimir o nome de cada elemento, caso você desconheça as arrow function <a href=\"http://bit.ly/tipscode-curso-programador-full-stack-javascript\" target=\"_blank\" rel=\"noopener\">clique aqui para saber mais<\/a>. Observação importante, aqui o índice ele é passado sim, porém o JavaScript o ignorar.<\/p>\n<h2>Percorrendo com Variável<\/h2>\n<p>Outro cenário bem interessante é armazenar uma função em uma variável e passar a mesma como parâmetro. Veja como:<\/p>\n<pre><code><span class=\"token keyword\">const<\/span> <span class=\"token function-variable function\">exibirAprovados<\/span> <span class=\"token operator\">=<\/span> <span class=\"token parameter\">aprovado<\/span> <span class=\"token operator\">=><\/span> console<span class=\"token punctuation\">.<\/span><span class=\"token function\">log<\/span><span class=\"token punctuation\">(<\/span>aprovado<span class=\"token punctuation\">)<\/span>\n\naprovados<span class=\"token punctuation\">.<\/span><span class=\"token function\">forEach<\/span><span class=\"token punctuation\">(<\/span>exibirAprovados<span class=\"token punctuation\">)<\/span>\n<\/code><\/pre>\n<p><img src=\"/uploads/2020/01/saida-do-exemplo-2-1.jpg\" alt=\"foreact javascript\"><\/p>\n<p>foreach javascript<\/p>\n<p>Criamos uma constante “exibirAprovados” atribuímos uma arrow function com o nome de “aprovado” onde será exibido no console.log os “aprovados”, ou seja, com essa função armazenada em uma variável, podemos passa como parâmetro para o foreach, como mostro na linha 3.<\/p>\n<h2>Detalhando o Foreach<\/h2>\n<p>Foreach recebe dois parâmetros sempre, o name e o índice, caso não queira o índice podemos suprimir esse parâmetro, caso queira somente o índice somos obrigados a escrever o primeiro parâmetro, por que o índice sempre é passado como ultimo e não como primeiro. Cabe uma observação muito importante, o foreach na verdade tem 3 parâmetros, o próprio array do elemento é passado como parâmetro do foreach. Vamos ao código:<\/p>\n<pre><code>aprovados<span class=\"token punctuation\">.<\/span><span class=\"token function\">forEach<\/span><span class=\"token punctuation\">(<\/span> <span class=\"token keyword\">function<\/span><span class=\"token punctuation\">(<\/span><span class=\"token parameter\">nome<span class=\"token punctuation\">,<\/span> indice<span class=\"token punctuation\">,<\/span> array<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">{<\/span>\n    console<span class=\"token punctuation\">.<\/span><span class=\"token function\">log<\/span><span class=\"token punctuation\">(<\/span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`<\/span><span class=\"token string\"> <\/span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${<\/span>indice <span class=\"token operator\">+<\/span> <span class=\"token number\">1<\/span><span class=\"token interpolation-punctuation punctuation\">}<\/span><\/span><span class=\"token string\"> <\/span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${<\/span>nome<span class=\"token interpolation-punctuation punctuation\">}<\/span><\/span><span class=\"token string\"> <\/span><span class=\"token template-punctuation string\">`<\/span><\/span><span class=\"token punctuation\">)<\/span>\n    console<span class=\"token punctuation\">.<\/span><span class=\"token function\">log<\/span><span class=\"token punctuation\">(<\/span>array<span class=\"token punctuation\">)<\/span>\n<span class=\"token punctuation\">}<\/span> <span class=\"token punctuation\">)<\/span>\n<\/code><\/pre>\n<p><img src=\"/uploads/2020/01/saida-do-exemplo-4.jpg\" alt=\"foreact javascript\"><\/p>\n<p>foreach javascript<\/p>\n<p>Veja que foi impresso o elemento e depois o próprio array, ou seja, a função call-back que passamos para o Foreach JavaScript receber 3 parâmetros, o nome, o índice e o próprio array. Lembrando que podemos suprimi-los, dependendo do seu problema em questão.<\/p>\n<h2>Reescrevendo o Foreact<\/h2>\n<p>Para entendemos de uma vez por todas o Foreact JavaScript, vamos reescreve-lo e observar como ele funciona por debaixo dos panos, então vamos coda!!<\/p>\n<pre><code><span class=\"token keyword\">const<\/span> aprovados <span class=\"token operator\">=<\/span> <span class=\"token punctuation\">[<\/span><span class=\"token string\">'Emanuel'<\/span><span class=\"token punctuation\">,<\/span> <span class=\"token string\">'Maria'<\/span><span class=\"token punctuation\">,<\/span> <span class=\"token string\">'João'<\/span><span class=\"token punctuation\">,<\/span> <span class=\"token string\">'Roberto'<\/span><span class=\"token punctuation\">,<\/span> <span class=\"token string\">'Gabriel'<\/span><span class=\"token punctuation\">]<\/span>\n\naprovados<span class=\"token punctuation\">.<\/span><span class=\"token function\">forEachPersonalizado<\/span><span class=\"token punctuation\">(<\/span> <span class=\"token keyword\">function<\/span><span class=\"token punctuation\">(<\/span><span class=\"token parameter\">nome<span class=\"token punctuation\">,<\/span> indice<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">{<\/span>\n    console<span class=\"token punctuation\">.<\/span><span class=\"token function\">log<\/span><span class=\"token punctuation\">(<\/span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`<\/span><span class=\"token string\"> <\/span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${<\/span>indice <span class=\"token operator\">+<\/span> <span class=\"token number\">1<\/span><span class=\"token interpolation-punctuation punctuation\">}<\/span><\/span><span class=\"token string\"> <\/span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${<\/span>nome<span class=\"token interpolation-punctuation punctuation\">}<\/span><\/span><span class=\"token string\"> <\/span><span class=\"token template-punctuation string\">`<\/span><\/span><span class=\"token punctuation\">)<\/span>\n    \n<span class=\"token punctuation\">}<\/span> <span class=\"token punctuation\">)<\/span>\n<\/code><\/pre>\n<p><img src=\"/uploads/2020/01/saida-do-exemplo-5.jpg\" alt=\"foreact javascript\"><\/p>\n<p>foreach javascript<\/p>\n<p>Note que a função forEachPersonalizado() não existe, então vamos escrever nosso proprio foreach JavaScript. Vamos voltar ao visualCode.<\/p>\n<pre><code><span class=\"token class-name\">Array<\/span><span class=\"token punctuation\">.<\/span>prototype<span class=\"token punctuation\">.<\/span><span class=\"token function-variable function\">forEachPersonalizado<\/span> <span class=\"token operator\">=<\/span> <span class=\"token keyword\">function<\/span><span class=\"token punctuation\">(<\/span><span class=\"token parameter\">callback<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">{<\/span>\n    <span class=\"token keyword\">for<\/span> <span class=\"token punctuation\">(<\/span><span class=\"token keyword\">let<\/span> i <span class=\"token operator\">=<\/span> <span class=\"token number\">0<\/span><span class=\"token punctuation\">;<\/span> i <span class=\"token operator\">&lt;<\/span> <span class=\"token keyword\">this<\/span><span class=\"token punctuation\">.<\/span>length<span class=\"token punctuation\">;<\/span> i<span class=\"token operator\">++<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">{<\/span>\n        <span class=\"token function\">callback<\/span><span class=\"token punctuation\">(<\/span><span class=\"token keyword\">this<\/span><span class=\"token punctuation\">[<\/span>i<span class=\"token punctuation\">]<\/span><span class=\"token punctuation\">,<\/span> i<span class=\"token punctuation\">,<\/span> <span class=\"token keyword\">this<\/span><span class=\"token punctuation\">)<\/span>\n    <span class=\"token punctuation\">}<\/span>\n<span class=\"token punctuation\">}<\/span>\n<span class=\"token keyword\">const<\/span> aprovados <span class=\"token operator\">=<\/span> <span class=\"token punctuation\">[<\/span><span class=\"token string\">'Emanuel'<\/span><span class=\"token punctuation\">,<\/span> <span class=\"token string\">'Maria'<\/span><span class=\"token punctuation\">,<\/span> <span class=\"token string\">'João'<\/span><span class=\"token punctuation\">,<\/span> <span class=\"token string\">'Roberto'<\/span><span class=\"token punctuation\">,<\/span> <span class=\"token string\">'Gabriel'<\/span><span class=\"token punctuation\">]<\/span>\n\naprovados<span class=\"token punctuation\">.<\/span><span class=\"token function\">forEachPersonalizado<\/span><span class=\"token punctuation\">(<\/span> <span class=\"token keyword\">function<\/span><span class=\"token punctuation\">(<\/span><span class=\"token parameter\">nome<span class=\"token punctuation\">,<\/span> indice<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">{<\/span>\n    console<span class=\"token punctuation\">.<\/span><span class=\"token function\">log<\/span><span class=\"token punctuation\">(<\/span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`<\/span><span class=\"token string\"> <\/span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${<\/span>indice <span class=\"token operator\">+<\/span> <span class=\"token number\">1<\/span><span class=\"token interpolation-punctuation punctuation\">}<\/span><\/span><span class=\"token string\"> <\/span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${<\/span>nome<span class=\"token interpolation-punctuation punctuation\">}<\/span><\/span><span class=\"token string\"> <\/span><span class=\"token template-punctuation string\">`<\/span><\/span><span class=\"token punctuation\">)<\/span>\n    \n<span class=\"token punctuation\">}<\/span> <span class=\"token punctuation\">)<\/span>\n<\/code><\/pre>\n<p>Criamos dentro de <em>prototype<\/em> de um array e associamos a uma função, onde a mesma recebe uma função call-back como parâmetro. No corpo dessa função estamos percorrendo o array utilizando a estrutura de repetição <em>FOR<\/em> do JavaScript. Então escrevemos “let i = 0, i &lt; this.length; i++”, o <em>this<\/em> representa o nosso array, onde acessamos o array dentro de uma função que pertence ao <em>prototype<\/em>, ou seja, acessamos a instancia do array através do “<em>this<\/em>” neste FOR estamos percorrendo os índices. Dentro do <em>FOR<\/em> estamos chamando a função call-back passando três parâmetros, primeiro parâmetro é o próprio valor, segundo é o índice e o terceiro é o array completo. Vamos testar e ver o resultado.<\/p>\n<p><img src=\"/uploads/2020/01/saida-do-exemplo-6.jpg\" alt=\"foreact javascript\"><\/p>\n<h2>Conclusão<\/h2>\n<p>Chegamos ao fim de mais um artigo galera, espero ter lhe ajudado de algum forma. Que ingressa no mercado de trabalho? Se sua resposta for SIM. Participe do MEGA treinamento PROGRAMADOR FULL STACK EM 8 SEMANAS. Esse curso é 100% voltado para o mercado de trabalho, o acesso é vitalicio. <a href=\"http://bit.ly/tipscode-curso-programador-full-stack-javascript\" target=\"_blank\" rel=\"noopener\">QUERO ME TORNAR UM PROGRAMADOR FULL STACK<\/a><\/p>\n<p><a href=\"/programador-fullstack-8-semanas\"><img src=\"/uploads/2020/01/banner-JS8-1080x1080-2.png\" alt=\"\"><\/a><\/p>\n<h4>DO ZERO A PROGRAMADOR<\/h4>\n<p>FULL STACK JAVASCRIPT (REACT + NODEJS)<\/p>\n<p>Nele você vai aprender do zero: HTML 5, CSS, Bulma para criar sites responsivos, JavaScript + Lógica de programação, Git e Github, JavaScript moderno (es6+), React que é uma das libs mais pedidas pelo mercado, Express.js que é uma ferramenta de backend construída com NodeJs e muito mais!<\/p>\n<p><a href=\"/programador-fullstack-8-semanas\">Saiba Mias!<\/a><\/p>\n<p>Leia o artigo sobre NodeJS <a href=\"/conhecendo-nodejs/\">CLIQUE AQUI<\/a><\/p>\n","date":"2020-01-11T00:00:00.000Z","readingTime":6,"title":"Como usar o Foreach JavaScript","description":"Fala dev, vamos a mais um artigo, neste vamos abordar um tema bastante importante e que vai lhe trazer bastante produtividade na hora de escrever seus códigos em JavaScript, estudaremos neste artigo o foreach JavaScript.","imgArticle":"/thumbnail-article/como-usar-foreach.png","imgHome":"/thumbnail-home/como-usar-foreach.png"},"n-0-0-13-0-0":{"expanded":false},"n-0-0-13-0-0-0-0-0-0-1-0":{}}, "page": {"image":"/thumbnail-article/como-usar-foreach.png","status":200,"locale":"pt-BR","title":"Como usar o Foreach JavaScript - TipsCode","description":"Fala dev, vamos a mais um artigo, neste vamos abordar um tema bastante importante e que vai lhe trazer bastante produtividade na hora de escrever seus códigos em JavaScript, estudaremos neste artigo o foreach JavaScript."}}