{"instances": {"application":{},"n-0-0-9":{"slug":"expressoes-regulares-guia-completo-iniciante","content":"<p>Mais cedo ou mais tarde, você encontrará uma expressão regular. Com sua sintaxe enigmática, documentação confusa e curva de aprendizado maciça, a maioria dos desenvolvedores resolve copiá-los e colá-los no StackOverflow e torcer para que eles funcionem. Mas e se você pudesse decodificar expressões regulares e aproveitar seu poder? Neste artigo, mostrarei por que você deve examinar novamente as expressões regulares e como usá-las no mundo real.</p>\n<h3>Por que Expressões Regulares</h3>\n<p>Expressões Regulares</p>\n<p>Por que se preocupar com expressões regulares? Por que você deveria se importar?</p>\n<ul>\n<li><strong>Correspondência</strong>: Expressões regulares são ótimas para determinar se uma sequência corresponde a algum formato, como número de telefone, email ou número de cartão de crédito;</li>\n<li><strong>Substituição</strong>: Expressões regulares facilitam a localização e substituição de padrões em uma sequência. Por exemplo, <strong><em>text.replace(/\\s+/g, &quot; &quot;)</em></strong>substitui todos os pedaços de espaço em branco <strong><em>text</em></strong>, como <strong><em>&quot;\\n\\t &quot;</em></strong>, por um único espaço;</li>\n<li><strong><em>Portabilidade</em></strong>: Quase todos os idiomas principais possuem uma biblioteca de expressões regulares. A sintaxe é padronizada principalmente, para que você não precise se preocupar com reaprender expressões regulares ao alternar idiomas;</li>\n<li><strong><em>Codificação</em></strong>: ao escrever código, você pode usar expressões regulares para pesquisar arquivos com ferramentas como localizar e substituir no Atom ou ack na linha de comando;</li>\n<li><strong><em>Clara e concisa</em></strong>: se você se sentir confortável com expressões regulares, poderá executar algumas operações bastante complicadas com uma quantidade muito pequena de código;</li>\n<li><strong><em>Extração</em></strong>: é fácil extrair informações de um padrão com expressões regulares. Por exemplo, <strong><em>name.matches(/^(Mr|Ms|Mrs|Dr).?\\s/i)[1]</em></strong> extrai o título de uma pessoa de uma sequência, como <strong><em>&quot;Mr&quot;</em></strong>de <strong><em>&quot;Mr. Schropp&quot;</em></strong>.</li>\n</ul>\n<h3>Expressões Regulares na prática</h3>\n<p>Expressões Regulares</p>\n<p>A melhor maneira de aprender expressões regulares é usando um exemplo. Digamos que você esteja criando uma página Web com uma entrada de número de telefone. Como você é um desenvolvedor, decide exibir uma marca de <strong><em>V</em></strong> quando o número de telefone for válido e um <strong><em>X</em></strong> quando for inválido.</p>\n<p><img src=\"/uploads/2020/05/expressoes-770x515-1.jpg\" alt=\"Expressões Regulares\"></p>\n<p><strong><em>Figura 01: Expressões Regulares</em></strong></p>\n<p>&lt;p class=&quot;codepen&quot; data-height=&quot;265&quot; data-theme-id=&quot;light&quot; data-default-tab=&quot;result&quot; data-user=&quot;LandonSchropp&quot; data-slug-hash=&quot;zxRmeG&quot; style=&quot;height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;&quot; data-pen-title=&quot;Regular Expression Demo&quot;&gt;&lt;span&gt;See the Pen &lt;a href=&quot;https://codepen.io/LandonSchropp/pen/zxRmeG&quot;&gt;Regular Expression Demo&lt;/a&gt; by Landon Schropp (&lt;a href=&quot;https://codepen.io/LandonSchropp&quot;&gt;@LandonSchropp&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.&lt;/span&gt;&lt;/p&gt;\n&lt;script async src=&quot;https://static.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;</p>\n<pre><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>phone-number<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span> \n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>label</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>valid<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">for</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>phone-number<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>check.svg<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>label</span><span class=\"token punctuation\">></span></span> \n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>label</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>inválido<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">for</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>phone-number<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>x.svg<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span> label <span class=\"token operator\">></span>\n</code></pre>\n<pre><code>input<span class=\"token operator\">:</span><span class=\"token function\">not</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>data<span class=\"token operator\">-</span>validation <span class=\"token operator\">=</span> <span class=\"token string\">\"valid\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">~</span> label<span class=\"token punctuation\">.</span>valid <span class=\"token punctuation\">,</span>\ninput<span class=\"token operator\">:</span><span class=\"token function\">not</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>data<span class=\"token operator\">-</span>validation <span class=\"token operator\">=</span> <span class=\"token string\">\"invalid\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">~</span> label<span class=\"token punctuation\">.</span>invalid  <span class=\"token punctuation\">{</span> \n  display<span class=\"token operator\">:</span> none<span class=\"token punctuation\">;</span> \n<span class=\"token punctuation\">}</span>\n</code></pre>\n<pre><code><span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"input\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"input blur\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">função</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">evento</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">isPhoneNumber</span><span class=\"token punctuation\">(</span><span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">val</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \n    <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">attr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"data-validation\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"valid\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">;</span> \n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>tipe <span class=\"token operator\">==</span> <span class=\"token string\">\"blur\"</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span> \n    <span class=\"token function\">$</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">attr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"data-validation\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"invalid\"</span>  <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span> \n  <span class=\"token punctuation\">}</span> \n  <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span> \n    <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">removeAttr</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"data-validation\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n  <span class=\"token punctuation\">}</span> \n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>Com o código acima, sempre que uma pessoa digita ou cola um número válido na entrada, o <strong><em>V</em></strong> é exibido. Quando o usuário desfoca da entrada (blur) e o valor for inválido, o <strong><em>X</em></strong> é exibido.</p>\n<h3>Crie seu jogo com JavaScript mesmo que você seja iniciante</h3>\n<p>Esse é o meu MiniCurso onde vou te ensinar a desenvolver do ZERO um jogo completo usando o que há mais de moderno na linguagem javascript e o melhor esse conteúdo é totalmente gratuito, para você receber esse mega conteúdo basta clicar no botão quero participar e vou lhe enviar o conteúdo para o seu e-mail</p>\n<p><a href=\"https://bit.ly/mini-curso-criando-game-js\" target=\"_blank\" rel=\"noopener\">QUERO PARTICIPAR</a></p>\n<p>Como você sabe que os números de telefone são compostos por dez dígitos, você escreve a função isPhoneNumberé assim:</p>\n<pre><code><span class=\"token keyword\">function</span> <span class=\"token function\">isPhoneNumber</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>Esta função contém uma expressão regular entre os <em><strong>/</strong></em> caracteres com dez <strong><em>\\d</em></strong> ou dígitos. O método <strong><em>test()</em></strong> retornará true se o <strong><em>regex</em></strong> corresponder à string e false se não corresponder. Se você executar <strong><em>isPhoneNumber(&quot;5558675309&quot;)</em></strong>, ele retornará <strong>true</strong>.</p>\n<p>No entanto, escrever 10 <strong><em>\\d</em></strong> é um pouco redundante. Então, você pode fazer dessa forma:</p>\n<pre><code><span class=\"token keyword\">function</span> <span class=\"token function\">isPhoneNumber</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\d{10}</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>Às vezes, quando os usuários digitam números de telefone, começam com 1. Não seria bom se o seu regex pudesse lidar com esses casos? Você pode usando ?.</p>\n<pre><code><span class=\"token keyword\">function</span> <span class=\"token function\">isPhoneNumber</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">1?\\d{10}</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>O ? símbolo significa zero ou um, então agora <strong><em>isPhoneNumber()</em></strong> retorna true para ambos &quot;5558675309&quot;e &quot;15558675309&quot;!</p>\n<p>Até agora, <strong><em>isPhoneNumber</em></strong> está ficando legal, mas você não percebeu um detalhe muito importante: as expressões regulares são mais do que combinar partes de uma sequência. Tal como está, <strong><em>isPhoneNumber(&quot;555555555555555555&quot;)</em></strong> onde retorna <em><strong>true</strong></em> porque essa sequência contém dez números. Você pode corrigir esse problema usando as âncoras ^e $.</p>\n<pre><code>função  <span class=\"token function\">isPhoneNumber</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">string</span><span class=\"token punctuation\">)</span>  <span class=\"token punctuation\">{</span> \n  <span class=\"token keyword\">return</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">^1?\\d{10}$</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">.</span><span class=\"token function\">teste</span><span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span> \n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>Aproximadamente, ^corresponde ao início da string e $ ao final; agora, seu <strong><em>regex</em></strong> corresponderá ao número de telefone inteiro.</p>\n<h3>Vamos nos aprofunda mais um pouco</h3>\n<p>Expressões Regulares</p>\n<p>Tudo indo muito bem até aqui. você colocou sua página no ar, e está indo super bem, mas há um outro problema que temos que analisar. Que são as várias formas de se escrever um número de telefone, e como a internet é global você como desenvolvedor tem que ver o cenário como um todo, por exemplo a maneira de se digita números telefônicos nos Estados Unidos é bem diferente do Brasil, veja o exemplo:</p>\n<ul>\n<li>(234) 567-8901</li>\n<li>234-567-8901</li>\n<li>234.567.8901</li>\n<li>234/567-8901</li>\n<li>234 567 8901</li>\n<li>+1 (234) 567-8901</li>\n<li>1-234-567-8901</li>\n</ul>\n<p>Claro você deve ver esse cenário caso sua aplicação for roda fora do contexto brasileiro, coloquei essa parte apenas a titulo de exemplo ok.</p>\n<p>Embora seus usuários possam deixar de fora a pontuação, é muito mais fácil digitar um número formatado.</p>\n<p>Embora você possa escrever uma expressão regular para lidar com todos esses formatos, provavelmente é uma má idéia. Mesmo que você pregue todos os formatos desta lista, é muito fácil perder um. Além disso, você realmente se importa apenas com os dados, não com a formatação . Então, em vez de se preocupar com pontuação, por que não removê-la?</p>\n<pre><code>função <span class=\"token function\">isPhoneNumber</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \n  <span class=\"token keyword\">return</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">^1?\\d{10}$</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">.</span><span class=\"token function\">teste</span><span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\D</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span><span class=\"token punctuation\">,</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>A função replace() está substituindo o caractere \\D, que corresponde a qualquer caractere que não seja um dígito, por uma sequência vazia. O g é o &quot;sinalizador&quot; global ou diz à função para substituir todas as correspondências pela expressão regular, em vez de apenas a primeira.</p>\n<h3>Seja um profissional mais completo, estude expressões regulares</h3>\n<p>Expressões Regulares</p>\n<p>Hoje todos os sites e sistemas web tem uma página de formulário de contato e a maioria pede número de telefone. No entanto, você como desenvolvedor terá que ver todos os cenários possíveis para ter uma página completa sem bugs.</p>\n<p>O <a href=\"https://en.wikipedia.org/wiki/North_American_Numbering_Plan\" target=\"_blank\" rel=\"noopener\">Plano de Numeração da América do Norte</a> é o padrão de número de telefone usado nos EUA, Canadá e 23 outros países. Este sistema possui algumas regras simples, <a href=\"https://www.anatel.gov.br/setorregulado/plano-de-numeracao-brasileiro\" target=\"_blank\" rel=\"noopener\">assim como a brasileira</a>:</p>\n<ul>\n<li>Um número de telefone ( (234) 567-8901) é dividido em três partes: o código de área ( 234), o código de troca ( 567) e o número de assinante ( 8901);</li>\n<li>Para o código de área e o código de troca, o primeiro dígito pode 2 passar 9 e o segundo e o terceiro dígitos podem 0 passar 9;</li>\n<li>O código de troca não pode ter 1 como terceiro dígito se 1 também for o segundo dígito.</li>\n</ul>\n<p>Seu regex já funciona para a primeira regra, mas quebra a segunda e a terceira. Por enquanto, vamos nos preocupar apenas com a segunda regra. A nova expressão regular precisa se parecer com o seguinte:</p>\n<pre><code><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\"> ^ 1? &lt;CÓDIGO DE ÁREA> &lt;CÓDIGO DE TROCA> &lt;NÚMERO DE ASSINANTE> $ </span><span class=\"token regex-delimiter\">/</span></span>\n</code></pre>\n<p>O número do assinante é fácil; são quatro dígitos.</p>\n<pre><code><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\"> ^ 1? &lt;CÓDIGO DE ÁREA> &lt;CÓDIGO DE TROCA> \\ d {4} $ </span><span class=\"token regex-delimiter\">/</span></span>\n</code></pre>\n<p>O código de área é um pouco mais complicado. Você precisa de um número entre 2 e 9, seguido por dois dígitos. Para conseguir isso, você pode usar um conjunto de caracteres! Um conjunto de caracteres permite especificar um grupo de caracteres para escolher.</p>\n<pre><code><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\"> ^ 1? [23456789] \\ d \\ d &lt;CÓDIGO DE TROCA> \\ d {4} $ </span><span class=\"token regex-delimiter\">/</span></span>\n</code></pre>\n<p>Isso é ótimo, mas é irritante digitar todos os caracteres entre 2 e 9. Limpe-o com um intervalo de caracteres.</p>\n<h3>Avance para o próximo nível. Se torne um programador FullStack JavaScript</h3>\n<p>Você sabia que a maioria das pessoas que buscam se tornar programadores(as) desistem porque se sentem perdidos(a) e não sabem qual caminho seguir? Eu já passei por isso e de verdade quero lhe ajudar, assista esse vídeo clicando no botão abaixo</p>\n<p><a href=\"/programador-fullstack-8-semanas\">Assistir Vídeo</a></p>\n<pre><code><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\"> ^ 1? [2-9] \\ d \\ d &lt;CÓDIGO DE TROCA> \\ d {4} $ </span><span class=\"token regex-delimiter\">/</span></span>\n</code></pre>\n<p>Isso é melhor! Como o código de troca é o mesmo que o código de área, você pode duplicar seu regex para finalizar o número.</p>\n<pre><code><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\"> ^ 1? [2-9] \\ d \\ d [2-9] \\ d \\ d \\ d {4} $ </span><span class=\"token regex-delimiter\">/</span></span>\n</code></pre>\n<p>Mas, não seria bom se você não tivesse que copiar e colar a seção de código de área do seu regex? Você pode simplificar usando um grupo! Os grupos são formados envolvendo caracteres entre parênteses.</p>\n<pre><code><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\"> ^ 1? ([2-9] \\ d \\ d) {2} \\ d {4} $ </span><span class=\"token regex-delimiter\">/</span></span>\n</code></pre>\n<p>É isso aí! Aqui está a isPhoneNumberaparência da função final :</p>\n<p>Agora, [2-9]\\d\\destá contido em um grupo e {2}especifica que esse grupo deve ocorrer duas vezes.</p>\n<pre><code>função  <span class=\"token function\">isPhoneNumber</span> <span class=\"token punctuation\">(</span> <span class=\"token parameter\">string</span> <span class=\"token punctuation\">)</span>  <span class=\"token punctuation\">{</span> \n  <span class=\"token keyword\">return</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">^1?([2-9]\\d\\d){2}\\d{4}$</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\D</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span><span class=\"token punctuation\">,</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span> \n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>aaa</p>\n<h3>Casos que devemos evitar Expressões Regulares</h3>\n<p>Expressões Regulares</p>\n<p>Expressões regulares é um recurso incrível, mas há alguns casos/problemas que você não deve considera antes de usar.</p>\n<ul>\n<li><strong>Não seja muito rigoroso</strong>: Não tem como resolver tudo com expressões regulares. Exemplo para números de telefone, mesmo que correspondamos a todas as regras do país, ainda não há como saber se um número de telefone é real. Se eu recitar o número (555) 555-5555, ele corresponde ao padrão, mas não é um número de telefone real, não tem muito o que fazer;</li>\n<li><em><strong>Não escreva um &quot;analisador&quot; de HTML</strong></em>. Embora seja bom usar expressões regulares para analisar coisas simples, elas não são úteis para analisar linguagens inteiras, você não vai se divertir analisando linguagens não regulares com expressões regulares;</li>\n<li><strong>Não tente complicar muito</strong>. O regex completo para e-mails tem 6.318 caracteres. Um simples, imperfeitos se parece com isso: <strong><em>/^[^@]+@[^@]+.[^@.]+$/.</em></strong> Como uma regra geral, se a expressão regular for maior que uma linha de código, talvez seja hora de procurar outra solução.</li>\n</ul>\n<h3>Conclusões</h3>\n<p>Expressões Regulares</p>\n<p>Neste artigo, você aprendeu quando usar expressões regulares e quando evitá-las e experimentou o processo de escrever uma. Espero que expressões regulares pareçam um pouco menos ameaçadoras e talvez até intrigantes. Se você usar um regex para resolver um problema complicado, deixe-me saber nos comentários, breve farei um vídeo sobre esse tema em nosso <a href=\"https://www.youtube.com/channel/UCZKLK7o6IVayeEjkkoWLwbQ?view_as=subscriber\" target=\"_blank\" rel=\"noopener\">canal do Youtube</a>.</p>\n<h4>Conteúdo recomendados</h4>\n<ul>\n<li><a href=\"/15-componentes-incriveis-do-react/\">15 Componentes React</a></li>\n<li><a href=\"/qual-a-diferencas-entre-sass-e-scss/\">Sass e SCSS qual é a diferença?</a></li>\n<li><a href=\"/react-router-versao-5-guia-completo/\">React Router Guia completo</a></li>\n</ul>\n<h5>Nosso canal no Youtube</h5>\n<p>&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/bsc1ZQW_5CI&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;/iframe&gt;</p>\n<h3>Crie seu jogo com JavaScript mesmo que você seja iniciante</h3>\n<p>Esse é o meu MiniCurso onde vou te ensinar a desenvolver do ZERO um jogo completo usando o que há mais de moderno na linguagem javascript e o melhor esse conteúdo é totalmente gratuito, para você receber esse mega conteúdo basta clicar no botão quero participar e vou lhe enviar o conteúdo para o seu e-mail</p>\n<p><a href=\"https://bit.ly/mini-curso-criando-game-js\" target=\"_blank\" rel=\"noopener\">QUERO PARTICIPAR</a></p>\n<h3>Avance para o próximo nível. Se torne um programador FullStack JavaScript</h3>\n<p>Você sabia que a maioria das pessoas que buscam se tornar programadores(as) desistem porque se sentem perdidos(a) e não sabem qual caminho seguir? Eu já passei por isso e de verdade quero lhe ajudar, assista esse vídeo clicando no botão abaixo</p>\n<p><a href=\"/programador-fullstack-8-semanas\">Assistir Vídeo</a></p>\n","date":"2020-05-18T00:00:00.000Z","readingTime":12,"title":"Expressões Regulares Um guia para Iniciantes","tags":["aprender-expressoes-regulares","aula-expressao-regular","como-fazer-expressao-regular","como-usar-expressoes-regular","curso-de-expressoes-regulares","expressao-regular","expressao-regular-javascript","expressoes-regulares","expressoes-regulares-2","expressoes-regulares-com-sed","expressoes-regulares-em-java","expressoes-regulares-para-iniciantes","o-que-e-expressao-regular","regex","regexp","regular-expression","regular-expressions","regulares"],"description":"Mais cedo ou mais tarde, você encontrará uma expressão regular. Com sua sintaxe enigmática, documentação confusa e curva de aprendizado maciça, a maioria dos desenvolvedores resolve copiá-los e colá-los no StackOverflow e torcer para que eles funcionem. Mas e se você pudesse decodificar expressões regulares e aproveitar seu poder? Neste artigo, mostrarei por que você deve examinar novamente as expressões regulares e como usá-las no mundo real.","imgArticle":"/thumbnail-article/expressoes-regulares-para-iniciantes.png","imgHome":"/thumbnail-home/expressoes-regulares-para-iniciantes.png"},"n-0-0-9-0-0":{"expanded":false},"n-0-0-9-0-0-0-0-0-0-1-0":{}}, "page": {"image":"/image-1200x630.png","status":200,"locale":"pt-BR","title":"Expressões Regulares Um guia para Iniciantes","description":"Mais cedo ou mais tarde, você encontrará uma expressão regular. Com sua sintaxe enigmática, documentação confusa e curva de aprendizado maciça, a maioria dos desenvolvedores resolve copiá-los e colá-los no StackOverflow e torcer para que eles funcionem. Mas e se você pudesse decodificar expressões regulares e aproveitar seu poder? Neste artigo, mostrarei por que você deve examinar novamente as expressões regulares e como usá-las no mundo real."}}