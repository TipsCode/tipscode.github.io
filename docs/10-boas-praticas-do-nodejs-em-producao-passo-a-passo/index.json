{"instances":{"application":{"persistent":false},"FacebookPixel/0-0-0-0-0":{"persistent":false},"GoogleAnalytics/0-0-0-0-1":{"persistent":false},"Article_Articles/0-0-12/10-boas-praticas-do-nodejs-em-producao-passo-a-passo":{"persistent":false,"slug":"10-boas-praticas-do-nodejs-em-producao-passo-a-passo","content":"<p>Neste artigo, veremos <strong>10 boas práticas do Nodejs</strong> que devemos fazer com os nosso projetos que estão indo ou já está em produção.</p>\n<p>Node.js é um runtime popular para escrever aplicações no backend. Essas aplicações costumam ser altamente escalável e usando por muitas pessoas. Para tornar mais fácil mantê-los, definimos algumas diretrizes para as programadores e programadoras seguirem.</p>\n<p>Caso não conheça bem o NodeJS tenho duas recomendação para lhe fazer:</p>\n<ul>\n<li><a href=\"/conhecendo-nodejs/\">ARTIGO: Conhecendo NodeJS</a></li>\n<li><a href=\"https://youtu.be/t4y9AFY9mmI\" target=\"_blank\" rel=\"noopener\">VÍDEO: Crindo um CRUD com NodeJS</a></li>\n</ul>\n<h2>01 - Use ambiente semelhante ao de produção para testes E2E</h2>\n<p>A execução de testes ponta a ponta em um ambiente de produção garante que não encontraremos problemas diferentes nas produções que detectamos de antemão.</p>\n<p>Além disso, devemos executar nossos testes em um banco de dados com dados limpos para que possamos repetir nossos testes.</p>\n<h2>02 - Refatore regularmente usando ferramentas de análise estática</h2>\n<p>Antes de colocar nosso código em produção, devemos refatorá-lo para que seja executado rapidamente em produção. Os testes automatizados nos ajudarão a ter certeza de que a refatoração não quebrará nenhuma funcionalidade existente.</p>\n<p>A má qualidade do código criará mais bugs e problemas de desempenho que são difíceis de corrigir.</p>\n<p>Esse artigo poderá ajuda com relação as ferramentas: <a href=\"/30-ferramentas-para-um-desenvolvedor-front-end/\">clique aqui para ler</a></p>\n<p><a href=\"/ebook-gratuito-html\"><img src=\"/uploads/2020/09/ebook-guia-completo-html.png\" alt=\"Ebook HTML\"></a></p>\n<p>Ebook HTML</p>\n<h2>03 - Escolha cuidadosamente a plataforma de CI</h2>\n<p>Jenkins e CircleCI são plataformas populares para integração contínua. Ter um pipeline de CI (integração contínua) nos permite executar testes e implantar automaticamente em segundo plano, em vez de executar tudo manualmente. Isso nos libera para fazer outros tipos de trabalho e nos dispensa de gerenciar manualmente a infraestrutura.</p>\n<p>Fazer uma boa escolher e com cuidado é sem dúvida uma das boas práticas do nodejs, pois a migração de um para o outro será uma dor.</p>\n<h2>04 - Sempre monitore sua aplicação</h2>\n<p>Devemos monitorar sempre nossas aplicações para se certifica que está funcionando corretamente e não consuma muitos recursos. Para fazer isso, podemos usar ferramentas de monitoramento e adicionar <strong>endpoints</strong> de verificação de integridade para verificar se nossa aplicação está em execução.</p>\n<p>Dessa forma, não vamos ser surpreendido por nenhum cliente ligando as 04h da manha dizendo que o sistema está fora do ar.</p>\n<h2>05 - Aumenta a transparência usando o Smart Logging</h2>\n<p>O registro nos permite solucionar problemas facilmente, identificando as atividades no log que podem estar causando problemas. A maioria das plataformas de registro pode controlar como os registros são coletados, armazenados e analisados ​​para garantir que ele esteja armazenando apenas os dados que desejamos.</p>\n<h2>06 - Delegar sempre que possível a um proxy reverso</h2>\n<p>Se algo pode ser feito com um proxy reverso, faça, pois eles não pertencem ao core da nossa aplicação. Tarefas como uso intensivo de CPU, como SSL, Gzip e terminação, devem ser feitas em um proxy reverso para aliviar a carga da aplicações.</p>\n<p>Isso é especialmente importante para aplicativos do Node, pois ele é executado apenas em um encadeamento, portanto, não queremos amarrá-lo fazendo com que ele execute tarefas relacionadas à infraestrutura que pertencem ao proxy reverso.</p>\n<h2>07 - Dependência de bloqueio</h2>\n<p>Devemos bloquear as dependências de nosso aplicativo para que não mudem de versão nos ambientes. Hoje em dia, isso deve ser feito automaticamente, pois <strong>npm install</strong> gera um <strong>package-lock.json</strong> caso não exista. Se ele existir, <strong>npm install</strong> usará as versões do arquivo para instalar as dependências.</p>\n<p>Se ele não existir em nosso repo ou se usarmos um controle refinado de como as versões são bloqueadas, podemos executar <strong>npm shrinkwrap</strong>. Este comando se transforma <strong>package-lock.jso</strong> nem publicável <strong>npm-shrinkwrap.json</strong> ou cria um novo.</p>\n<p>Ele tem precedência <strong>package-lock.json</strong>.</p>\n<h2>08 - Atividades de Processo</h2>\n<p>Nossa aplicação deve ser reiniciado quando falhar e preciso está ligado quando isso acontece, para resolver esse problemas podemos usar Forever ou PM2 para monitorar nossa aplicação e reiniciá-la quando ela travar. Se temos um cluster, também temos que gerenciá-lo.</p>\n<h2>09 - Utilize todos os núcleos da CPU</h2>\n<p><img src=\"/uploads/2020/09/boas-praticas-do-nodejs-1024x682.jpg\" alt=\"boas práticas do nodejs \"></p>\n<p>boas práticas do nodejs - CPU</p>\n<p>Devemos usar todos os núcleos da CPU para executar nossa aplicação com o desempenho mais rápido possível. Um núcleo da CPU é inútil se ficar ocioso. Se for esse o caso, devemos replicar os processos do Node e utilizar todas as CPUs. Para aplicativos pequenos, podemos usar Node Cluster ou PM2. Caso contrário, podemos usar um cluster <a href=\"/o-que-e-docker-guia-basico-passo-a-passo/\">Docker</a> como o ECS.</p>\n<h2>10 - Crie um Endpoint de Manutenção</h2>\n<p>Podemos usar isso para expor com segurança as informações de diagnóstico da nossa aplicação sem fazer login no servidor. Algumas informações são mais fáceis de obter usando código.</p>\n<p>No Node, podemos usar os <strong>módulo</strong> para expor informações sobre nosso servidor, essa atividade com certeza faz parte das <strong>boas práticas do nodejs.</strong> Por exemplo, podemos obter a plataforma para nosso aplicativo da seguinte maneira e retorná-la por meio de um endpoint:</p>\n<pre><code><span class=\"token keyword\">const</span> express <span class=\"token operator\">=</span> <span class=\"token function\">require</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'express'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> bodyParser <span class=\"token operator\">=</span> <span class=\"token function\">require</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'body-parser'</span><span class=\"token punctuation\">)</span> \n<span class=\"token keyword\">const</span> os <span class=\"token operator\">=</span> <span class=\"token function\">require</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'os'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token function\">express</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span> <span class=\"token punctuation\">(</span>bodyParser<span class=\"token punctuation\">.</span><span class=\"token function\">json</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span> <span class=\"token punctuation\">(</span>bodyParser<span class=\"token punctuation\">.</span><span class=\"token function\">urlencoded</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token literal-property property\">extended</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">get</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> próximo</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> \n  res<span class=\"token punctuation\">.</span><span class=\"token function\">send</span> <span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span><span class=\"token function\">platform</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span> <span class=\"token punctuation\">(</span><span class=\"token number\">3000</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'servidor iniciado'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> \n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> app\n</code></pre>\n<p>Claro, em um aplicativo de produção, isso deve ser protegido com autenticação.</p>\n<h2>Conclusão</h2>\n<p>Antes de ir para a produção, devemos ter um conjunto de testes ponta a ponta que são executados em um ambiente de produção limpo. Os dados devem ser redefinidos a cada teste executado para que sejam executados corretamente. Isso também ajuda no teste após a refatoração.<br>\nDevemos ter certeza de que temos implantado automatizado para liberar nosso tempo para outras tarefas.</p>\n<p>Além disso, certifique-se de que todos os núcleos da CPU do nosso servidor sejam utilizados.</p>\n<p>Finalmente, podemos desejar criar um endpoint de manutenção seguro para expor algumas informações para nós sem efetuar login no servidor.</p>\n<h3>Recomendado</h3>\n","date":"2020-09-30T00:00:00.000Z","readingTime":5,"title":"10 Boas Práticas do NodeJS em Produção Tudo passo a passo","description":"Neste artigo, veremos 10 boas práticas do Nodejs que devemos fazer com os nosso projetos que estão indo ou já está em produção.","imgArticle":"/thumbnail-article/10-boas-praticas-em-node-js-em-producao passo-a-passo.png","imgHome":"/thumbnail-home/10-boas-praticas-em-node-js-em-producao passo-a-passo.png"},"Navigation/0-0-12-0-0":{"expanded":false,"persistent":false},"Icon1/0-0-12-0-0-0-0-0-0-1-0":{"persistent":false}},"page":{"image":"/thumbnail-article/10-boas-praticas-em-node-js-em-producao passo-a-passo.png","status":200,"locale":"pt-BR","title":"10 Boas Práticas do NodeJS em Produção Tudo passo a passo - TipsCode","description":"Neste artigo, veremos 10 boas práticas do Nodejs que devemos fazer com os nosso projetos que estão indo ou já está em produção."}}